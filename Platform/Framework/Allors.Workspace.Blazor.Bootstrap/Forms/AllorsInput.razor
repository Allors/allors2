@implements IAllorsValidationField
@implements IDisposable

<BSFormGroup>
    <BSLabel>@DerivedLabel</BSLabel>
    <BSInput @bind-Value="Model"></BSInput>
    <BSFormFeedback For="@(() => Model)" />
</BSFormGroup>

@code {
    [CascadingParameter]
    public EditContext EditContext { get; set; }

    [CascadingParameter]
    public AllorsValidation Validation { get; set; }

    [Parameter]
    public IRoleType RoleType { get; set; }

    [Parameter]
    public ISessionObject Object { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool FullWidth { get; set; } = true;

    public ISessionObject DerivedObject
    {
        get
        {
            return this.Object ?? (ISessionObject)this.EditContext.Model;
        }
    }

    public string DerivedLabel
    {
        get
        {
            return this.Label ?? this.RoleType.DisplayName;
        }
    }

    public String Model
    {
        get
        {
            return (string)this.DerivedObject.Get(this.RoleType);
        }

        set
        {
            this.DerivedObject.Set(this.RoleType, value);
        }
    }

    public FieldIdentifier FieldIdentifier => new FieldIdentifier(this, "Model");

    public void Validate(ValidationMessageStore messages)
    {
        if (this.RoleType.IsRequired && string.IsNullOrWhiteSpace(this.Model))
        {
            messages.Add(this.FieldIdentifier, $"{this.RoleType.Name} is required");
        }
        else
        {
            messages.Clear(this.FieldIdentifier);
        }
    }

    void IDisposable.Dispose()
    {
        this.Validation.Remove(this);
    }

    override protected void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.Validation.Add(this);
        }
    }
}
