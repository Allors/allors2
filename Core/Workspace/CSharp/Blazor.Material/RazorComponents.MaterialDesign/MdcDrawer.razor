@inject IJSRuntime jsRuntime

<aside @ref="drawerElem" @ref:suppressField class="@CssClass" id="app-drawer">
    <CascadingValue Value="@this">
        <div class="mdc-drawer__header">
            <h3 class="mdc-drawer__title">@Title</h3>
            <h6 class="mdc-drawer__subtitle">@Subtitle</h6>
        </div>
        <div class="mdc-drawer__content">
            @Content
        </div>
    </CascadingValue>
</aside>

@functions {
    ElementReference drawerElem;
    bool isOpen;
    string CssClass => $"mdc-drawer mdc-drawer--dismissible { (StartOpen ? "mdc-drawer--open" : "") }";

    [Parameter] RenderFragment Title { get; set; }
    [Parameter] RenderFragment Subtitle { get; set; }
    [Parameter] RenderFragment Content { get; set; }
    [Parameter] bool StartOpen { get; set; }
    [Parameter] bool CloseOnNavigate { get; set; } = true;

    protected override void OnInitialized()
    {
        isOpen = StartOpen;
    }

    public void Toggle()
        => Toggle(!isOpen);

    public void Toggle(bool open)
    {
        isOpen = open;
        StateHasChanged();
    }

    public void NotifyNavigation()
    {
        if (CloseOnNavigate)
        {
            Toggle(false);
        }
    }

    protected override Task OnAfterRenderAsync()
        => jsRuntime.InvokeAsync<object>(
            "BlazorMaterial.drawer.toggle",
            drawerElem,
            isOpen);
}
