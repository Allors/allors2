// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Order : Allors.IObject , Transitional, Versioned
	{
		private readonly IStrategy strategy;

		public Order(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaOrder Meta
		{
			get
			{
				return Allors.Meta.MetaOrder.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Order Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Order) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public OrderState PreviousOrderState
		{ 
			get
			{
				return (OrderState) Strategy.GetCompositeRole(Meta.PreviousOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousOrderState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousOrderState.RelationType);
			}
		}

		virtual public void RemovePreviousOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousOrderState.RelationType);
		}


		virtual public OrderState LastOrderState
		{ 
			get
			{
				return (OrderState) Strategy.GetCompositeRole(Meta.LastOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastOrderState.RelationType, value);
			}
		}

		virtual public bool ExistLastOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastOrderState.RelationType);
			}
		}

		virtual public void RemoveLastOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.LastOrderState.RelationType);
		}


		virtual public OrderState OrderState
		{ 
			get
			{
				return (OrderState) Strategy.GetCompositeRole(Meta.OrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderState.RelationType, value);
			}
		}

		virtual public bool ExistOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderState.RelationType);
			}
		}

		virtual public void RemoveOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.OrderState.RelationType);
		}


		virtual public ShipmentState PreviousShipmentState
		{ 
			get
			{
				return (ShipmentState) Strategy.GetCompositeRole(Meta.PreviousShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousShipmentState.RelationType);
			}
		}

		virtual public void RemovePreviousShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousShipmentState.RelationType);
		}


		virtual public ShipmentState LastShipmentState
		{ 
			get
			{
				return (ShipmentState) Strategy.GetCompositeRole(Meta.LastShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistLastShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastShipmentState.RelationType);
			}
		}

		virtual public void RemoveLastShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastShipmentState.RelationType);
		}


		virtual public ShipmentState ShipmentState
		{ 
			get
			{
				return (ShipmentState) Strategy.GetCompositeRole(Meta.ShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipmentState.RelationType);
			}
		}

		virtual public void RemoveShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.ShipmentState.RelationType);
		}


		virtual public PaymentState PreviousPaymentState
		{ 
			get
			{
				return (PaymentState) Strategy.GetCompositeRole(Meta.PreviousPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPaymentState.RelationType);
			}
		}

		virtual public void RemovePreviousPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPaymentState.RelationType);
		}


		virtual public PaymentState LastPaymentState
		{ 
			get
			{
				return (PaymentState) Strategy.GetCompositeRole(Meta.LastPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistLastPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPaymentState.RelationType);
			}
		}

		virtual public void RemoveLastPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPaymentState.RelationType);
		}


		virtual public PaymentState PaymentState
		{ 
			get
			{
				return (PaymentState) Strategy.GetCompositeRole(Meta.PaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PaymentState.RelationType, value);
			}
		}

		virtual public bool ExistPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PaymentState.RelationType);
			}
		}

		virtual public void RemovePaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.PaymentState.RelationType);
		}


		virtual public global::Allors.Extent<OrderLine> OrderLines
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderLines.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderLines.RelationType, value);
			}
		}

		virtual public void AddOrderLine (OrderLine value)
		{
			Strategy.AddCompositeRole(Meta.OrderLines.RelationType, value);
		}

		virtual public void RemoveOrderLine (OrderLine value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderLines.RelationType, value);
		}

		virtual public bool ExistOrderLines
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderLines.RelationType);
			}
		}

		virtual public void RemoveOrderLines()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderLines.RelationType);
		}


		virtual public global::System.Decimal? Amount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Amount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Amount.RelationType, value);
			}
		}

		virtual public bool ExistAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.Amount.RelationType);
			}
		}

		virtual public void RemoveAmount()
		{
			Strategy.RemoveUnitRole(Meta.Amount.RelationType);
		}


		virtual public OrderState NonVersionedCurrentObjectState
		{ 
			get
			{
				return (OrderState) Strategy.GetCompositeRole(Meta.NonVersionedCurrentObjectState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NonVersionedCurrentObjectState.RelationType, value);
			}
		}

		virtual public bool ExistNonVersionedCurrentObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NonVersionedCurrentObjectState.RelationType);
			}
		}

		virtual public void RemoveNonVersionedCurrentObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.NonVersionedCurrentObjectState.RelationType);
		}


		virtual public global::Allors.Extent<OrderLine> NonVersionedOrderLines
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.NonVersionedOrderLines.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.NonVersionedOrderLines.RelationType, value);
			}
		}

		virtual public void AddNonVersionedOrderLine (OrderLine value)
		{
			Strategy.AddCompositeRole(Meta.NonVersionedOrderLines.RelationType, value);
		}

		virtual public void RemoveNonVersionedOrderLine (OrderLine value)
		{
			Strategy.RemoveCompositeRole(Meta.NonVersionedOrderLines.RelationType, value);
		}

		virtual public bool ExistNonVersionedOrderLines
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.NonVersionedOrderLines.RelationType);
			}
		}

		virtual public void RemoveNonVersionedOrderLines()
		{
			Strategy.RemoveCompositeRoles(Meta.NonVersionedOrderLines.RelationType);
		}


		virtual public global::System.Decimal? NonVersionedAmount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.NonVersionedAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NonVersionedAmount.RelationType, value);
			}
		}

		virtual public bool ExistNonVersionedAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.NonVersionedAmount.RelationType);
			}
		}

		virtual public void RemoveNonVersionedAmount()
		{
			Strategy.RemoveUnitRole(Meta.NonVersionedAmount.RelationType);
		}


		virtual public OrderVersion CurrentVersion
		{ 
			get
			{
				return (OrderVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<OrderVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (OrderVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (OrderVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new OrderOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OrderOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OrderOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OrderOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OrderOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OrderOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OrderOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OrderOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OrderOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OrderOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class OrderBuilder : Allors.ObjectBuilder<Order> , TransitionalBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public OrderBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Order instance)
		{
			

			if(this.Amount.HasValue)
			{
				instance.Amount = this.Amount.Value;
			}			
		
		
			

			if(this.NonVersionedAmount.HasValue)
			{
				instance.NonVersionedAmount = this.NonVersionedAmount.Value;
			}			
		
		
				

			instance.OrderState = this.OrderState;

						

			instance.ShipmentState = this.ShipmentState;

						

			instance.PaymentState = this.PaymentState;

		
			if(this.OrderLines!=null)
			{
				instance.OrderLines = this.OrderLines.ToArray();
			}
		

			instance.NonVersionedCurrentObjectState = this.NonVersionedCurrentObjectState;

		
			if(this.NonVersionedOrderLines!=null)
			{
				instance.NonVersionedOrderLines = this.NonVersionedOrderLines.ToArray();
			}
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public OrderState OrderState {get; set;}

				/// <exclude/>
				public OrderBuilder WithOrderState(OrderState value)
		        {
		            if(this.OrderState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderState = value;
		            return this;
		        }		

				
				public ShipmentState ShipmentState {get; set;}

				/// <exclude/>
				public OrderBuilder WithShipmentState(ShipmentState value)
		        {
		            if(this.ShipmentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipmentState = value;
		            return this;
		        }		

				
				public PaymentState PaymentState {get; set;}

				/// <exclude/>
				public OrderBuilder WithPaymentState(PaymentState value)
		        {
		            if(this.PaymentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrderLine> OrderLines {get; set;}	

				/// <exclude/>
				public OrderBuilder WithOrderLine(OrderLine value)
		        {
					if(this.OrderLines == null)
					{
						this.OrderLines = new global::System.Collections.Generic.List<OrderLine>(); 
					}
		            this.OrderLines.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public OrderBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public OrderState NonVersionedCurrentObjectState {get; set;}

				/// <exclude/>
				public OrderBuilder WithNonVersionedCurrentObjectState(OrderState value)
		        {
		            if(this.NonVersionedCurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NonVersionedCurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrderLine> NonVersionedOrderLines {get; set;}	

				/// <exclude/>
				public OrderBuilder WithNonVersionedOrderLine(OrderLine value)
		        {
					if(this.NonVersionedOrderLines == null)
					{
						this.NonVersionedOrderLines = new global::System.Collections.Generic.List<OrderLine>(); 
					}
		            this.NonVersionedOrderLines.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? NonVersionedAmount {get; set;}

				/// <exclude/>
				public OrderBuilder WithNonVersionedAmount(global::System.Decimal? value)
		        {
				    if(this.NonVersionedAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NonVersionedAmount = value;
		            return this;
		        }	

				public OrderVersion CurrentVersion {get; set;}

				/// <exclude/>
				public OrderBuilder WithCurrentVersion(OrderVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrderVersion> AllVersions {get; set;}	

				/// <exclude/>
				public OrderBuilder WithAllVersion(OrderVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<OrderVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrderBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrderBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Orders : global::Allors.ObjectsBase<Order>
	{
		public Orders(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaOrder Meta
		{
			get
			{
				return Allors.Meta.MetaOrder.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}