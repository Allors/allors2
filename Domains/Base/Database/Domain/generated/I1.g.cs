// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface I1 :  I12,S1, Allors.IObject
	{


		I1 I1I1Many2One
		{ 
			get;
			set;
		}

		bool ExistI1I1Many2One
		{
			get;
		}

		void RemoveI1I1Many2One();


		global::Allors.Extent<I12> I1I12Many2Manies
		{ 
			get;
			set;
		}

		void AddI1I12Many2Many (I12 value);

		void RemoveI1I12Many2Many (I12 value);

		bool ExistI1I12Many2Manies
		{
			get;
		}

		void RemoveI1I12Many2Manies();


		global::Allors.Extent<I2> I1I2Many2Manies
		{ 
			get;
			set;
		}

		void AddI1I2Many2Many (I2 value);

		void RemoveI1I2Many2Many (I2 value);

		bool ExistI1I2Many2Manies
		{
			get;
		}

		void RemoveI1I2Many2Manies();


		I2 I1I2Many2One
		{ 
			get;
			set;
		}

		bool ExistI1I2Many2One
		{
			get;
		}

		void RemoveI1I2Many2One();


		global::System.String I1AllorsString 
		{
			get;
			set;
		}

		bool ExistI1AllorsString{get;}

		void RemoveI1AllorsString();


		I12 I1I12Many2One
		{ 
			get;
			set;
		}

		bool ExistI1I12Many2One
		{
			get;
		}

		void RemoveI1I12Many2One();


		global::System.DateTime? I1AllorsDateTime 
		{
			get;
			set;
		}

		bool ExistI1AllorsDateTime{get;}

		void RemoveI1AllorsDateTime();


		global::Allors.Extent<I2> I1I2One2Manies
		{ 
			get;
			set;
		}

		void AddI1I2One2Many (I2 value);

		void RemoveI1I2One2Many (I2 value);

		bool ExistI1I2One2Manies
		{
			get;
		}

		void RemoveI1I2One2Manies();


		global::Allors.Extent<C2> I1C2One2Manies
		{ 
			get;
			set;
		}

		void AddI1C2One2Many (C2 value);

		void RemoveI1C2One2Many (C2 value);

		bool ExistI1C2One2Manies
		{
			get;
		}

		void RemoveI1C2One2Manies();


		C1 I1C1One2One
		{ 
			get;
			set;
		}

		bool ExistI1C1One2One
		{
			get;
		}

		void RemoveI1C1One2One();


		global::System.Int32? I1AllorsInteger 
		{
			get;
			set;
		}

		bool ExistI1AllorsInteger{get;}

		void RemoveI1AllorsInteger();


		global::Allors.Extent<C2> I1C2Many2Manies
		{ 
			get;
			set;
		}

		void AddI1C2Many2Many (C2 value);

		void RemoveI1C2Many2Many (C2 value);

		bool ExistI1C2Many2Manies
		{
			get;
		}

		void RemoveI1C2Many2Manies();


		global::Allors.Extent<I1> I1I1One2Manies
		{ 
			get;
			set;
		}

		void AddI1I1One2Many (I1 value);

		void RemoveI1I1One2Many (I1 value);

		bool ExistI1I1One2Manies
		{
			get;
		}

		void RemoveI1I1One2Manies();


		global::Allors.Extent<I1> I1I1Many2Manies
		{ 
			get;
			set;
		}

		void AddI1I1Many2Many (I1 value);

		void RemoveI1I1Many2Many (I1 value);

		bool ExistI1I1Many2Manies
		{
			get;
		}

		void RemoveI1I1Many2Manies();


		global::System.Boolean? I1AllorsBoolean 
		{
			get;
			set;
		}

		bool ExistI1AllorsBoolean{get;}

		void RemoveI1AllorsBoolean();


		global::System.Decimal? I1AllorsDecimal 
		{
			get;
			set;
		}

		bool ExistI1AllorsDecimal{get;}

		void RemoveI1AllorsDecimal();


		I12 I1I12One2One
		{ 
			get;
			set;
		}

		bool ExistI1I12One2One
		{
			get;
		}

		void RemoveI1I12One2One();


		I2 I1I2One2One
		{ 
			get;
			set;
		}

		bool ExistI1I2One2One
		{
			get;
		}

		void RemoveI1I2One2One();


		C2 I1C2One2One
		{ 
			get;
			set;
		}

		bool ExistI1C2One2One
		{
			get;
		}

		void RemoveI1C2One2One();


		global::Allors.Extent<C1> I1C1One2Manies
		{ 
			get;
			set;
		}

		void AddI1C1One2Many (C1 value);

		void RemoveI1C1One2Many (C1 value);

		bool ExistI1C1One2Manies
		{
			get;
		}

		void RemoveI1C1One2Manies();


		global::System.Byte[] I1AllorsBinary 
		{
			get;
			set;
		}

		bool ExistI1AllorsBinary{get;}

		void RemoveI1AllorsBinary();


		global::Allors.Extent<C1> I1C1Many2Manies
		{ 
			get;
			set;
		}

		void AddI1C1Many2Many (C1 value);

		void RemoveI1C1Many2Many (C1 value);

		bool ExistI1C1Many2Manies
		{
			get;
		}

		void RemoveI1C1Many2Manies();


		global::System.Double? I1AllorsDouble 
		{
			get;
			set;
		}

		bool ExistI1AllorsDouble{get;}

		void RemoveI1AllorsDouble();


		I1 I1I1One2One
		{ 
			get;
			set;
		}

		bool ExistI1I1One2One
		{
			get;
		}

		void RemoveI1I1One2One();


		C1 I1C1Many2One
		{ 
			get;
			set;
		}

		bool ExistI1C1Many2One
		{
			get;
		}

		void RemoveI1C1Many2One();


		global::Allors.Extent<I12> I1I12One2Manies
		{ 
			get;
			set;
		}

		void AddI1I12One2Many (I12 value);

		void RemoveI1I12One2Many (I12 value);

		bool ExistI1I12One2Manies
		{
			get;
		}

		void RemoveI1I12One2Manies();


		C2 I1C2Many2One
		{ 
			get;
			set;
		}

		bool ExistI1C2Many2One
		{
			get;
		}

		void RemoveI1C2Many2One();


		global::System.Guid? I1AllorsUnique 
		{
			get;
			set;
		}

		bool ExistI1AllorsUnique{get;}

		void RemoveI1AllorsUnique();



		global::Allors.Extent<C1> C1sWhereC1I1Many2Many
		{ 
			get;
		}

		bool ExistC1sWhereC1I1Many2Many
		{
			get;
		}


		global::Allors.Extent<C1> C1sWhereC1I1Many2One
		{ 
			get;
		}

		bool ExistC1sWhereC1I1Many2One
		{
			get;
		}


		C1 C1WhereC1I1One2Many
		{
			get;
		}

		bool ExistC1WhereC1I1One2Many
		{
			get;
		}


		C1 C1WhereC1I1One2One
		{
			get;
		}

		bool ExistC1WhereC1I1One2One
		{
			get;
		}


		global::Allors.Extent<C2> C2sWhereC2I1Many2Many
		{ 
			get;
		}

		bool ExistC2sWhereC2I1Many2Many
		{
			get;
		}


		C2 C2WhereC2I1One2Many
		{
			get;
		}

		bool ExistC2WhereC2I1One2Many
		{
			get;
		}


		global::Allors.Extent<C2> C2sWhereC2I1Many2One
		{ 
			get;
		}

		bool ExistC2sWhereC2I1Many2One
		{
			get;
		}


		C2 C2WhereC2I1One2One
		{
			get;
		}

		bool ExistC2WhereC2I1One2One
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I1Many2One
		{ 
			get;
		}

		bool ExistI1sWhereI1I1Many2One
		{
			get;
		}


		I1 I1WhereI1I1One2Many
		{
			get;
		}

		bool ExistI1WhereI1I1One2Many
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I1Many2Many
		{ 
			get;
		}

		bool ExistI1sWhereI1I1Many2Many
		{
			get;
		}


		I1 I1WhereI1I1One2One
		{
			get;
		}

		bool ExistI1WhereI1I1One2One
		{
			get;
		}


		global::Allors.Extent<I12> I12sWhereI12I1Many2One
		{ 
			get;
		}

		bool ExistI12sWhereI12I1Many2One
		{
			get;
		}


		global::Allors.Extent<I12> I12sWhereI12I1Many2Many
		{ 
			get;
		}

		bool ExistI12sWhereI12I1Many2Many
		{
			get;
		}


		I12 I12WhereI12I1One2Many
		{
			get;
		}

		bool ExistI12WhereI12I1One2Many
		{
			get;
		}


		I12 I12WhereI12I1One2One
		{
			get;
		}

		bool ExistI12WhereI12I1One2One
		{
			get;
		}


		global::Allors.Extent<I2> I2sWhereI2I1Many2One
		{ 
			get;
		}

		bool ExistI2sWhereI2I1Many2One
		{
			get;
		}


		global::Allors.Extent<I2> I2sWhereI2I1Many2Many
		{ 
			get;
		}

		bool ExistI2sWhereI2I1Many2Many
		{
			get;
		}


		I2 I2WhereI2I1One2One
		{
			get;
		}

		bool ExistI2WhereI2I1One2One
		{
			get;
		}


		I2 I2WhereI2I1One2Many
		{
			get;
		}

		bool ExistI2WhereI2I1One2Many
		{
			get;
		}



		I1InterfaceMethod InterfaceMethod();

		I1InterfaceMethod InterfaceMethod(System.Action<I1InterfaceMethod> action);
	}

	public partial interface I1Builder : I12Builder ,S1Builder , global::System.IDisposable
	{	
		I1 I1I1Many2One {get;}

		


		global::System.Collections.Generic.List<I12> I1I12Many2Manies {get;}		

		


		global::System.Collections.Generic.List<I2> I1I2Many2Manies {get;}		

		

		I2 I1I2Many2One {get;}

		

		global::System.String I1AllorsString {get;}
		

		I12 I1I12Many2One {get;}

		

		global::System.DateTime? I1AllorsDateTime {get;}
		


		global::System.Collections.Generic.List<I2> I1I2One2Manies {get;}		

		


		global::System.Collections.Generic.List<C2> I1C2One2Manies {get;}		

		

		C1 I1C1One2One {get;}

		

		global::System.Int32? I1AllorsInteger {get;}
		


		global::System.Collections.Generic.List<C2> I1C2Many2Manies {get;}		

		


		global::System.Collections.Generic.List<I1> I1I1One2Manies {get;}		

		


		global::System.Collections.Generic.List<I1> I1I1Many2Manies {get;}		

		

		global::System.Boolean? I1AllorsBoolean {get;}
		

		global::System.Decimal? I1AllorsDecimal {get;}
		

		I12 I1I12One2One {get;}

		

		I2 I1I2One2One {get;}

		

		C2 I1C2One2One {get;}

		


		global::System.Collections.Generic.List<C1> I1C1One2Manies {get;}		

		

		global::System.Byte[] I1AllorsBinary {get;}
		


		global::System.Collections.Generic.List<C1> I1C1Many2Manies {get;}		

		

		global::System.Double? I1AllorsDouble {get;}
		

		I1 I1I1One2One {get;}

		

		C1 I1C1Many2One {get;}

		


		global::System.Collections.Generic.List<I12> I1I12One2Manies {get;}		

		

		C2 I1C2Many2One {get;}

		

		global::System.Guid? I1AllorsUnique {get;}
		

	}

	public partial class I1s : global::Allors.ObjectsBase<I1>
	{
		public I1s(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaI1 Meta
		{
			get
			{
				return Allors.Meta.MetaI1.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}