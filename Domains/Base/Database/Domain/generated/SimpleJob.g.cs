// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SimpleJob : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public SimpleJob(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaSimpleJob Meta
		{
			get
			{
				return Allors.Meta.MetaSimpleJob.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SimpleJob Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SimpleJob) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Int32? Index 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Index.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Index.RelationType, value);
			}
		}

		virtual public bool ExistIndex{
			get
			{
				return Strategy.ExistUnitRole(Meta.Index.RelationType);
			}
		}

		virtual public void RemoveIndex()
		{
			Strategy.RemoveUnitRole(Meta.Index.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SimpleJobOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SimpleJobOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SimpleJobOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SimpleJobOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SimpleJobOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SimpleJobOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SimpleJobOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SimpleJobOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SimpleJobOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SimpleJobOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class SimpleJobBuilder : Allors.ObjectBuilder<SimpleJob> , ObjectBuilder, global::System.IDisposable
	{		
		public SimpleJobBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SimpleJob instance)
		{
			

			if(this.Index.HasValue)
			{
				instance.Index = this.Index.Value;
			}			
		
		
		}


				public global::System.Int32? Index {get; set;}

				/// <exclude/>
				public SimpleJobBuilder WithIndex(global::System.Int32? value)
		        {
				    if(this.Index!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Index = value;
		            return this;
		        }	


	}

	public partial class SimpleJobs : global::Allors.ObjectsBase<SimpleJob>
	{
		public SimpleJobs(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaSimpleJob Meta
		{
			get
			{
				return Allors.Meta.MetaSimpleJob.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}