// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ClassWithoutRoles : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public ClassWithoutRoles(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaClassWithoutRoles Meta
		{
			get
			{
				return Allors.Meta.MetaClassWithoutRoles.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ClassWithoutRoles Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ClassWithoutRoles) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ClassWithoutRolesOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ClassWithoutRolesOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ClassWithoutRolesOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ClassWithoutRolesOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ClassWithoutRolesOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ClassWithoutRolesOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ClassWithoutRolesOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ClassWithoutRolesOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ClassWithoutRolesOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ClassWithoutRolesOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ClassWithoutRolesBuilder : Allors.ObjectBuilder<ClassWithoutRoles> , ObjectBuilder, global::System.IDisposable
	{		
		public ClassWithoutRolesBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ClassWithoutRoles instance)
		{
		}


	}

	public partial class ClassWithourRoleses : global::Allors.ObjectsBase<ClassWithoutRoles>
	{
		public ClassWithourRoleses(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaClassWithoutRoles Meta
		{
			get
			{
				return Allors.Meta.MetaClassWithoutRoles.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}