// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class C1 : Allors.IObject , I1, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public C1(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaC1 Meta
		{
			get
			{
				return Allors.Meta.MetaC1.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static C1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C1) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Byte[] C1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C1AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveC1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBinary.RelationType);
		}


		virtual public global::System.Boolean? C1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C1AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveC1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBoolean.RelationType);
		}


		virtual public global::System.DateTime? C1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.C1AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveC1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDateTime.RelationType);
		}


		virtual public global::System.Decimal? C1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C1AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveC1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDecimal.RelationType);
		}


		virtual public global::System.Double? C1AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C1AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveC1AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDouble.RelationType);
		}


		virtual public global::System.Int32? C1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C1AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveC1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsInteger.RelationType);
		}


		virtual public global::System.String C1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C1AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsString.RelationType);
			}
		}

		virtual public void RemoveC1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsString.RelationType);
		}


		virtual public global::System.String AllorsStringMax 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsStringMax.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsStringMax.RelationType, value);
			}
		}

		virtual public bool ExistAllorsStringMax{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsStringMax.RelationType);
			}
		}

		virtual public void RemoveAllorsStringMax()
		{
			Strategy.RemoveUnitRole(Meta.AllorsStringMax.RelationType);
		}


		virtual public global::System.Guid? C1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C1AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistC1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveC1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsUnique.RelationType);
		}


		virtual public global::Allors.Extent<C1> C1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveC1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistC1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1Many2Manies.RelationType);
		}


		virtual public C1 C1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1Many2One.RelationType);
			}
		}

		virtual public void RemoveC1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> C1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddC1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1One2Manies.RelationType, value);
		}

		virtual public void RemoveC1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2Manies.RelationType, value);
		}

		virtual public bool ExistC1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveC1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1One2Manies.RelationType);
		}


		virtual public C1 C1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistC1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1One2One.RelationType);
			}
		}

		virtual public void RemoveC1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2One.RelationType);
		}


		virtual public global::Allors.Extent<C2> C1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveC1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistC1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2Many2Manies.RelationType);
		}


		virtual public C2 C1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2Many2One.RelationType);
			}
		}

		virtual public void RemoveC1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2One.RelationType);
		}


		virtual public global::Allors.Extent<C2> C1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2One2Manies.RelationType, value);
			}
		}

		virtual public void AddC1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2One2Manies.RelationType, value);
		}

		virtual public void RemoveC1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2Manies.RelationType, value);
		}

		virtual public bool ExistC1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2One2Manies.RelationType);
			}
		}

		virtual public void RemoveC1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2One2Manies.RelationType);
		}


		virtual public C2 C1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistC1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2One2One.RelationType);
			}
		}

		virtual public void RemoveC1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> C1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveC1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistC1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12Many2Manies.RelationType);
		}


		virtual public I12 C1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12Many2One.RelationType);
			}
		}

		virtual public void RemoveC1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> C1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12One2Manies.RelationType, value);
		}

		virtual public void RemoveC1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2Manies.RelationType, value);
		}

		virtual public bool ExistC1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12One2Manies.RelationType);
		}


		virtual public I12 C1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12One2One.RelationType);
			}
		}

		virtual public void RemoveC1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2One.RelationType);
		}


		virtual public global::Allors.Extent<I1> C1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveC1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistC1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1Many2Manies.RelationType);
		}


		virtual public I1 C1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1Many2One.RelationType);
			}
		}

		virtual public void RemoveC1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2One.RelationType);
		}


		virtual public global::Allors.Extent<I1> C1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1One2Manies.RelationType, value);
		}

		virtual public void RemoveC1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2Manies.RelationType, value);
		}

		virtual public bool ExistC1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1One2Manies.RelationType);
		}


		virtual public I1 C1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1One2One.RelationType);
			}
		}

		virtual public void RemoveC1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2One.RelationType);
		}


		virtual public global::Allors.Extent<I2> C1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveC1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistC1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2Many2Manies.RelationType);
		}


		virtual public I2 C1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2Many2One.RelationType);
			}
		}

		virtual public void RemoveC1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2One.RelationType);
		}


		virtual public global::Allors.Extent<I2> C1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddC1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2One2Manies.RelationType, value);
		}

		virtual public void RemoveC1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2Manies.RelationType, value);
		}

		virtual public bool ExistC1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveC1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2One2Manies.RelationType);
		}


		virtual public I2 C1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistC1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2One2One.RelationType);
			}
		}

		virtual public void RemoveC1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2One.RelationType);
		}


		virtual public I1 I1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1Many2One.RelationType);
			}
		}

		virtual public void RemoveI1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> I1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveI1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistI1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I2> I1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2Many2Manies.RelationType);
		}


		virtual public I2 I1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2Many2One.RelationType);
			}
		}

		virtual public void RemoveI1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2One.RelationType);
		}


		virtual public global::System.String I1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I1AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsString.RelationType);
			}
		}

		virtual public void RemoveI1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsString.RelationType);
		}


		virtual public I12 I1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12Many2One.RelationType);
			}
		}

		virtual public void RemoveI1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2One.RelationType);
		}


		virtual public global::System.DateTime? I1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I1AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveI1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDateTime.RelationType);
		}


		virtual public global::Allors.Extent<I2> I1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2One2Manies.RelationType, value);
		}

		virtual public void RemoveI1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2Manies.RelationType, value);
		}

		virtual public bool ExistI1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2One2Manies.RelationType);
		}


		virtual public global::Allors.Extent<C2> I1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2One2Manies.RelationType, value);
		}

		virtual public void RemoveI1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2Manies.RelationType, value);
		}

		virtual public bool ExistI1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2One2Manies.RelationType);
		}


		virtual public C1 I1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1One2One.RelationType);
			}
		}

		virtual public void RemoveI1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2One.RelationType);
		}


		virtual public global::System.Int32? I1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I1AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveI1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsInteger.RelationType);
		}


		virtual public global::Allors.Extent<C2> I1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I1> I1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1One2Manies.RelationType, value);
		}

		virtual public void RemoveI1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2Manies.RelationType, value);
		}

		virtual public bool ExistI1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1One2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I1> I1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1Many2Manies.RelationType);
		}


		virtual public global::System.Boolean? I1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I1AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveI1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBoolean.RelationType);
		}


		virtual public global::System.Decimal? I1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I1AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveI1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDecimal.RelationType);
		}


		virtual public I12 I1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12One2One.RelationType);
			}
		}

		virtual public void RemoveI1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2One.RelationType);
		}


		virtual public I2 I1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2One2One.RelationType);
			}
		}

		virtual public void RemoveI1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2One.RelationType);
		}


		virtual public C2 I1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2One2One.RelationType);
			}
		}

		virtual public void RemoveI1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> I1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1One2Manies.RelationType, value);
		}

		virtual public void RemoveI1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2Manies.RelationType, value);
		}

		virtual public bool ExistI1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1One2Manies.RelationType);
		}


		virtual public global::System.Byte[] I1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I1AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveI1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBinary.RelationType);
		}


		virtual public global::Allors.Extent<C1> I1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1Many2Manies.RelationType);
		}


		virtual public global::System.Double? I1AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I1AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveI1AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDouble.RelationType);
		}


		virtual public I1 I1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1One2One.RelationType);
			}
		}

		virtual public void RemoveI1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2One.RelationType);
		}


		virtual public C1 I1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1Many2One.RelationType);
			}
		}

		virtual public void RemoveI1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> I1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddI1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12One2Manies.RelationType, value);
		}

		virtual public void RemoveI1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2Manies.RelationType, value);
		}

		virtual public bool ExistI1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveI1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12One2Manies.RelationType);
		}


		virtual public C2 I1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2Many2One.RelationType);
			}
		}

		virtual public void RemoveI1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2One.RelationType);
		}


		virtual public global::System.Guid? I1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I1AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistI1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveI1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsUnique.RelationType);
		}


		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary.RelationType);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One.RelationType);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One.RelationType);
		}


		virtual public global::System.Double? I12AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDouble.RelationType);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One.RelationType);
		}


		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString.RelationType);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString.RelationType);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Manies.RelationType);
		}


		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal.RelationType);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Manies.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Manies.RelationType);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One.RelationType);
		}


		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique.RelationType);
		}


		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger.RelationType);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Manies.RelationType);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One.RelationType);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One.RelationType);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One.RelationType);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One.RelationType);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One.RelationType);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependencies.RelationType, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependencies.RelationType, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependencies.RelationType, value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependencies.RelationType);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependencies.RelationType);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Manies.RelationType);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One.RelationType);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One.RelationType);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One.RelationType);
		}


		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean.RelationType);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One.RelationType);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Manies.RelationType, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Manies.RelationType, value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Manies.RelationType);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One.RelationType);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One.RelationType);
		}


		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I12AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDateTime.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<C1> C1sWhereC1C1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1C1Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1C1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1C1Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1C1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1C1Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1C1Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1C1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1C1One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1C1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1C1One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1C1One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1C1One2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2C1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2C1One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2C1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2C1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2C1Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2C1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2C1Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2C1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2C1Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2C1Many2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2C1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2C1One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2C1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2C1One2Many.RelationType);
			}
		}


		virtual public I1 I1WhereI1C1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1C1One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1C1One2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1C1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1C1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1C1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1C1One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1C1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1C1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1C1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1C1Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1C1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1C1Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1C1Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12C1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12C1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12C1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12C1Many2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12C1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12C1One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12C1One2One.RelationType);
			}
		}


		virtual public I12 I12WhereI12C1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12C1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12C1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12C1One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12C1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12C1Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12C1Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2C1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2C1Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2C1Many2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2C1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2C1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2C1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2C1One2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2C1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2C1One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2C1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2C1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2C1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2C1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2C1Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I1Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I1Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I1Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I1Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1I1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I1One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I1One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1I1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I1One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I1Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I1Many2Many.RelationType);
			}
		}


		virtual public C2 C2WhereC2I1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I1One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I1One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I1Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I1Many2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2I1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I1One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I1Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I1Many2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I1One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I1Many2Many.RelationType);
			}
		}


		virtual public I1 I1WhereI1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I1One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I1Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I1Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I1Many2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I1One2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I1One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I1One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I1Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I1Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I1Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I1Many2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2I1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I1One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I1One2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2I1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I1One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I1One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I12Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I12Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I12Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1I12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I12One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1I12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I12One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I12Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I12Many2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2I12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I12One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I12Many2Many.RelationType);
			}
		}


		virtual public C2 C2WhereC2I12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I12One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I12Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I12Many2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I12One2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I12One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I12Many2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I12One2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency.RelationType);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I12Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I12Many2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2I12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I12One2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2I12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I12Many2Many.RelationType);
			}
		}



		public C1ClassMethod ClassMethod()
		{ 
			var method = new C1ClassMethod(this);
            method.Execute();
            return method;
		}

		public C1ClassMethod ClassMethod(System.Action<C1ClassMethod> action)
		{ 
			var method = new C1ClassMethod(this);
            action(method);
            method.Execute();
            return method;
		}

		public C1Sum Sum()
		{ 
			var method = new C1Sum(this);
            method.Execute();
            return method;
		}

		public C1Sum Sum(System.Action<C1Sum> action)
		{ 
			var method = new C1Sum(this);
            action(method);
            method.Execute();
            return method;
		}

		public I1InterfaceMethod InterfaceMethod()
		{ 
			var method = new C1InterfaceMethod(this);
            method.Execute();
            return method;
		}

		public I1InterfaceMethod InterfaceMethod(System.Action<I1InterfaceMethod> action)
		{ 
			var method = new C1InterfaceMethod(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new C1OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new C1OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new C1OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new C1OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new C1OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new C1OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new C1OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new C1OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new C1OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new C1OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public S1SuperinterfaceMethod SuperinterfaceMethod()
		{ 
			var method = new C1SuperinterfaceMethod(this);
            method.Execute();
            return method;
		}

		public S1SuperinterfaceMethod SuperinterfaceMethod(System.Action<S1SuperinterfaceMethod> action)
		{ 
			var method = new C1SuperinterfaceMethod(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class C1Builder : Allors.ObjectBuilder<C1> , I1Builder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public C1Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(C1 instance)
		{

			instance.C1AllorsBinary = this.C1AllorsBinary;
		
		
			

			if(this.C1AllorsBoolean.HasValue)
			{
				instance.C1AllorsBoolean = this.C1AllorsBoolean.Value;
			}			
		
		
			

			if(this.C1AllorsDateTime.HasValue)
			{
				instance.C1AllorsDateTime = this.C1AllorsDateTime.Value;
			}			
		
		
			

			if(this.C1AllorsDecimal.HasValue)
			{
				instance.C1AllorsDecimal = this.C1AllorsDecimal.Value;
			}			
		
		
			

			if(this.C1AllorsDouble.HasValue)
			{
				instance.C1AllorsDouble = this.C1AllorsDouble.Value;
			}			
		
		
			

			if(this.C1AllorsInteger.HasValue)
			{
				instance.C1AllorsInteger = this.C1AllorsInteger.Value;
			}			
		
		

			instance.C1AllorsString = this.C1AllorsString;
		
		

			instance.AllorsStringMax = this.AllorsStringMax;
		
		
			

			if(this.C1AllorsUnique.HasValue)
			{
				instance.C1AllorsUnique = this.C1AllorsUnique.Value;
			}			
		
		

			instance.I1AllorsString = this.I1AllorsString;
		
		
			

			if(this.I1AllorsDateTime.HasValue)
			{
				instance.I1AllorsDateTime = this.I1AllorsDateTime.Value;
			}			
		
		
			

			if(this.I1AllorsInteger.HasValue)
			{
				instance.I1AllorsInteger = this.I1AllorsInteger.Value;
			}			
		
		
			

			if(this.I1AllorsBoolean.HasValue)
			{
				instance.I1AllorsBoolean = this.I1AllorsBoolean.Value;
			}			
		
		
			

			if(this.I1AllorsDecimal.HasValue)
			{
				instance.I1AllorsDecimal = this.I1AllorsDecimal.Value;
			}			
		
		

			instance.I1AllorsBinary = this.I1AllorsBinary;
		
		
			

			if(this.I1AllorsDouble.HasValue)
			{
				instance.I1AllorsDouble = this.I1AllorsDouble.Value;
			}			
		
		
			

			if(this.I1AllorsUnique.HasValue)
			{
				instance.I1AllorsUnique = this.I1AllorsUnique.Value;
			}			
		
		

			instance.I12AllorsBinary = this.I12AllorsBinary;
		
		
			

			if(this.I12AllorsDouble.HasValue)
			{
				instance.I12AllorsDouble = this.I12AllorsDouble.Value;
			}			
		
		

			instance.I12AllorsString = this.I12AllorsString;
		
		
			

			if(this.I12AllorsDecimal.HasValue)
			{
				instance.I12AllorsDecimal = this.I12AllorsDecimal.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.I12AllorsUnique.HasValue)
			{
				instance.I12AllorsUnique = this.I12AllorsUnique.Value;
			}			
		
		
			

			if(this.I12AllorsInteger.HasValue)
			{
				instance.I12AllorsInteger = this.I12AllorsInteger.Value;
			}			
		
		
			

			if(this.I12AllorsBoolean.HasValue)
			{
				instance.I12AllorsBoolean = this.I12AllorsBoolean.Value;
			}			
		
		
			

			if(this.I12AllorsDateTime.HasValue)
			{
				instance.I12AllorsDateTime = this.I12AllorsDateTime.Value;
			}			
		
		
			if(this.C1C1Many2Manies!=null)
			{
				instance.C1C1Many2Manies = this.C1C1Many2Manies.ToArray();
			}
		

			instance.C1C1Many2One = this.C1C1Many2One;

		
			if(this.C1C1One2Manies!=null)
			{
				instance.C1C1One2Manies = this.C1C1One2Manies.ToArray();
			}
		

			instance.C1C1One2One = this.C1C1One2One;

		
			if(this.C1C2Many2Manies!=null)
			{
				instance.C1C2Many2Manies = this.C1C2Many2Manies.ToArray();
			}
		

			instance.C1C2Many2One = this.C1C2Many2One;

		
			if(this.C1C2One2Manies!=null)
			{
				instance.C1C2One2Manies = this.C1C2One2Manies.ToArray();
			}
		

			instance.C1C2One2One = this.C1C2One2One;

		
			if(this.C1I12Many2Manies!=null)
			{
				instance.C1I12Many2Manies = this.C1I12Many2Manies.ToArray();
			}
		

			instance.C1I12Many2One = this.C1I12Many2One;

		
			if(this.C1I12One2Manies!=null)
			{
				instance.C1I12One2Manies = this.C1I12One2Manies.ToArray();
			}
		

			instance.C1I12One2One = this.C1I12One2One;

		
			if(this.C1I1Many2Manies!=null)
			{
				instance.C1I1Many2Manies = this.C1I1Many2Manies.ToArray();
			}
		

			instance.C1I1Many2One = this.C1I1Many2One;

		
			if(this.C1I1One2Manies!=null)
			{
				instance.C1I1One2Manies = this.C1I1One2Manies.ToArray();
			}
		

			instance.C1I1One2One = this.C1I1One2One;

		
			if(this.C1I2Many2Manies!=null)
			{
				instance.C1I2Many2Manies = this.C1I2Many2Manies.ToArray();
			}
		

			instance.C1I2Many2One = this.C1I2Many2One;

		
			if(this.C1I2One2Manies!=null)
			{
				instance.C1I2One2Manies = this.C1I2One2Manies.ToArray();
			}
		

			instance.C1I2One2One = this.C1I2One2One;

		

			instance.I1I1Many2One = this.I1I1Many2One;

		
			if(this.I1I12Many2Manies!=null)
			{
				instance.I1I12Many2Manies = this.I1I12Many2Manies.ToArray();
			}
		
			if(this.I1I2Many2Manies!=null)
			{
				instance.I1I2Many2Manies = this.I1I2Many2Manies.ToArray();
			}
		

			instance.I1I2Many2One = this.I1I2Many2One;

		

			instance.I1I12Many2One = this.I1I12Many2One;

		
			if(this.I1I2One2Manies!=null)
			{
				instance.I1I2One2Manies = this.I1I2One2Manies.ToArray();
			}
		
			if(this.I1C2One2Manies!=null)
			{
				instance.I1C2One2Manies = this.I1C2One2Manies.ToArray();
			}
		

			instance.I1C1One2One = this.I1C1One2One;

		
			if(this.I1C2Many2Manies!=null)
			{
				instance.I1C2Many2Manies = this.I1C2Many2Manies.ToArray();
			}
		
			if(this.I1I1One2Manies!=null)
			{
				instance.I1I1One2Manies = this.I1I1One2Manies.ToArray();
			}
		
			if(this.I1I1Many2Manies!=null)
			{
				instance.I1I1Many2Manies = this.I1I1Many2Manies.ToArray();
			}
		

			instance.I1I12One2One = this.I1I12One2One;

		

			instance.I1I2One2One = this.I1I2One2One;

		

			instance.I1C2One2One = this.I1C2One2One;

		
			if(this.I1C1One2Manies!=null)
			{
				instance.I1C1One2Manies = this.I1C1One2Manies.ToArray();
			}
		
			if(this.I1C1Many2Manies!=null)
			{
				instance.I1C1Many2Manies = this.I1C1Many2Manies.ToArray();
			}
		

			instance.I1I1One2One = this.I1I1One2One;

		

			instance.I1C1Many2One = this.I1C1Many2One;

		
			if(this.I1I12One2Manies!=null)
			{
				instance.I1I12One2Manies = this.I1I12One2Manies.ToArray();
			}
		

			instance.I1C2Many2One = this.I1C2Many2One;

		

			instance.I12C2One2One = this.I12C2One2One;

		

			instance.I12I1Many2One = this.I12I1Many2One;

		
			if(this.I12I12Many2Manies!=null)
			{
				instance.I12I12Many2Manies = this.I12I12Many2Manies.ToArray();
			}
		
			if(this.I12I2Many2Manies!=null)
			{
				instance.I12I2Many2Manies = this.I12I2Many2Manies.ToArray();
			}
		
			if(this.I12C2Many2Manies!=null)
			{
				instance.I12C2Many2Manies = this.I12C2Many2Manies.ToArray();
			}
		
			if(this.I12I1Many2Manies!=null)
			{
				instance.I12I1Many2Manies = this.I12I1Many2Manies.ToArray();
			}
		
			if(this.I12I12One2Manies!=null)
			{
				instance.I12I12One2Manies = this.I12I12One2Manies.ToArray();
			}
		
			if(this.I12C1Many2Manies!=null)
			{
				instance.I12C1Many2Manies = this.I12C1Many2Manies.ToArray();
			}
		

			instance.I12I2Many2One = this.I12I2Many2One;

		
			if(this.I12I1One2Manies!=null)
			{
				instance.I12I1One2Manies = this.I12I1One2Manies.ToArray();
			}
		

			instance.I12C1One2One = this.I12C1One2One;

		

			instance.I12I12One2One = this.I12I12One2One;

		

			instance.I12I2One2One = this.I12I2One2One;

		
			if(this.Dependencies!=null)
			{
				instance.Dependencies = this.Dependencies.ToArray();
			}
		
			if(this.I12I2One2Manies!=null)
			{
				instance.I12I2One2Manies = this.I12I2One2Manies.ToArray();
			}
		

			instance.I12C2Many2One = this.I12C2Many2One;

		

			instance.I12I12Many2One = this.I12I12Many2One;

		

			instance.I12I1One2One = this.I12I1One2One;

		
			if(this.I12C1One2Manies!=null)
			{
				instance.I12C1One2Manies = this.I12C1One2Manies.ToArray();
			}
		

			instance.I12C1Many2One = this.I12C1Many2One;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Byte[] C1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Boolean? C1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBoolean = value;
		            return this;
		        }	

				public global::System.DateTime? C1AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.C1AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Decimal? C1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Double? C1AllorsDouble {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDouble(global::System.Double? value)
		        {
				    if(this.C1AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDouble = value;
		            return this;
		        }	

				public global::System.Int32? C1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsInteger = value;
		            return this;
		        }	

				public global::System.String C1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsString(global::System.String value)
		        {
				    if(this.C1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsString = value;
		            return this;
		        }	

				public global::System.String AllorsStringMax {get; set;}

				/// <exclude/>
				public C1Builder WithAllorsStringMax(global::System.String value)
		        {
				    if(this.AllorsStringMax!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsStringMax = value;
		            return this;
		        }	

				public global::System.Guid? C1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsUnique = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> C1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1Many2Many(C1 value)
		        {
					if(this.C1C1Many2Manies == null)
					{
						this.C1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public C1 C1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1Many2One(C1 value)
		        {
		            if(this.C1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1One2Many(C1 value)
		        {
					if(this.C1C1One2Manies == null)
					{
						this.C1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 C1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1One2One(C1 value)
		        {
		            if(this.C1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2Many2Many(C2 value)
		        {
					if(this.C1C2Many2Manies == null)
					{
						this.C1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2Many2One(C2 value)
		        {
		            if(this.C1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2One2Many(C2 value)
		        {
					if(this.C1C2One2Manies == null)
					{
						this.C1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2One2One(C2 value)
		        {
		            if(this.C1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12Many2Many(I12 value)
		        {
					if(this.C1I12Many2Manies == null)
					{
						this.C1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public I12 C1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12Many2One(I12 value)
		        {
		            if(this.C1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12One2Many(I12 value)
		        {
					if(this.C1I12One2Manies == null)
					{
						this.C1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public I12 C1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12One2One(I12 value)
		        {
		            if(this.C1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1Many2Many(I1 value)
		        {
					if(this.C1I1Many2Manies == null)
					{
						this.C1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I1 C1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1Many2One(I1 value)
		        {
		            if(this.C1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1One2Many(I1 value)
		        {
					if(this.C1I1One2Manies == null)
					{
						this.C1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public I1 C1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1One2One(I1 value)
		        {
		            if(this.C1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2Many2Many(I2 value)
		        {
					if(this.C1I2Many2Manies == null)
					{
						this.C1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 C1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2Many2One(I2 value)
		        {
		            if(this.C1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2One2Many(I2 value)
		        {
					if(this.C1I2One2Manies == null)
					{
						this.C1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public I2 C1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2One2One(I2 value)
		        {
		            if(this.C1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2One2One = value;
		            return this;
		        }		

				
				public I1 I1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1Many2One(I1 value)
		        {
		            if(this.I1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12Many2Many(I12 value)
		        {
					if(this.I1I12Many2Manies == null)
					{
						this.I1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2Many2Many(I2 value)
		        {
					if(this.I1I2Many2Manies == null)
					{
						this.I1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2Many2One(I2 value)
		        {
		            if(this.I1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsString(global::System.String value)
		        {
				    if(this.I1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsString = value;
		            return this;
		        }	

				public I12 I1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12Many2One(I12 value)
		        {
		            if(this.I1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I1AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I1AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2One2Many(I2 value)
		        {
					if(this.I1I2One2Manies == null)
					{
						this.I1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2One2Many(C2 value)
		        {
					if(this.I1C2One2Manies == null)
					{
						this.I1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1One2One(C1 value)
		        {
		            if(this.I1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? I1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2Many2Many(C2 value)
		        {
					if(this.I1C2Many2Manies == null)
					{
						this.I1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1One2Many(I1 value)
		        {
					if(this.I1I1One2Manies == null)
					{
						this.I1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1Many2Many(I1 value)
		        {
					if(this.I1I1Many2Manies == null)
					{
						this.I1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? I1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Decimal? I1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDecimal = value;
		            return this;
		        }	

				public I12 I1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12One2One(I12 value)
		        {
		            if(this.I1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12One2One = value;
		            return this;
		        }		

				
				public I2 I1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2One2One(I2 value)
		        {
		            if(this.I1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2One2One = value;
		            return this;
		        }		

				
				public C2 I1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2One2One(C2 value)
		        {
		            if(this.I1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1One2Many(C1 value)
		        {
					if(this.I1C1One2Manies == null)
					{
						this.I1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1Many2Many(C1 value)
		        {
					if(this.I1C1Many2Manies == null)
					{
						this.I1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Double? I1AllorsDouble {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDouble(global::System.Double? value)
		        {
				    if(this.I1AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDouble = value;
		            return this;
		        }	

				public I1 I1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1One2One(I1 value)
		        {
		            if(this.I1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1One2One = value;
		            return this;
		        }		

				
				public C1 I1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1Many2One(C1 value)
		        {
		            if(this.I1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12One2Many(I12 value)
		        {
					if(this.I1I12One2Manies == null)
					{
						this.I1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2Many2One(C2 value)
		        {
		            if(this.I1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsUnique = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsDouble {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDouble(global::System.Double? value)
		        {
				    if(this.I12AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDouble = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Manies == null)
					{
						this.I12I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Manies == null)
					{
						this.I12I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Manies == null)
					{
						this.I12C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Manies == null)
					{
						this.I12I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Manies == null)
					{
						this.I12I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C1Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Manies == null)
					{
						this.I12C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Manies == null)
					{
						this.I12I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependencies {get; set;}	

				/// <exclude/>
				public C1Builder WithDependency(I12 value)
		        {
					if(this.Dependencies == null)
					{
						this.Dependencies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Manies == null)
					{
						this.I12I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I12C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Manies == null)
					{
						this.I12C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I12AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I12AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public C1Builder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public C1Builder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class C1s : global::Allors.ObjectsBase<C1>
	{
		public C1s(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaC1 Meta
		{
			get
			{
				return Allors.Meta.MetaC1.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}