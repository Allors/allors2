// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Dependee : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public Dependee(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaDependee Meta
		{
			get
			{
				return Allors.Meta.MetaDependee.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Dependee Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Dependee) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Subdependee Subdependee
		{ 
			get
			{
				return (Subdependee) Strategy.GetCompositeRole(Meta.Subdependee.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Subdependee.RelationType, value);
			}
		}

		virtual public bool ExistSubdependee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Subdependee.RelationType);
			}
		}

		virtual public void RemoveSubdependee()
		{
			Strategy.RemoveCompositeRole(Meta.Subdependee.RelationType);
		}


		virtual public global::System.Int32? Subcounter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Subcounter.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter.RelationType, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter.RelationType);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter.RelationType);
		}


		virtual public global::System.Int32? Counter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Counter.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Counter.RelationType, value);
			}
		}

		virtual public bool ExistCounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Counter.RelationType);
			}
		}

		virtual public void RemoveCounter()
		{
			Strategy.RemoveUnitRole(Meta.Counter.RelationType);
		}


		virtual public global::System.Boolean? DeleteDependent 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.DeleteDependent.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeleteDependent.RelationType, value);
			}
		}

		virtual public bool ExistDeleteDependent{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeleteDependent.RelationType);
			}
		}

		virtual public void RemoveDeleteDependent()
		{
			Strategy.RemoveUnitRole(Meta.DeleteDependent.RelationType);
		}



		virtual public Dependent DependentWhereDependee
		{ 
			get
			{
				return (Dependent) Strategy.GetCompositeAssociation(Meta.DependentWhereDependee.RelationType);
			}
		} 

		virtual public bool ExistDependentWhereDependee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.DependentWhereDependee.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new DependeeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new DependeeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new DependeeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new DependeeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new DependeeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new DependeeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new DependeeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new DependeeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new DependeeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new DependeeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class DependeeBuilder : Allors.ObjectBuilder<Dependee> , ObjectBuilder, global::System.IDisposable
	{		
		public DependeeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Dependee instance)
		{
			

			if(this.Subcounter.HasValue)
			{
				instance.Subcounter = this.Subcounter.Value;
			}			
		
		
			

			if(this.Counter.HasValue)
			{
				instance.Counter = this.Counter.Value;
			}			
		
		
			

			if(this.DeleteDependent.HasValue)
			{
				instance.DeleteDependent = this.DeleteDependent.Value;
			}			
		
		

			instance.Subdependee = this.Subdependee;

		
		}


				public Subdependee Subdependee {get; set;}

				/// <exclude/>
				public DependeeBuilder WithSubdependee(Subdependee value)
		        {
		            if(this.Subdependee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Subdependee = value;
		            return this;
		        }		

				
				public global::System.Int32? Subcounter {get; set;}

				/// <exclude/>
				public DependeeBuilder WithSubcounter(global::System.Int32? value)
		        {
				    if(this.Subcounter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subcounter = value;
		            return this;
		        }	

				public global::System.Int32? Counter {get; set;}

				/// <exclude/>
				public DependeeBuilder WithCounter(global::System.Int32? value)
		        {
				    if(this.Counter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Counter = value;
		            return this;
		        }	

				public global::System.Boolean? DeleteDependent {get; set;}

				/// <exclude/>
				public DependeeBuilder WithDeleteDependent(global::System.Boolean? value)
		        {
				    if(this.DeleteDependent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeleteDependent = value;
		            return this;
		        }	


	}

	public partial class Dependees : global::Allors.ObjectsBase<Dependee>
	{
		public Dependees(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaDependee Meta
		{
			get
			{
				return Allors.Meta.MetaDependee.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}