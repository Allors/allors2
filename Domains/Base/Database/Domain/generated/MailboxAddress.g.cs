// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class MailboxAddress : Allors.IObject , Address
	{
		private readonly IStrategy strategy;

		public MailboxAddress(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaMailboxAddress Meta
		{
			get
			{
				return Allors.Meta.MetaMailboxAddress.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static MailboxAddress Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (MailboxAddress) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String PoBox 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PoBox.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PoBox.RelationType, value);
			}
		}

		virtual public bool ExistPoBox{
			get
			{
				return Strategy.ExistUnitRole(Meta.PoBox.RelationType);
			}
		}

		virtual public void RemovePoBox()
		{
			Strategy.RemoveUnitRole(Meta.PoBox.RelationType);
		}


		virtual public Place Place
		{ 
			get
			{
				return (Place) Strategy.GetCompositeRole(Meta.Place.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Place.RelationType, value);
			}
		}

		virtual public bool ExistPlace
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Place.RelationType);
			}
		}

		virtual public void RemovePlace()
		{
			Strategy.RemoveCompositeRole(Meta.Place.RelationType);
		}



		virtual public global::Allors.Extent<Person> PeopleWhereMailboxAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PeopleWhereMailboxAddress.RelationType);
			}
		}

		virtual public bool ExistPeopleWhereMailboxAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PeopleWhereMailboxAddress.RelationType);
			}
		}


		virtual public global::Allors.Extent<Person> PeopleWhereAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PeopleWhereAddress.RelationType);
			}
		}

		virtual public bool ExistPeopleWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PeopleWhereAddress.RelationType);
			}
		}


		virtual public global::Allors.Extent<Person> PeopleWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PeopleWhereMainAddress.RelationType);
			}
		}

		virtual public bool ExistPeopleWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PeopleWhereMainAddress.RelationType);
			}
		}


		virtual public Organisation OrganisationWhereAddress
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereAddress.RelationType);
			}
		} 

		virtual public bool ExistOrganisationWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereAddress.RelationType);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereMainAddress.RelationType);
			}
		}

		virtual public bool ExistOrganisationsWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereMainAddress.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new MailboxAddressOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new MailboxAddressOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new MailboxAddressOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new MailboxAddressOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new MailboxAddressOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new MailboxAddressOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new MailboxAddressOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new MailboxAddressOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new MailboxAddressOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new MailboxAddressOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class MailboxAddressBuilder : Allors.ObjectBuilder<MailboxAddress> , AddressBuilder, global::System.IDisposable
	{		
		public MailboxAddressBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(MailboxAddress instance)
		{

			instance.PoBox = this.PoBox;
		
		

			instance.Place = this.Place;

		
		}


				public global::System.String PoBox {get; set;}

				/// <exclude/>
				public MailboxAddressBuilder WithPoBox(global::System.String value)
		        {
				    if(this.PoBox!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PoBox = value;
		            return this;
		        }	

				public Place Place {get; set;}

				/// <exclude/>
				public MailboxAddressBuilder WithPlace(Place value)
		        {
		            if(this.Place!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Place = value;
		            return this;
		        }		

				

	}

	public partial class MailboxAddresses : global::Allors.ObjectsBase<MailboxAddress>
	{
		public MailboxAddresses(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaMailboxAddress Meta
		{
			get
			{
				return Allors.Meta.MetaMailboxAddress.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}