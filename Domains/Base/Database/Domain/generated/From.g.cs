// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class From : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public From(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaFrom Meta
		{
			get
			{
				return Allors.Meta.MetaFrom.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static From Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (From) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<To> Tos
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Tos.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Tos.RelationType, value);
			}
		}

		virtual public void AddTo (To value)
		{
			Strategy.AddCompositeRole(Meta.Tos.RelationType, value);
		}

		virtual public void RemoveTo (To value)
		{
			Strategy.RemoveCompositeRole(Meta.Tos.RelationType, value);
		}

		virtual public bool ExistTos
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Tos.RelationType);
			}
		}

		virtual public void RemoveTos()
		{
			Strategy.RemoveCompositeRoles(Meta.Tos.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FromOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FromOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FromOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FromOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FromOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FromOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FromOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FromOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FromOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FromOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class FromBuilder : Allors.ObjectBuilder<From> , ObjectBuilder, global::System.IDisposable
	{		
		public FromBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(From instance)
		{
			if(this.Tos!=null)
			{
				instance.Tos = this.Tos.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<To> Tos {get; set;}	

				/// <exclude/>
				public FromBuilder WithTo(To value)
		        {
					if(this.Tos == null)
					{
						this.Tos = new global::System.Collections.Generic.List<To>(); 
					}
		            this.Tos.Add(value);
		            return this;
		        }		

				

	}

	public partial class Froms : global::Allors.ObjectsBase<From>
	{
		public Froms(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaFrom Meta
		{
			get
			{
				return Allors.Meta.MetaFrom.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}