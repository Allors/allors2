// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class C2 : Allors.IObject , I2
	{
		private readonly IStrategy strategy;

		public C2(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaC2 Meta
		{
			get
			{
				return Allors.Meta.MetaC2.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static C2 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C2) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal? C2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C2AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveC2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDecimal.RelationType);
		}


		virtual public C1 C2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistC2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1One2One.RelationType);
			}
		}

		virtual public void RemoveC2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2One.RelationType);
		}


		virtual public C2 C2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2Many2One.RelationType);
			}
		}

		virtual public void RemoveC2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2One.RelationType);
		}


		virtual public global::System.Guid? C2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C2AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveC2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsUnique.RelationType);
		}


		virtual public I12 C2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12Many2One.RelationType);
			}
		}

		virtual public void RemoveC2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2One.RelationType);
		}


		virtual public I12 C2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12One2One.RelationType);
			}
		}

		virtual public void RemoveC2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2One.RelationType);
		}


		virtual public global::Allors.Extent<I1> C2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveC2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistC2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1Many2Manies.RelationType);
		}


		virtual public global::System.Double? C2AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C2AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveC2AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDouble.RelationType);
		}


		virtual public global::Allors.Extent<I1> C2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1One2Manies.RelationType, value);
		}

		virtual public void RemoveC2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2Manies.RelationType, value);
		}

		virtual public bool ExistC2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1One2Manies.RelationType);
		}


		virtual public I2 C2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2One2One.RelationType);
			}
		}

		virtual public void RemoveC2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2One.RelationType);
		}


		virtual public global::System.Int32? C2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C2AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveC2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsInteger.RelationType);
		}


		virtual public global::Allors.Extent<I2> C2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveC2I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistC2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I12> C2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveC2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistC2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<C2> C2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2One2Manies.RelationType, value);
			}
		}

		virtual public void AddC2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2One2Manies.RelationType, value);
		}

		virtual public void RemoveC2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2Manies.RelationType, value);
		}

		virtual public bool ExistC2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2One2Manies.RelationType);
			}
		}

		virtual public void RemoveC2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2One2Manies.RelationType);
		}


		virtual public global::System.Boolean? C2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C2AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveC2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBoolean.RelationType);
		}


		virtual public I1 C2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1Many2One.RelationType);
			}
		}

		virtual public void RemoveC2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2One.RelationType);
		}


		virtual public I1 C2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1One2One.RelationType);
			}
		}

		virtual public void RemoveC2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> C2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveC2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistC2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I12> C2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12One2Manies.RelationType, value);
		}

		virtual public void RemoveC2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2Manies.RelationType, value);
		}

		virtual public bool ExistC2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12One2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I2> C2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddC2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2One2Manies.RelationType, value);
		}

		virtual public void RemoveC2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2Manies.RelationType, value);
		}

		virtual public bool ExistC2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveC2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2One2Manies.RelationType);
		}


		virtual public C2 C2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistC2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2One2One.RelationType);
			}
		}

		virtual public void RemoveC2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2One.RelationType);
		}


		virtual public global::System.String C2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C2AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsString.RelationType);
			}
		}

		virtual public void RemoveC2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsString.RelationType);
		}


		virtual public C1 C2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1Many2One.RelationType);
			}
		}

		virtual public void RemoveC2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2One.RelationType);
		}


		virtual public global::Allors.Extent<C2> C2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddC2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveC2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistC2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveC2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2Many2Manies.RelationType);
		}


		virtual public global::System.DateTime? C2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.C2AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveC2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDateTime.RelationType);
		}


		virtual public I2 C2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistC2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2Many2One.RelationType);
			}
		}

		virtual public void RemoveC2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> C2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddC2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1One2Manies.RelationType, value);
		}

		virtual public void RemoveC2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2Manies.RelationType, value);
		}

		virtual public bool ExistC2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveC2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1One2Manies.RelationType);
		}


		virtual public global::System.Byte[] C2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C2AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistC2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveC2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBinary.RelationType);
		}


		virtual public I2 I2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2Many2One.RelationType);
			}
		}

		virtual public void RemoveI2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2Many2One.RelationType);
		}


		virtual public C1 I2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1Many2One.RelationType);
			}
		}

		virtual public void RemoveI2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2One.RelationType);
		}


		virtual public I12 I2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12Many2One.RelationType);
			}
		}

		virtual public void RemoveI2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2One.RelationType);
		}


		virtual public global::System.Boolean? I2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I2AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveI2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBoolean.RelationType);
		}


		virtual public global::Allors.Extent<C1> I2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1One2Manies.RelationType, value);
		}

		virtual public void RemoveI2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2Manies.RelationType, value);
		}

		virtual public bool ExistI2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1One2Manies.RelationType);
		}


		virtual public C1 I2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1One2One.RelationType);
			}
		}

		virtual public void RemoveI2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2One.RelationType);
		}


		virtual public global::System.Decimal? I2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I2AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveI2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDecimal.RelationType);
		}


		virtual public global::Allors.Extent<I2> I2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI2I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I2Many2Manies.RelationType);
		}


		virtual public global::System.Byte[] I2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I2AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveI2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBinary.RelationType);
		}


		virtual public global::System.Guid? I2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I2AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveI2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsUnique.RelationType);
		}


		virtual public I1 I2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1Many2One.RelationType);
			}
		}

		virtual public void RemoveI2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2One.RelationType);
		}


		virtual public global::System.DateTime? I2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I2AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveI2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDateTime.RelationType);
		}


		virtual public global::Allors.Extent<I12> I2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12One2Manies.RelationType, value);
		}

		virtual public void RemoveI2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2Manies.RelationType, value);
		}

		virtual public bool ExistI2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12One2Manies.RelationType);
		}


		virtual public I12 I2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12One2One.RelationType);
			}
		}

		virtual public void RemoveI2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2One.RelationType);
		}


		virtual public global::Allors.Extent<C2> I2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I1> I2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1Many2Manies.RelationType);
		}


		virtual public C2 I2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2Many2One.RelationType);
			}
		}

		virtual public void RemoveI2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2One.RelationType);
		}


		virtual public global::System.String I2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I2AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsString.RelationType);
			}
		}

		virtual public void RemoveI2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsString.RelationType);
		}


		virtual public global::Allors.Extent<C2> I2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2One2Manies.RelationType, value);
		}

		virtual public void RemoveI2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2Manies.RelationType, value);
		}

		virtual public bool ExistI2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2One2Manies.RelationType);
		}


		virtual public I1 I2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1One2One.RelationType);
			}
		}

		virtual public void RemoveI2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2One.RelationType);
		}


		virtual public global::Allors.Extent<I1> I2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1One2Manies.RelationType, value);
		}

		virtual public void RemoveI2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2Manies.RelationType, value);
		}

		virtual public bool ExistI2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1One2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I12> I2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveI2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistI2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12Many2Manies.RelationType);
		}


		virtual public I2 I2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2One2One.RelationType);
			}
		}

		virtual public void RemoveI2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2One.RelationType);
		}


		virtual public global::System.Int32? I2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I2AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveI2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsInteger.RelationType);
		}


		virtual public global::Allors.Extent<I2> I2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2I2One2Manies.RelationType, value);
		}

		virtual public void RemoveI2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2Manies.RelationType, value);
		}

		virtual public bool ExistI2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I2One2Manies.RelationType);
		}


		virtual public global::Allors.Extent<C1> I2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1Many2Manies.RelationType);
		}


		virtual public C2 I2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2One2One.RelationType);
			}
		}

		virtual public void RemoveI2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2One.RelationType);
		}


		virtual public global::System.Double? I2AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I2AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistI2AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveI2AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDouble.RelationType);
		}


		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary.RelationType);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One.RelationType);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One.RelationType);
		}


		virtual public global::System.Double? I12AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDouble.RelationType);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One.RelationType);
		}


		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString.RelationType);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString.RelationType);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Manies.RelationType);
		}


		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal.RelationType);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Manies.RelationType);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Manies.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Manies.RelationType, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Manies.RelationType, value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Manies.RelationType);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One.RelationType);
		}


		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique.RelationType);
		}


		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger.RelationType);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Manies.RelationType);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One.RelationType);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One.RelationType);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One.RelationType);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One.RelationType);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One.RelationType);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One.RelationType);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependencies.RelationType, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependencies.RelationType, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependencies.RelationType, value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependencies.RelationType);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependencies.RelationType);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Manies.RelationType, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Manies.RelationType, value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Manies.RelationType);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One.RelationType);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One.RelationType);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One.RelationType);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One.RelationType);
		}


		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean.RelationType);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One.RelationType, value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One.RelationType);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One.RelationType);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Manies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Manies.RelationType, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Manies.RelationType, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Manies.RelationType, value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Manies.RelationType);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Manies.RelationType);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One.RelationType, value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One.RelationType);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One.RelationType);
		}


		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I12AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDateTime.RelationType);
		}



		virtual public global::Allors.Extent<C1> C1sWhereC1C2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1C2Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1C2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1C2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1C2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1C2Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1C2Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1C2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1C2One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1C2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1C2One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1C2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1C2One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1C2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2C2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2C2Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2C2Many2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2C2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2C2One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2C2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2C2One2Many.RelationType);
			}
		}


		virtual public C2 C2WhereC2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2C2One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2C2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2C2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2C2Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2C2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2C2Many2Many.RelationType);
			}
		}


		virtual public I1 I1WhereI1C2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1C2One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1C2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1C2One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1C2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1C2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1C2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1C2Many2Many.RelationType);
			}
		}


		virtual public I1 I1WhereI1C2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1C2One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1C2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1C2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1C2Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1C2Many2One.RelationType);
			}
		}


		virtual public I12 I12WhereI12C2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12C2One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12C2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12C2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12C2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12C2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12C2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12C2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12C2Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12C2Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2C2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2C2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2C2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2C2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2C2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2C2Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2C2Many2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2C2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2C2One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2C2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2C2One2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2C2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2C2One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2C2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I2Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I2Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I2Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1I2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I2One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I2One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1I2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I2One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I2One2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2I2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I2One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I2Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I2Many2Many.RelationType);
			}
		}


		virtual public C2 C2WhereC2I2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I2One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I2One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I2Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I2Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I2Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I2Many2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I2One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I2One2Many.RelationType);
			}
		}


		virtual public I1 I1WhereI1I2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I2One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I2One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I2Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I2Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I2Many2One.RelationType);
			}
		}


		virtual public I12 I12WhereI12I2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I2One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I2One2One.RelationType);
			}
		}


		virtual public I12 I12WhereI12I2One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I2One2Many.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I2One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I2Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I2Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I2Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I2Many2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I2One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I2One2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2I2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I2One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I2One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I12Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1I12Many2One.RelationType);
			}
		}

		virtual public bool ExistC1sWhereC1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1I12Many2One.RelationType);
			}
		}


		virtual public C1 C1WhereC1I12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I12One2Many.RelationType);
			}
		}


		virtual public C1 C1WhereC1I12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1I12One2One.RelationType);
			}
		} 

		virtual public bool ExistC1WhereC1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I12Many2One.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I12Many2One.RelationType);
			}
		}


		virtual public C2 C2WhereC2I12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I12One2One.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistC2sWhereC2I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2I12Many2Many.RelationType);
			}
		}


		virtual public C2 C2WhereC2I12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistC2WhereC2I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2I12One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I12Many2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI1sWhereI1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1I12Many2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I12One2One.RelationType);
			}
		}


		virtual public I1 I1WhereI1I12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI1WhereI1I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1I12One2Many.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I12Many2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I12One2Many.RelationType);
			}
		}


		virtual public I12 I12WhereI12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI12WhereI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency.RelationType);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency.RelationType);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI12sWhereI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12I12Many2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I12Many2One.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I12Many2One.RelationType);
			}
		}


		virtual public I2 I2WhereI2I12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I12One2Many.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I12One2Many.RelationType);
			}
		}


		virtual public I2 I2WhereI2I12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2I12One2One.RelationType);
			}
		} 

		virtual public bool ExistI2WhereI2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2I12One2One.RelationType);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2I12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2I12Many2Many.RelationType);
			}
		}

		virtual public bool ExistI2sWhereI2I12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2I12Many2Many.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new C2OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new C2OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new C2OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new C2OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new C2OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new C2OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new C2OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new C2OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new C2OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new C2OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class C2Builder : Allors.ObjectBuilder<C2> , I2Builder, global::System.IDisposable
	{		
		public C2Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(C2 instance)
		{
			

			if(this.C2AllorsDecimal.HasValue)
			{
				instance.C2AllorsDecimal = this.C2AllorsDecimal.Value;
			}			
		
		
			

			if(this.C2AllorsUnique.HasValue)
			{
				instance.C2AllorsUnique = this.C2AllorsUnique.Value;
			}			
		
		
			

			if(this.C2AllorsDouble.HasValue)
			{
				instance.C2AllorsDouble = this.C2AllorsDouble.Value;
			}			
		
		
			

			if(this.C2AllorsInteger.HasValue)
			{
				instance.C2AllorsInteger = this.C2AllorsInteger.Value;
			}			
		
		
			

			if(this.C2AllorsBoolean.HasValue)
			{
				instance.C2AllorsBoolean = this.C2AllorsBoolean.Value;
			}			
		
		

			instance.C2AllorsString = this.C2AllorsString;
		
		
			

			if(this.C2AllorsDateTime.HasValue)
			{
				instance.C2AllorsDateTime = this.C2AllorsDateTime.Value;
			}			
		
		

			instance.C2AllorsBinary = this.C2AllorsBinary;
		
		
			

			if(this.I2AllorsBoolean.HasValue)
			{
				instance.I2AllorsBoolean = this.I2AllorsBoolean.Value;
			}			
		
		
			

			if(this.I2AllorsDecimal.HasValue)
			{
				instance.I2AllorsDecimal = this.I2AllorsDecimal.Value;
			}			
		
		

			instance.I2AllorsBinary = this.I2AllorsBinary;
		
		
			

			if(this.I2AllorsUnique.HasValue)
			{
				instance.I2AllorsUnique = this.I2AllorsUnique.Value;
			}			
		
		
			

			if(this.I2AllorsDateTime.HasValue)
			{
				instance.I2AllorsDateTime = this.I2AllorsDateTime.Value;
			}			
		
		

			instance.I2AllorsString = this.I2AllorsString;
		
		
			

			if(this.I2AllorsInteger.HasValue)
			{
				instance.I2AllorsInteger = this.I2AllorsInteger.Value;
			}			
		
		
			

			if(this.I2AllorsDouble.HasValue)
			{
				instance.I2AllorsDouble = this.I2AllorsDouble.Value;
			}			
		
		

			instance.I12AllorsBinary = this.I12AllorsBinary;
		
		
			

			if(this.I12AllorsDouble.HasValue)
			{
				instance.I12AllorsDouble = this.I12AllorsDouble.Value;
			}			
		
		

			instance.I12AllorsString = this.I12AllorsString;
		
		
			

			if(this.I12AllorsDecimal.HasValue)
			{
				instance.I12AllorsDecimal = this.I12AllorsDecimal.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.I12AllorsUnique.HasValue)
			{
				instance.I12AllorsUnique = this.I12AllorsUnique.Value;
			}			
		
		
			

			if(this.I12AllorsInteger.HasValue)
			{
				instance.I12AllorsInteger = this.I12AllorsInteger.Value;
			}			
		
		
			

			if(this.I12AllorsBoolean.HasValue)
			{
				instance.I12AllorsBoolean = this.I12AllorsBoolean.Value;
			}			
		
		
			

			if(this.I12AllorsDateTime.HasValue)
			{
				instance.I12AllorsDateTime = this.I12AllorsDateTime.Value;
			}			
		
		

			instance.C2C1One2One = this.C2C1One2One;

		

			instance.C2C2Many2One = this.C2C2Many2One;

		

			instance.C2I12Many2One = this.C2I12Many2One;

		

			instance.C2I12One2One = this.C2I12One2One;

		
			if(this.C2I1Many2Manies!=null)
			{
				instance.C2I1Many2Manies = this.C2I1Many2Manies.ToArray();
			}
		
			if(this.C2I1One2Manies!=null)
			{
				instance.C2I1One2Manies = this.C2I1One2Manies.ToArray();
			}
		

			instance.C2I2One2One = this.C2I2One2One;

		
			if(this.C2I2Many2Manies!=null)
			{
				instance.C2I2Many2Manies = this.C2I2Many2Manies.ToArray();
			}
		
			if(this.C2I12Many2Manies!=null)
			{
				instance.C2I12Many2Manies = this.C2I12Many2Manies.ToArray();
			}
		
			if(this.C2C2One2Manies!=null)
			{
				instance.C2C2One2Manies = this.C2C2One2Manies.ToArray();
			}
		

			instance.C2I1Many2One = this.C2I1Many2One;

		

			instance.C2I1One2One = this.C2I1One2One;

		
			if(this.C2C1Many2Manies!=null)
			{
				instance.C2C1Many2Manies = this.C2C1Many2Manies.ToArray();
			}
		
			if(this.C2I12One2Manies!=null)
			{
				instance.C2I12One2Manies = this.C2I12One2Manies.ToArray();
			}
		
			if(this.C2I2One2Manies!=null)
			{
				instance.C2I2One2Manies = this.C2I2One2Manies.ToArray();
			}
		

			instance.C2C2One2One = this.C2C2One2One;

		

			instance.C2C1Many2One = this.C2C1Many2One;

		
			if(this.C2C2Many2Manies!=null)
			{
				instance.C2C2Many2Manies = this.C2C2Many2Manies.ToArray();
			}
		

			instance.C2I2Many2One = this.C2I2Many2One;

		
			if(this.C2C1One2Manies!=null)
			{
				instance.C2C1One2Manies = this.C2C1One2Manies.ToArray();
			}
		

			instance.I2I2Many2One = this.I2I2Many2One;

		

			instance.I2C1Many2One = this.I2C1Many2One;

		

			instance.I2I12Many2One = this.I2I12Many2One;

		
			if(this.I2C1One2Manies!=null)
			{
				instance.I2C1One2Manies = this.I2C1One2Manies.ToArray();
			}
		

			instance.I2C1One2One = this.I2C1One2One;

		
			if(this.I2I2Many2Manies!=null)
			{
				instance.I2I2Many2Manies = this.I2I2Many2Manies.ToArray();
			}
		

			instance.I2I1Many2One = this.I2I1Many2One;

		
			if(this.I2I12One2Manies!=null)
			{
				instance.I2I12One2Manies = this.I2I12One2Manies.ToArray();
			}
		

			instance.I2I12One2One = this.I2I12One2One;

		
			if(this.I2C2Many2Manies!=null)
			{
				instance.I2C2Many2Manies = this.I2C2Many2Manies.ToArray();
			}
		
			if(this.I2I1Many2Manies!=null)
			{
				instance.I2I1Many2Manies = this.I2I1Many2Manies.ToArray();
			}
		

			instance.I2C2Many2One = this.I2C2Many2One;

		
			if(this.I2C2One2Manies!=null)
			{
				instance.I2C2One2Manies = this.I2C2One2Manies.ToArray();
			}
		

			instance.I2I1One2One = this.I2I1One2One;

		
			if(this.I2I1One2Manies!=null)
			{
				instance.I2I1One2Manies = this.I2I1One2Manies.ToArray();
			}
		
			if(this.I2I12Many2Manies!=null)
			{
				instance.I2I12Many2Manies = this.I2I12Many2Manies.ToArray();
			}
		

			instance.I2I2One2One = this.I2I2One2One;

		
			if(this.I2I2One2Manies!=null)
			{
				instance.I2I2One2Manies = this.I2I2One2Manies.ToArray();
			}
		
			if(this.I2C1Many2Manies!=null)
			{
				instance.I2C1Many2Manies = this.I2C1Many2Manies.ToArray();
			}
		

			instance.I2C2One2One = this.I2C2One2One;

		

			instance.I12C2One2One = this.I12C2One2One;

		

			instance.I12I1Many2One = this.I12I1Many2One;

		
			if(this.I12I12Many2Manies!=null)
			{
				instance.I12I12Many2Manies = this.I12I12Many2Manies.ToArray();
			}
		
			if(this.I12I2Many2Manies!=null)
			{
				instance.I12I2Many2Manies = this.I12I2Many2Manies.ToArray();
			}
		
			if(this.I12C2Many2Manies!=null)
			{
				instance.I12C2Many2Manies = this.I12C2Many2Manies.ToArray();
			}
		
			if(this.I12I1Many2Manies!=null)
			{
				instance.I12I1Many2Manies = this.I12I1Many2Manies.ToArray();
			}
		
			if(this.I12I12One2Manies!=null)
			{
				instance.I12I12One2Manies = this.I12I12One2Manies.ToArray();
			}
		
			if(this.I12C1Many2Manies!=null)
			{
				instance.I12C1Many2Manies = this.I12C1Many2Manies.ToArray();
			}
		

			instance.I12I2Many2One = this.I12I2Many2One;

		
			if(this.I12I1One2Manies!=null)
			{
				instance.I12I1One2Manies = this.I12I1One2Manies.ToArray();
			}
		

			instance.I12C1One2One = this.I12C1One2One;

		

			instance.I12I12One2One = this.I12I12One2One;

		

			instance.I12I2One2One = this.I12I2One2One;

		
			if(this.Dependencies!=null)
			{
				instance.Dependencies = this.Dependencies.ToArray();
			}
		
			if(this.I12I2One2Manies!=null)
			{
				instance.I12I2One2Manies = this.I12I2One2Manies.ToArray();
			}
		

			instance.I12C2Many2One = this.I12C2Many2One;

		

			instance.I12I12Many2One = this.I12I12Many2One;

		

			instance.I12I1One2One = this.I12I1One2One;

		
			if(this.I12C1One2Manies!=null)
			{
				instance.I12C1One2Manies = this.I12C1One2Manies.ToArray();
			}
		

			instance.I12C1Many2One = this.I12C1Many2One;

		
		}


				public global::System.Decimal? C2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDecimal = value;
		            return this;
		        }	

				public C1 C2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1One2One(C1 value)
		        {
		            if(this.C2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1One2One = value;
		            return this;
		        }		

				
				public C2 C2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2Many2One(C2 value)
		        {
		            if(this.C2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? C2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsUnique = value;
		            return this;
		        }	

				public I12 C2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12Many2One(I12 value)
		        {
		            if(this.C2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12Many2One = value;
		            return this;
		        }		

				
				public I12 C2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12One2One(I12 value)
		        {
		            if(this.C2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C2I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1Many2Many(I1 value)
		        {
					if(this.C2I1Many2Manies == null)
					{
						this.C2I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Double? C2AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDouble(global::System.Double? value)
		        {
				    if(this.C2AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDouble = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> C2I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1One2Many(I1 value)
		        {
					if(this.C2I1One2Manies == null)
					{
						this.C2I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1One2Manies.Add(value);
		            return this;
		        }		

				
				public I2 C2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2One2One(I2 value)
		        {
		            if(this.C2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? C2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> C2I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2Many2Many(I2 value)
		        {
					if(this.C2I2Many2Manies == null)
					{
						this.C2I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12Many2Many(I12 value)
		        {
					if(this.C2I12Many2Manies == null)
					{
						this.C2I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2One2Many(C2 value)
		        {
					if(this.C2C2One2Manies == null)
					{
						this.C2C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? C2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBoolean = value;
		            return this;
		        }	

				public I1 C2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1Many2One(I1 value)
		        {
		            if(this.C2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1Many2One = value;
		            return this;
		        }		

				
				public I1 C2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1One2One(I1 value)
		        {
		            if(this.C2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1Many2Many(C1 value)
		        {
					if(this.C2C1Many2Manies == null)
					{
						this.C2C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12One2Many(I12 value)
		        {
					if(this.C2I12One2Manies == null)
					{
						this.C2I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C2I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2One2Many(I2 value)
		        {
					if(this.C2I2One2Manies == null)
					{
						this.C2I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2One2One(C2 value)
		        {
		            if(this.C2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2One2One = value;
		            return this;
		        }		

				
				public global::System.String C2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsString(global::System.String value)
		        {
				    if(this.C2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsString = value;
		            return this;
		        }	

				public C1 C2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1Many2One(C1 value)
		        {
		            if(this.C2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2Many2Many(C2 value)
		        {
					if(this.C2C2Many2Manies == null)
					{
						this.C2C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? C2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.C2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDateTime = value;
		            return this;
		        }	

				public I2 C2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2Many2One(I2 value)
		        {
		            if(this.C2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1One2Many(C1 value)
		        {
					if(this.C2C1One2Manies == null)
					{
						this.C2C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] C2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBinary = value;
		            return this;
		        }	

				public I2 I2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2Many2One(I2 value)
		        {
		            if(this.I2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2Many2One = value;
		            return this;
		        }		

				
				public C1 I2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1Many2One(C1 value)
		        {
		            if(this.I2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1Many2One = value;
		            return this;
		        }		

				
				public I12 I2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12Many2One(I12 value)
		        {
		            if(this.I2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I2C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1One2Many(C1 value)
		        {
					if(this.I2C1One2Manies == null)
					{
						this.I2C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1One2One(C1 value)
		        {
		            if(this.I2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1One2One = value;
		            return this;
		        }		

				
				public global::System.Decimal? I2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I2Many2Many(I2 value)
		        {
					if(this.I2I2Many2Manies == null)
					{
						this.I2I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBinary = value;
		            return this;
		        }	

				public global::System.Guid? I2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsUnique = value;
		            return this;
		        }	

				public I1 I2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1Many2One(I1 value)
		        {
		            if(this.I2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I2I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12One2Many(I12 value)
		        {
					if(this.I2I12One2Manies == null)
					{
						this.I2I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12One2Manies.Add(value);
		            return this;
		        }		

				
				public I12 I2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12One2One(I12 value)
		        {
		            if(this.I2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I2C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2Many2Many(C2 value)
		        {
					if(this.I2C2Many2Manies == null)
					{
						this.I2C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1Many2Many(I1 value)
		        {
					if(this.I2I1Many2Manies == null)
					{
						this.I2I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2Many2One(C2 value)
		        {
		            if(this.I2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsString(global::System.String value)
		        {
				    if(this.I2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I2C2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2One2Many(C2 value)
		        {
					if(this.I2C2One2Manies == null)
					{
						this.I2C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2One2Manies.Add(value);
		            return this;
		        }		

				
				public I1 I2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1One2One(I1 value)
		        {
		            if(this.I2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1One2Many(I1 value)
		        {
					if(this.I2I1One2Manies == null)
					{
						this.I2I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I2I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12Many2Many(I12 value)
		        {
					if(this.I2I12Many2Manies == null)
					{
						this.I2I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2One2One(I2 value)
		        {
		            if(this.I2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? I2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I2One2Many(I2 value)
		        {
					if(this.I2I2One2Manies == null)
					{
						this.I2I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I2C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1Many2Many(C1 value)
		        {
					if(this.I2C1Many2Manies == null)
					{
						this.I2C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2One2One(C2 value)
		        {
		            if(this.I2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I2AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDouble(global::System.Double? value)
		        {
				    if(this.I2AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDouble = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDouble(global::System.Double? value)
		        {
				    if(this.I12AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDouble = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Manies == null)
					{
						this.I12I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Manies == null)
					{
						this.I12I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Manies == null)
					{
						this.I12C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Manies == null)
					{
						this.I12I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Manies == null)
					{
						this.I12I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C2Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Manies == null)
					{
						this.I12C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Manies == null)
					{
						this.I12I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependencies {get; set;}	

				/// <exclude/>
				public C2Builder WithDependency(I12 value)
		        {
					if(this.Dependencies == null)
					{
						this.Dependencies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Manies == null)
					{
						this.I12I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I12C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Manies == null)
					{
						this.I12C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I12AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I12AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDateTime = value;
		            return this;
		        }	


	}

	public partial class C2s : global::Allors.ObjectsBase<C2>
	{
		public C2s(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaC2 Meta
		{
			get
			{
				return Allors.Meta.MetaC2.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}