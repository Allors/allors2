// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface I2 :  I12, Allors.IObject
	{


		I2 I2I2Many2One
		{ 
			get;
			set;
		}

		bool ExistI2I2Many2One
		{
			get;
		}

		void RemoveI2I2Many2One();


		C1 I2C1Many2One
		{ 
			get;
			set;
		}

		bool ExistI2C1Many2One
		{
			get;
		}

		void RemoveI2C1Many2One();


		I12 I2I12Many2One
		{ 
			get;
			set;
		}

		bool ExistI2I12Many2One
		{
			get;
		}

		void RemoveI2I12Many2One();


		global::System.Boolean? I2AllorsBoolean 
		{
			get;
			set;
		}

		bool ExistI2AllorsBoolean{get;}

		void RemoveI2AllorsBoolean();


		global::Allors.Extent<C1> I2C1One2Manies
		{ 
			get;
			set;
		}

		void AddI2C1One2Many (C1 value);

		void RemoveI2C1One2Many (C1 value);

		bool ExistI2C1One2Manies
		{
			get;
		}

		void RemoveI2C1One2Manies();


		C1 I2C1One2One
		{ 
			get;
			set;
		}

		bool ExistI2C1One2One
		{
			get;
		}

		void RemoveI2C1One2One();


		global::System.Decimal? I2AllorsDecimal 
		{
			get;
			set;
		}

		bool ExistI2AllorsDecimal{get;}

		void RemoveI2AllorsDecimal();


		global::Allors.Extent<I2> I2I2Many2Manies
		{ 
			get;
			set;
		}

		void AddI2I2Many2Many (I2 value);

		void RemoveI2I2Many2Many (I2 value);

		bool ExistI2I2Many2Manies
		{
			get;
		}

		void RemoveI2I2Many2Manies();


		global::System.Byte[] I2AllorsBinary 
		{
			get;
			set;
		}

		bool ExistI2AllorsBinary{get;}

		void RemoveI2AllorsBinary();


		global::System.Guid? I2AllorsUnique 
		{
			get;
			set;
		}

		bool ExistI2AllorsUnique{get;}

		void RemoveI2AllorsUnique();


		I1 I2I1Many2One
		{ 
			get;
			set;
		}

		bool ExistI2I1Many2One
		{
			get;
		}

		void RemoveI2I1Many2One();


		global::System.DateTime? I2AllorsDateTime 
		{
			get;
			set;
		}

		bool ExistI2AllorsDateTime{get;}

		void RemoveI2AllorsDateTime();


		global::Allors.Extent<I12> I2I12One2Manies
		{ 
			get;
			set;
		}

		void AddI2I12One2Many (I12 value);

		void RemoveI2I12One2Many (I12 value);

		bool ExistI2I12One2Manies
		{
			get;
		}

		void RemoveI2I12One2Manies();


		I12 I2I12One2One
		{ 
			get;
			set;
		}

		bool ExistI2I12One2One
		{
			get;
		}

		void RemoveI2I12One2One();


		global::Allors.Extent<C2> I2C2Many2Manies
		{ 
			get;
			set;
		}

		void AddI2C2Many2Many (C2 value);

		void RemoveI2C2Many2Many (C2 value);

		bool ExistI2C2Many2Manies
		{
			get;
		}

		void RemoveI2C2Many2Manies();


		global::Allors.Extent<I1> I2I1Many2Manies
		{ 
			get;
			set;
		}

		void AddI2I1Many2Many (I1 value);

		void RemoveI2I1Many2Many (I1 value);

		bool ExistI2I1Many2Manies
		{
			get;
		}

		void RemoveI2I1Many2Manies();


		C2 I2C2Many2One
		{ 
			get;
			set;
		}

		bool ExistI2C2Many2One
		{
			get;
		}

		void RemoveI2C2Many2One();


		global::System.String I2AllorsString 
		{
			get;
			set;
		}

		bool ExistI2AllorsString{get;}

		void RemoveI2AllorsString();


		global::Allors.Extent<C2> I2C2One2Manies
		{ 
			get;
			set;
		}

		void AddI2C2One2Many (C2 value);

		void RemoveI2C2One2Many (C2 value);

		bool ExistI2C2One2Manies
		{
			get;
		}

		void RemoveI2C2One2Manies();


		I1 I2I1One2One
		{ 
			get;
			set;
		}

		bool ExistI2I1One2One
		{
			get;
		}

		void RemoveI2I1One2One();


		global::Allors.Extent<I1> I2I1One2Manies
		{ 
			get;
			set;
		}

		void AddI2I1One2Many (I1 value);

		void RemoveI2I1One2Many (I1 value);

		bool ExistI2I1One2Manies
		{
			get;
		}

		void RemoveI2I1One2Manies();


		global::Allors.Extent<I12> I2I12Many2Manies
		{ 
			get;
			set;
		}

		void AddI2I12Many2Many (I12 value);

		void RemoveI2I12Many2Many (I12 value);

		bool ExistI2I12Many2Manies
		{
			get;
		}

		void RemoveI2I12Many2Manies();


		I2 I2I2One2One
		{ 
			get;
			set;
		}

		bool ExistI2I2One2One
		{
			get;
		}

		void RemoveI2I2One2One();


		global::System.Int32? I2AllorsInteger 
		{
			get;
			set;
		}

		bool ExistI2AllorsInteger{get;}

		void RemoveI2AllorsInteger();


		global::Allors.Extent<I2> I2I2One2Manies
		{ 
			get;
			set;
		}

		void AddI2I2One2Many (I2 value);

		void RemoveI2I2One2Many (I2 value);

		bool ExistI2I2One2Manies
		{
			get;
		}

		void RemoveI2I2One2Manies();


		global::Allors.Extent<C1> I2C1Many2Manies
		{ 
			get;
			set;
		}

		void AddI2C1Many2Many (C1 value);

		void RemoveI2C1Many2Many (C1 value);

		bool ExistI2C1Many2Manies
		{
			get;
		}

		void RemoveI2C1Many2Manies();


		C2 I2C2One2One
		{ 
			get;
			set;
		}

		bool ExistI2C2One2One
		{
			get;
		}

		void RemoveI2C2One2One();


		global::System.Double? I2AllorsDouble 
		{
			get;
			set;
		}

		bool ExistI2AllorsDouble{get;}

		void RemoveI2AllorsDouble();



		global::Allors.Extent<C1> C1sWhereC1I2Many2Many
		{ 
			get;
		}

		bool ExistC1sWhereC1I2Many2Many
		{
			get;
		}


		global::Allors.Extent<C1> C1sWhereC1I2Many2One
		{ 
			get;
		}

		bool ExistC1sWhereC1I2Many2One
		{
			get;
		}


		C1 C1WhereC1I2One2Many
		{
			get;
		}

		bool ExistC1WhereC1I2One2Many
		{
			get;
		}


		C1 C1WhereC1I2One2One
		{
			get;
		}

		bool ExistC1WhereC1I2One2One
		{
			get;
		}


		C2 C2WhereC2I2One2One
		{
			get;
		}

		bool ExistC2WhereC2I2One2One
		{
			get;
		}


		global::Allors.Extent<C2> C2sWhereC2I2Many2Many
		{ 
			get;
		}

		bool ExistC2sWhereC2I2Many2Many
		{
			get;
		}


		C2 C2WhereC2I2One2Many
		{
			get;
		}

		bool ExistC2WhereC2I2One2Many
		{
			get;
		}


		global::Allors.Extent<C2> C2sWhereC2I2Many2One
		{ 
			get;
		}

		bool ExistC2sWhereC2I2Many2One
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I2Many2Many
		{ 
			get;
		}

		bool ExistI1sWhereI1I2Many2Many
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I2Many2One
		{ 
			get;
		}

		bool ExistI1sWhereI1I2Many2One
		{
			get;
		}


		I1 I1WhereI1I2One2Many
		{
			get;
		}

		bool ExistI1WhereI1I2One2Many
		{
			get;
		}


		I1 I1WhereI1I2One2One
		{
			get;
		}

		bool ExistI1WhereI1I2One2One
		{
			get;
		}


		global::Allors.Extent<I12> I12sWhereI12I2Many2Many
		{ 
			get;
		}

		bool ExistI12sWhereI12I2Many2Many
		{
			get;
		}


		global::Allors.Extent<I12> I12sWhereI12I2Many2One
		{ 
			get;
		}

		bool ExistI12sWhereI12I2Many2One
		{
			get;
		}


		I12 I12WhereI12I2One2One
		{
			get;
		}

		bool ExistI12WhereI12I2One2One
		{
			get;
		}


		I12 I12WhereI12I2One2Many
		{
			get;
		}

		bool ExistI12WhereI12I2One2Many
		{
			get;
		}


		global::Allors.Extent<I2> I2sWhereI2I2Many2One
		{ 
			get;
		}

		bool ExistI2sWhereI2I2Many2One
		{
			get;
		}


		global::Allors.Extent<I2> I2sWhereI2I2Many2Many
		{ 
			get;
		}

		bool ExistI2sWhereI2I2Many2Many
		{
			get;
		}


		I2 I2WhereI2I2One2One
		{
			get;
		}

		bool ExistI2WhereI2I2One2One
		{
			get;
		}


		I2 I2WhereI2I2One2Many
		{
			get;
		}

		bool ExistI2WhereI2I2One2Many
		{
			get;
		}

	}

	public partial interface I2Builder : I12Builder , global::System.IDisposable
	{	
		I2 I2I2Many2One {get;}

		

		C1 I2C1Many2One {get;}

		

		I12 I2I12Many2One {get;}

		

		global::System.Boolean? I2AllorsBoolean {get;}
		


		global::System.Collections.Generic.List<C1> I2C1One2Manies {get;}		

		

		C1 I2C1One2One {get;}

		

		global::System.Decimal? I2AllorsDecimal {get;}
		


		global::System.Collections.Generic.List<I2> I2I2Many2Manies {get;}		

		

		global::System.Byte[] I2AllorsBinary {get;}
		

		global::System.Guid? I2AllorsUnique {get;}
		

		I1 I2I1Many2One {get;}

		

		global::System.DateTime? I2AllorsDateTime {get;}
		


		global::System.Collections.Generic.List<I12> I2I12One2Manies {get;}		

		

		I12 I2I12One2One {get;}

		


		global::System.Collections.Generic.List<C2> I2C2Many2Manies {get;}		

		


		global::System.Collections.Generic.List<I1> I2I1Many2Manies {get;}		

		

		C2 I2C2Many2One {get;}

		

		global::System.String I2AllorsString {get;}
		


		global::System.Collections.Generic.List<C2> I2C2One2Manies {get;}		

		

		I1 I2I1One2One {get;}

		


		global::System.Collections.Generic.List<I1> I2I1One2Manies {get;}		

		


		global::System.Collections.Generic.List<I12> I2I12Many2Manies {get;}		

		

		I2 I2I2One2One {get;}

		

		global::System.Int32? I2AllorsInteger {get;}
		


		global::System.Collections.Generic.List<I2> I2I2One2Manies {get;}		

		


		global::System.Collections.Generic.List<C1> I2C1Many2Manies {get;}		

		

		C2 I2C2One2One {get;}

		

		global::System.Double? I2AllorsDouble {get;}
		

	}

	public partial class I2s : global::Allors.ObjectsBase<I2>
	{
		public I2s(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaI2 Meta
		{
			get
			{
				return Allors.Meta.MetaI2.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}