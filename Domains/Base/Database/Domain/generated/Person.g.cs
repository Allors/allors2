// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Person : Allors.IObject , User, UniquelyIdentifiable, Deletable
	{
		private readonly IStrategy strategy;

		public Person(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPerson Meta
		{
			get
			{
				return Allors.Meta.MetaPerson.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Person Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Person) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String FirstName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FirstName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FirstName.RelationType, value);
			}
		}

		virtual public bool ExistFirstName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FirstName.RelationType);
			}
		}

		virtual public void RemoveFirstName()
		{
			Strategy.RemoveUnitRole(Meta.FirstName.RelationType);
		}


		virtual public global::System.String LastName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.LastName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastName.RelationType, value);
			}
		}

		virtual public bool ExistLastName{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastName.RelationType);
			}
		}

		virtual public void RemoveLastName()
		{
			Strategy.RemoveUnitRole(Meta.LastName.RelationType);
		}


		virtual public global::System.String MiddleName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.MiddleName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MiddleName.RelationType, value);
			}
		}

		virtual public bool ExistMiddleName{
			get
			{
				return Strategy.ExistUnitRole(Meta.MiddleName.RelationType);
			}
		}

		virtual public void RemoveMiddleName()
		{
			Strategy.RemoveUnitRole(Meta.MiddleName.RelationType);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Addresses.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Addresses.RelationType, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Addresses.RelationType, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Addresses.RelationType, value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Addresses.RelationType);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Addresses.RelationType);
		}


		virtual public global::System.Int32? Age 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Age.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Age.RelationType, value);
			}
		}

		virtual public bool ExistAge{
			get
			{
				return Strategy.ExistUnitRole(Meta.Age.RelationType);
			}
		}

		virtual public void RemoveAge()
		{
			Strategy.RemoveUnitRole(Meta.Age.RelationType);
		}


		virtual public global::System.DateTime? BirthDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BirthDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BirthDate.RelationType, value);
			}
		}

		virtual public bool ExistBirthDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.BirthDate.RelationType);
			}
		}

		virtual public void RemoveBirthDate()
		{
			Strategy.RemoveUnitRole(Meta.BirthDate.RelationType);
		}


		virtual public global::System.String FullName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FullName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FullName.RelationType, value);
			}
		}

		virtual public bool ExistFullName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FullName.RelationType);
			}
		}

		virtual public void RemoveFullName()
		{
			Strategy.RemoveUnitRole(Meta.FullName.RelationType);
		}


		virtual public Gender Gender
		{ 
			get
			{
				return (Gender) Strategy.GetCompositeRole(Meta.Gender.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Gender.RelationType, value);
			}
		}

		virtual public bool ExistGender
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Gender.RelationType);
			}
		}

		virtual public void RemoveGender()
		{
			Strategy.RemoveCompositeRole(Meta.Gender.RelationType);
		}


		virtual public global::System.Boolean? IsMarried 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsMarried.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsMarried.RelationType, value);
			}
		}

		virtual public bool ExistIsMarried{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsMarried.RelationType);
			}
		}

		virtual public void RemoveIsMarried()
		{
			Strategy.RemoveUnitRole(Meta.IsMarried.RelationType);
		}


		virtual public global::System.Boolean? IsStudent 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsStudent.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsStudent.RelationType, value);
			}
		}

		virtual public bool ExistIsStudent{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsStudent.RelationType);
			}
		}

		virtual public void RemoveIsStudent()
		{
			Strategy.RemoveUnitRole(Meta.IsStudent.RelationType);
		}


		virtual public MailboxAddress MailboxAddress
		{ 
			get
			{
				return (MailboxAddress) Strategy.GetCompositeRole(Meta.MailboxAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MailboxAddress.RelationType, value);
			}
		}

		virtual public bool ExistMailboxAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MailboxAddress.RelationType);
			}
		}

		virtual public void RemoveMailboxAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MailboxAddress.RelationType);
		}


		virtual public Address MainAddress
		{ 
			get
			{
				return (Address) Strategy.GetCompositeRole(Meta.MainAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MainAddress.RelationType, value);
			}
		}

		virtual public bool ExistMainAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MainAddress.RelationType);
			}
		}

		virtual public void RemoveMainAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MainAddress.RelationType);
		}


		virtual public Media Photo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Photo.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Photo.RelationType, value);
			}
		}

		virtual public bool ExistPhoto
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Photo.RelationType);
			}
		}

		virtual public void RemovePhoto()
		{
			Strategy.RemoveCompositeRole(Meta.Photo.RelationType);
		}


		virtual public global::System.Int32? ShirtSize 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.ShirtSize.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShirtSize.RelationType, value);
			}
		}

		virtual public bool ExistShirtSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShirtSize.RelationType);
			}
		}

		virtual public void RemoveShirtSize()
		{
			Strategy.RemoveUnitRole(Meta.ShirtSize.RelationType);
		}


		virtual public global::System.String Text 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Text.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Text.RelationType, value);
			}
		}

		virtual public bool ExistText{
			get
			{
				return Strategy.ExistUnitRole(Meta.Text.RelationType);
			}
		}

		virtual public void RemoveText()
		{
			Strategy.RemoveUnitRole(Meta.Text.RelationType);
		}


		virtual public global::System.String TinyMCEText 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TinyMCEText.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TinyMCEText.RelationType, value);
			}
		}

		virtual public bool ExistTinyMCEText{
			get
			{
				return Strategy.ExistUnitRole(Meta.TinyMCEText.RelationType);
			}
		}

		virtual public void RemoveTinyMCEText()
		{
			Strategy.RemoveUnitRole(Meta.TinyMCEText.RelationType);
		}


		virtual public global::System.Decimal? Weight 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Weight.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Weight.RelationType, value);
			}
		}

		virtual public bool ExistWeight{
			get
			{
				return Strategy.ExistUnitRole(Meta.Weight.RelationType);
			}
		}

		virtual public void RemoveWeight()
		{
			Strategy.RemoveUnitRole(Meta.Weight.RelationType);
		}


		virtual public Organisation CycleOne
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.CycleOne.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CycleOne.RelationType, value);
			}
		}

		virtual public bool ExistCycleOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CycleOne.RelationType);
			}
		}

		virtual public void RemoveCycleOne()
		{
			Strategy.RemoveCompositeRole(Meta.CycleOne.RelationType);
		}


		virtual public global::Allors.Extent<Organisation> CycleMany
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CycleMany.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CycleMany.RelationType, value);
			}
		}

		virtual public void AddCycleMany (Organisation value)
		{
			Strategy.AddCompositeRole(Meta.CycleMany.RelationType, value);
		}

		virtual public void RemoveCycleMany (Organisation value)
		{
			Strategy.RemoveCompositeRole(Meta.CycleMany.RelationType, value);
		}

		virtual public bool ExistCycleMany
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CycleMany.RelationType);
			}
		}

		virtual public void RemoveCycleMany()
		{
			Strategy.RemoveCompositeRoles(Meta.CycleMany.RelationType);
		}


		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserName.RelationType, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserName.RelationType);
			}
		}

		virtual public void RemoveUserName()
		{
			Strategy.RemoveUnitRole(Meta.UserName.RelationType);
		}


		virtual public global::System.String NormalizedUserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.NormalizedUserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NormalizedUserName.RelationType, value);
			}
		}

		virtual public bool ExistNormalizedUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.NormalizedUserName.RelationType);
			}
		}

		virtual public void RemoveNormalizedUserName()
		{
			Strategy.RemoveUnitRole(Meta.NormalizedUserName.RelationType);
		}


		virtual public global::System.String UserPasswordHash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserPasswordHash.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserPasswordHash.RelationType, value);
			}
		}

		virtual public bool ExistUserPasswordHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserPasswordHash.RelationType);
			}
		}

		virtual public void RemoveUserPasswordHash()
		{
			Strategy.RemoveUnitRole(Meta.UserPasswordHash.RelationType);
		}


		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserEmail.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmail.RelationType, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmail.RelationType);
			}
		}

		virtual public void RemoveUserEmail()
		{
			Strategy.RemoveUnitRole(Meta.UserEmail.RelationType);
		}


		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmailConfirmed.RelationType, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			Strategy.RemoveUnitRole(Meta.UserEmailConfirmed.RelationType);
		}


		virtual public TaskList TaskList
		{ 
			get
			{
				return (TaskList) Strategy.GetCompositeRole(Meta.TaskList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TaskList.RelationType, value);
			}
		}

		virtual public bool ExistTaskList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TaskList.RelationType);
			}
		}

		virtual public void RemoveTaskList()
		{
			Strategy.RemoveCompositeRole(Meta.TaskList.RelationType);
		}


		virtual public NotificationList NotificationList
		{ 
			get
			{
				return (NotificationList) Strategy.GetCompositeRole(Meta.NotificationList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NotificationList.RelationType, value);
			}
		}

		virtual public bool ExistNotificationList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NotificationList.RelationType);
			}
		}

		virtual public void RemoveNotificationList()
		{
			Strategy.RemoveCompositeRole(Meta.NotificationList.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale.RelationType, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale.RelationType);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public BadUI BadUIWherePersonsMany
		{ 
			get
			{
				return (BadUI) Strategy.GetCompositeAssociation(Meta.BadUIWherePersonsMany.RelationType);
			}
		} 

		virtual public bool ExistBadUIWherePersonsMany
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.BadUIWherePersonsMany.RelationType);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWherePersonOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWherePersonOne.RelationType);
			}
		}

		virtual public bool ExistBadUIsWherePersonOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWherePersonOne.RelationType);
			}
		}


		virtual public Organisation OrganisationWhereEmployee
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereEmployee.RelationType);
			}
		} 

		virtual public bool ExistOrganisationWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereEmployee.RelationType);
			}
		}


		virtual public Organisation OrganisationWhereManager
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereManager.RelationType);
			}
		} 

		virtual public bool ExistOrganisationWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereManager.RelationType);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereOwner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereOwner.RelationType);
			}
		}

		virtual public bool ExistOrganisationsWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereOwner.RelationType);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereShareholder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereShareholder.RelationType);
			}
		}

		virtual public bool ExistOrganisationsWhereShareholder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereShareholder.RelationType);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereCycleOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereCycleOne.RelationType);
			}
		}

		virtual public bool ExistOrganisationsWhereCycleOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereCycleOne.RelationType);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereCycleMany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereCycleMany.RelationType);
			}
		}

		virtual public bool ExistOrganisationsWhereCycleMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereCycleMany.RelationType);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereEmployee.RelationType);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereEmployee.RelationType);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereManager
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereManager.RelationType);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereManager.RelationType);
			}
		}


		virtual public global::Allors.Extent<Task> TasksWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TasksWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistTasksWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TasksWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<Task> TasksWherePerformer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TasksWherePerformer.RelationType);
			}
		}

		virtual public bool ExistTasksWherePerformer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TasksWherePerformer.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereSubject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereEffectiveUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereEffectiveUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<Login> LoginsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}

		virtual public bool ExistLoginsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}


		virtual public Singleton SingletonWhereGuest
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		} 

		virtual public bool ExistSingletonWhereGuest
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereMember
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}

		virtual public bool ExistUserGroupsWhereMember
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereSender
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereSender
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereRecipient
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereRecipient
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}


		virtual public global::Allors.Extent<TaskAssignment> TaskAssignmentsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}

		virtual public bool ExistTaskAssignmentsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public PersonMethod Method()
		{ 
			var method = new PersonMethod(this);
            method.Execute();
            return method;
		}

		public PersonMethod Method(System.Action<PersonMethod> action)
		{ 
			var method = new PersonMethod(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PersonOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PersonOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PersonOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PersonOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PersonOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PersonOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PersonOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PersonOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PersonOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PersonOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PersonDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PersonDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , UserBuilder, UniquelyIdentifiableBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Person instance)
		{

			instance.FirstName = this.FirstName;
		
		

			instance.LastName = this.LastName;
		
		

			instance.MiddleName = this.MiddleName;
		
		
			

			if(this.Age.HasValue)
			{
				instance.Age = this.Age.Value;
			}			
		
		
			

			if(this.BirthDate.HasValue)
			{
				instance.BirthDate = this.BirthDate.Value;
			}			
		
				
			

			if(this.IsMarried.HasValue)
			{
				instance.IsMarried = this.IsMarried.Value;
			}			
		
		
			

			if(this.IsStudent.HasValue)
			{
				instance.IsStudent = this.IsStudent.Value;
			}			
		
		
			

			if(this.ShirtSize.HasValue)
			{
				instance.ShirtSize = this.ShirtSize.Value;
			}			
		
		

			instance.Text = this.Text;
		
		

			instance.TinyMCEText = this.TinyMCEText;
		
		
			

			if(this.Weight.HasValue)
			{
				instance.Weight = this.Weight.Value;
			}			
		
		

			instance.UserName = this.UserName;
		
		

			instance.NormalizedUserName = this.NormalizedUserName;
		
		

			instance.UserPasswordHash = this.UserPasswordHash;
		
		

			instance.UserEmail = this.UserEmail;
		
		
			

			if(this.UserEmailConfirmed.HasValue)
			{
				instance.UserEmailConfirmed = this.UserEmailConfirmed.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.Addresses!=null)
			{
				instance.Addresses = this.Addresses.ToArray();
			}
		

			instance.Gender = this.Gender;

		

			instance.MailboxAddress = this.MailboxAddress;

		

			instance.MainAddress = this.MainAddress;

		

			instance.Photo = this.Photo;

		

			instance.CycleOne = this.CycleOne;

		
			if(this.CycleMany!=null)
			{
				instance.CycleMany = this.CycleMany.ToArray();
			}
				

			instance.NotificationList = this.NotificationList;

						
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		

			instance.Locale = this.Locale;

		
		}


				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public global::System.String LastName {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public PersonBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? Age {get; set;}

				/// <exclude/>
				public PersonBuilder WithAge(global::System.Int32? value)
		        {
				    if(this.Age!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Age = value;
		            return this;
		        }	

				public global::System.DateTime? BirthDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithBirthDate(global::System.DateTime? value)
		        {
				    if(this.BirthDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BirthDate = value;
		            return this;
		        }	

				public Gender Gender {get; set;}

				/// <exclude/>
				public PersonBuilder WithGender(Gender value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.Boolean? IsMarried {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsMarried(global::System.Boolean? value)
		        {
				    if(this.IsMarried!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsMarried = value;
		            return this;
		        }	

				public global::System.Boolean? IsStudent {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsStudent(global::System.Boolean? value)
		        {
				    if(this.IsStudent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsStudent = value;
		            return this;
		        }	

				public MailboxAddress MailboxAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMailboxAddress(MailboxAddress value)
		        {
		            if(this.MailboxAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MailboxAddress = value;
		            return this;
		        }		

				
				public Address MainAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMainAddress(Address value)
		        {
		            if(this.MainAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MainAddress = value;
		            return this;
		        }		

				
				public Media Photo {get; set;}

				/// <exclude/>
				public PersonBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public global::System.Int32? ShirtSize {get; set;}

				/// <exclude/>
				public PersonBuilder WithShirtSize(global::System.Int32? value)
		        {
				    if(this.ShirtSize!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShirtSize = value;
		            return this;
		        }	

				public global::System.String Text {get; set;}

				/// <exclude/>
				public PersonBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.String TinyMCEText {get; set;}

				/// <exclude/>
				public PersonBuilder WithTinyMCEText(global::System.String value)
		        {
				    if(this.TinyMCEText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TinyMCEText = value;
		            return this;
		        }	

				public global::System.Decimal? Weight {get; set;}

				/// <exclude/>
				public PersonBuilder WithWeight(global::System.Decimal? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public Organisation CycleOne {get; set;}

				/// <exclude/>
				public PersonBuilder WithCycleOne(Organisation value)
		        {
		            if(this.CycleOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CycleOne = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Organisation> CycleMany {get; set;}	

				/// <exclude/>
				public PersonBuilder WithCycleMany(Organisation value)
		        {
					if(this.CycleMany == null)
					{
						this.CycleMany = new global::System.Collections.Generic.List<Organisation>(); 
					}
		            this.CycleMany.Add(value);
		            return this;
		        }		

				
				public global::System.String UserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String NormalizedUserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithNormalizedUserName(global::System.String value)
		        {
				    if(this.NormalizedUserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NormalizedUserName = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public NotificationList NotificationList {get; set;}

				/// <exclude/>
				public PersonBuilder WithNotificationList(NotificationList value)
		        {
		            if(this.NotificationList!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NotificationList = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PersonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public PersonBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PersonBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class People : global::Allors.ObjectsBase<Person>
	{
		public People(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPerson Meta
		{
			get
			{
				return Allors.Meta.MetaPerson.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}