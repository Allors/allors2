// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Four : Allors.IObject , Shared
	{
		private readonly IStrategy strategy;

		public Four(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaFour Meta
		{
			get
			{
				return Allors.Meta.MetaFour.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Four Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Four) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Three> ThreesWhereFour
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ThreesWhereFour.RelationType);
			}
		}

		virtual public bool ExistThreesWhereFour
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ThreesWhereFour.RelationType);
			}
		}


		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared.RelationType);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FourOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FourOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FourOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FourOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FourOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FourOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FourOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FourOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FourOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FourOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class FourBuilder : Allors.ObjectBuilder<Four> , SharedBuilder, global::System.IDisposable
	{		
		public FourBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Four instance)
		{
		}


	}

	public partial class Fours : global::Allors.ObjectsBase<Four>
	{
		public Fours(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaFour Meta
		{
			get
			{
				return Allors.Meta.MetaFour.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}