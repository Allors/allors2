// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class BadUI : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public BadUI(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaBadUI Meta
		{
			get
			{
				return Allors.Meta.MetaBadUI.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static BadUI Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (BadUI) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Person> PersonsMany
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PersonsMany.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PersonsMany.RelationType, value);
			}
		}

		virtual public void AddPersonsMany (Person value)
		{
			Strategy.AddCompositeRole(Meta.PersonsMany.RelationType, value);
		}

		virtual public void RemovePersonsMany (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.PersonsMany.RelationType, value);
		}

		virtual public bool ExistPersonsMany
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PersonsMany.RelationType);
			}
		}

		virtual public void RemovePersonsMany()
		{
			Strategy.RemoveCompositeRoles(Meta.PersonsMany.RelationType);
		}


		virtual public Organisation CompanyOne
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.CompanyOne.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CompanyOne.RelationType, value);
			}
		}

		virtual public bool ExistCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CompanyOne.RelationType);
			}
		}

		virtual public void RemoveCompanyOne()
		{
			Strategy.RemoveCompositeRole(Meta.CompanyOne.RelationType);
		}


		virtual public Person PersonOne
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.PersonOne.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonOne.RelationType, value);
			}
		}

		virtual public bool ExistPersonOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonOne.RelationType);
			}
		}

		virtual public void RemovePersonOne()
		{
			Strategy.RemoveCompositeRole(Meta.PersonOne.RelationType);
		}


		virtual public Organisation CompanyMany
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.CompanyMany.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CompanyMany.RelationType, value);
			}
		}

		virtual public bool ExistCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CompanyMany.RelationType);
			}
		}

		virtual public void RemoveCompanyMany()
		{
			Strategy.RemoveCompositeRole(Meta.CompanyMany.RelationType);
		}


		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString.RelationType);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new BadUIOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new BadUIOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new BadUIOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new BadUIOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new BadUIOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new BadUIOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new BadUIOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new BadUIOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new BadUIOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new BadUIOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class BadUIBuilder : Allors.ObjectBuilder<BadUI> , ObjectBuilder, global::System.IDisposable
	{		
		public BadUIBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(BadUI instance)
		{

			instance.AllorsString = this.AllorsString;
		
		
			if(this.PersonsMany!=null)
			{
				instance.PersonsMany = this.PersonsMany.ToArray();
			}
		

			instance.CompanyOne = this.CompanyOne;

		

			instance.PersonOne = this.PersonOne;

		

			instance.CompanyMany = this.CompanyMany;

		
		}


				public global::System.Collections.Generic.List<Person> PersonsMany {get; set;}	

				/// <exclude/>
				public BadUIBuilder WithPersonsMany(Person value)
		        {
					if(this.PersonsMany == null)
					{
						this.PersonsMany = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.PersonsMany.Add(value);
		            return this;
		        }		

				
				public Organisation CompanyOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyOne(Organisation value)
		        {
		            if(this.CompanyOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyOne = value;
		            return this;
		        }		

				
				public Person PersonOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithPersonOne(Person value)
		        {
		            if(this.PersonOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonOne = value;
		            return this;
		        }		

				
				public Organisation CompanyMany {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyMany(Organisation value)
		        {
		            if(this.CompanyMany!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyMany = value;
		            return this;
		        }		

				
				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public BadUIBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	


	}

	public partial class BadUIs : global::Allors.ObjectsBase<BadUI>
	{
		public BadUIs(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaBadUI Meta
		{
			get
			{
				return Allors.Meta.MetaBadUI.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}