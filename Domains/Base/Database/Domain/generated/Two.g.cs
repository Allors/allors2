// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Two : Allors.IObject , Shared
	{
		private readonly IStrategy strategy;

		public Two(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaTwo Meta
		{
			get
			{
				return Allors.Meta.MetaTwo.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Two Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Two) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Shared Shared
		{ 
			get
			{
				return (Shared) Strategy.GetCompositeRole(Meta.Shared.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Shared.RelationType, value);
			}
		}

		virtual public bool ExistShared
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Shared.RelationType);
			}
		}

		virtual public void RemoveShared()
		{
			Strategy.RemoveCompositeRole(Meta.Shared.RelationType);
		}



		virtual public global::Allors.Extent<One> OnesWhereTwo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OnesWhereTwo.RelationType);
			}
		}

		virtual public bool ExistOnesWhereTwo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OnesWhereTwo.RelationType);
			}
		}


		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared.RelationType);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new TwoOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TwoOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TwoOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TwoOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TwoOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TwoOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TwoOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TwoOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TwoOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TwoOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class TwoBuilder : Allors.ObjectBuilder<Two> , SharedBuilder, global::System.IDisposable
	{		
		public TwoBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Two instance)
		{

			instance.Shared = this.Shared;

		
		}


				public Shared Shared {get; set;}

				/// <exclude/>
				public TwoBuilder WithShared(Shared value)
		        {
		            if(this.Shared!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Shared = value;
		            return this;
		        }		

				

	}

	public partial class Twos : global::Allors.ObjectsBase<Two>
	{
		public Twos(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaTwo Meta
		{
			get
			{
				return Allors.Meta.MetaTwo.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}