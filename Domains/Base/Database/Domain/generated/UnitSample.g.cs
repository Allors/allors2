// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class UnitSample : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public UnitSample(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaUnitSample Meta
		{
			get
			{
				return Allors.Meta.MetaUnitSample.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static UnitSample Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (UnitSample) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Byte[] AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.AllorsBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsBinary.RelationType, value);
			}
		}

		virtual public bool ExistAllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsBinary.RelationType);
			}
		}

		virtual public void RemoveAllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.AllorsBinary.RelationType);
		}


		virtual public global::System.DateTime? AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistAllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveAllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDateTime.RelationType);
		}


		virtual public global::System.Boolean? AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.AllorsBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsBoolean.RelationType, value);
			}
		}

		virtual public bool ExistAllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsBoolean.RelationType);
			}
		}

		virtual public void RemoveAllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.AllorsBoolean.RelationType);
		}


		virtual public global::System.Double? AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.AllorsDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDouble.RelationType, value);
			}
		}

		virtual public bool ExistAllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDouble.RelationType);
			}
		}

		virtual public void RemoveAllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDouble.RelationType);
		}


		virtual public global::System.Int32? AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistAllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveAllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.AllorsInteger.RelationType);
		}


		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString.RelationType);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString.RelationType);
		}


		virtual public global::System.Guid? AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.AllorsUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsUnique.RelationType, value);
			}
		}

		virtual public bool ExistAllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsUnique.RelationType);
			}
		}

		virtual public void RemoveAllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.AllorsUnique.RelationType);
		}


		virtual public global::System.Decimal? AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.AllorsDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDecimal.RelationType, value);
			}
		}

		virtual public bool ExistAllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDecimal.RelationType);
			}
		}

		virtual public void RemoveAllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDecimal.RelationType);
		}


		virtual public global::System.Byte[] RequiredBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.RequiredBinary.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredBinary.RelationType, value);
			}
		}

		virtual public bool ExistRequiredBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredBinary.RelationType);
			}
		}

		virtual public void RemoveRequiredBinary()
		{
			Strategy.RemoveUnitRole(Meta.RequiredBinary.RelationType);
		}


		virtual public global::System.DateTime RequiredDateTime 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.RequiredDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredDateTime.RelationType, value);
			}
		}

		virtual public bool ExistRequiredDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredDateTime.RelationType);
			}
		}

		virtual public void RemoveRequiredDateTime()
		{
			Strategy.RemoveUnitRole(Meta.RequiredDateTime.RelationType);
		}


		virtual public global::System.Boolean RequiredBoolean 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.RequiredBoolean.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredBoolean.RelationType, value);
			}
		}

		virtual public bool ExistRequiredBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredBoolean.RelationType);
			}
		}

		virtual public void RemoveRequiredBoolean()
		{
			Strategy.RemoveUnitRole(Meta.RequiredBoolean.RelationType);
		}


		virtual public global::System.Double RequiredDouble 
		{
			get
			{
				return (global::System.Double) Strategy.GetUnitRole(Meta.RequiredDouble.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredDouble.RelationType, value);
			}
		}

		virtual public bool ExistRequiredDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredDouble.RelationType);
			}
		}

		virtual public void RemoveRequiredDouble()
		{
			Strategy.RemoveUnitRole(Meta.RequiredDouble.RelationType);
		}


		virtual public global::System.Int32 RequiredInteger 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.RequiredInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredInteger.RelationType, value);
			}
		}

		virtual public bool ExistRequiredInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredInteger.RelationType);
			}
		}

		virtual public void RemoveRequiredInteger()
		{
			Strategy.RemoveUnitRole(Meta.RequiredInteger.RelationType);
		}


		virtual public global::System.String RequiredString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.RequiredString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredString.RelationType, value);
			}
		}

		virtual public bool ExistRequiredString{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredString.RelationType);
			}
		}

		virtual public void RemoveRequiredString()
		{
			Strategy.RemoveUnitRole(Meta.RequiredString.RelationType);
		}


		virtual public global::System.Guid RequiredUnique 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.RequiredUnique.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredUnique.RelationType, value);
			}
		}

		virtual public bool ExistRequiredUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredUnique.RelationType);
			}
		}

		virtual public void RemoveRequiredUnique()
		{
			Strategy.RemoveUnitRole(Meta.RequiredUnique.RelationType);
		}


		virtual public global::System.Decimal RequiredDecimal 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.RequiredDecimal.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredDecimal.RelationType, value);
			}
		}

		virtual public bool ExistRequiredDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredDecimal.RelationType);
			}
		}

		virtual public void RemoveRequiredDecimal()
		{
			Strategy.RemoveUnitRole(Meta.RequiredDecimal.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new UnitSampleOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new UnitSampleOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new UnitSampleOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new UnitSampleOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new UnitSampleOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new UnitSampleOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new UnitSampleOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new UnitSampleOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new UnitSampleOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new UnitSampleOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class UnitSampleBuilder : Allors.ObjectBuilder<UnitSample> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public UnitSampleBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(UnitSample instance)
		{

			instance.AllorsBinary = this.AllorsBinary;
		
		
			

			if(this.AllorsDateTime.HasValue)
			{
				instance.AllorsDateTime = this.AllorsDateTime.Value;
			}			
		
		
			

			if(this.AllorsBoolean.HasValue)
			{
				instance.AllorsBoolean = this.AllorsBoolean.Value;
			}			
		
		
			

			if(this.AllorsDouble.HasValue)
			{
				instance.AllorsDouble = this.AllorsDouble.Value;
			}			
		
		
			

			if(this.AllorsInteger.HasValue)
			{
				instance.AllorsInteger = this.AllorsInteger.Value;
			}			
		
		

			instance.AllorsString = this.AllorsString;
		
		
			

			if(this.AllorsUnique.HasValue)
			{
				instance.AllorsUnique = this.AllorsUnique.Value;
			}			
		
		
			

			if(this.AllorsDecimal.HasValue)
			{
				instance.AllorsDecimal = this.AllorsDecimal.Value;
			}			
		
		

			instance.RequiredBinary = this.RequiredBinary;
		
		
			

			if(this.RequiredDateTime.HasValue)
			{
				instance.RequiredDateTime = this.RequiredDateTime.Value;
			}			
		
		
			

			if(this.RequiredBoolean.HasValue)
			{
				instance.RequiredBoolean = this.RequiredBoolean.Value;
			}			
		
		
			

			if(this.RequiredDouble.HasValue)
			{
				instance.RequiredDouble = this.RequiredDouble.Value;
			}			
		
		
			

			if(this.RequiredInteger.HasValue)
			{
				instance.RequiredInteger = this.RequiredInteger.Value;
			}			
		
		

			instance.RequiredString = this.RequiredString;
		
		
			

			if(this.RequiredUnique.HasValue)
			{
				instance.RequiredUnique = this.RequiredUnique.Value;
			}			
		
		
			

			if(this.RequiredDecimal.HasValue)
			{
				instance.RequiredDecimal = this.RequiredDecimal.Value;
			}			
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Byte[] AllorsBinary {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsBinary(global::System.Byte[] value)
		        {
				    if(this.AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsBinary = value;
		            return this;
		        }	

				public global::System.DateTime? AllorsDateTime {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Boolean? AllorsBoolean {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Double? AllorsDouble {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsDouble(global::System.Double? value)
		        {
				    if(this.AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDouble = value;
		            return this;
		        }	

				public global::System.Int32? AllorsInteger {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsInteger(global::System.Int32? value)
		        {
				    if(this.AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsInteger = value;
		            return this;
		        }	

				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	

				public global::System.Guid? AllorsUnique {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsUnique(global::System.Guid? value)
		        {
				    if(this.AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsUnique = value;
		            return this;
		        }	

				public global::System.Decimal? AllorsDecimal {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithAllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Byte[] RequiredBinary {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredBinary(global::System.Byte[] value)
		        {
				    if(this.RequiredBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredBinary = value;
		            return this;
		        }	

				public global::System.DateTime? RequiredDateTime {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredDateTime(global::System.DateTime? value)
		        {
				    if(this.RequiredDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredDateTime = value;
		            return this;
		        }	

				public global::System.Boolean? RequiredBoolean {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredBoolean(global::System.Boolean? value)
		        {
				    if(this.RequiredBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredBoolean = value;
		            return this;
		        }	

				public global::System.Double? RequiredDouble {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredDouble(global::System.Double? value)
		        {
				    if(this.RequiredDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredDouble = value;
		            return this;
		        }	

				public global::System.Int32? RequiredInteger {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredInteger(global::System.Int32? value)
		        {
				    if(this.RequiredInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredInteger = value;
		            return this;
		        }	

				public global::System.String RequiredString {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredString(global::System.String value)
		        {
				    if(this.RequiredString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredString = value;
		            return this;
		        }	

				public global::System.Guid? RequiredUnique {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredUnique(global::System.Guid? value)
		        {
				    if(this.RequiredUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredUnique = value;
		            return this;
		        }	

				public global::System.Decimal? RequiredDecimal {get; set;}

				/// <exclude/>
				public UnitSampleBuilder WithRequiredDecimal(global::System.Decimal? value)
		        {
				    if(this.RequiredDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public UnitSampleBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public UnitSampleBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class UnitSamples : global::Allors.ObjectsBase<UnitSample>
	{
		public UnitSamples(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaUnitSample Meta
		{
			get
			{
				return Allors.Meta.MetaUnitSample.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}