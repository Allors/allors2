// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class Order : SessionObject 
	{
		public Order(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaOrder Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaOrder.Instance;
			}
		}

		public static Order Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (Order) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadCurrentVersion 
		{
			get
			{
				return this.CanRead(this.Meta.CurrentVersion);
			}
		}

		public bool CanWriteCurrentVersion 
		{
			get
			{
				return this.CanWrite(this.Meta.CurrentVersion);
			}
		}



		virtual public OrderVersion CurrentVersion
		{ 
			get
			{
				return (OrderVersion) this.Get(Meta.CurrentVersion);
			}
			set
			{
				this.Set(Meta.CurrentVersion, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return this.Exist(Meta.CurrentVersion);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			this.Set(Meta.CurrentVersion, null);
		}
		public bool CanReadAllVersions 
		{
			get
			{
				return this.CanRead(this.Meta.AllVersions);
			}
		}

		public bool CanWriteAllVersions 
		{
			get
			{
				return this.CanWrite(this.Meta.AllVersions);
			}
		}



		virtual public OrderVersion[] AllVersions
		{ 
			get
			{
				return (OrderVersion[])this.Get(Meta.AllVersions);
			}
			set
			{
				this.Set(Meta.AllVersions, value);
			}
		}

		virtual public void AddAllVersion (OrderVersion value)
		{
			this.Add(Meta.AllVersions, value);
		}

		virtual public void RemoveAllVersion (OrderVersion value)
		{
			this.Remove(Meta.AllVersions, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return this.Exist(Meta.AllVersions);
			}
		}

		virtual public void RemoveAllVersions()
		{
			this.Set(Meta.AllVersions, null);
		}


	}
}