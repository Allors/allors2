// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class C1 : SessionObject , I1
	{
		public C1(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaC1 Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaC1.Instance;
			}
		}

		public static C1 Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (C1) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadC1AllorsBinary 
		{
			get
			{
				return this.CanRead(this.Meta.C1AllorsBinary);
			}
		}

		public bool CanWriteC1AllorsBinary 
		{
			get
			{
				return this.CanWrite(this.Meta.C1AllorsBinary);
			}
		}



		virtual public global::System.Byte[] C1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) this.Get(Meta.C1AllorsBinary);
			}
			set
			{
				this.Set(Meta.C1AllorsBinary, value);
			}
		}

		virtual public bool ExistC1AllorsBinary{
			get
			{
				return this.Exist(Meta.C1AllorsBinary);
			}
		}

		virtual public void RemoveC1AllorsBinary()
		{
			this.Set(Meta.C1AllorsBinary, null);
		}
		public bool CanReadC1AllorsString 
		{
			get
			{
				return this.CanRead(this.Meta.C1AllorsString);
			}
		}

		public bool CanWriteC1AllorsString 
		{
			get
			{
				return this.CanWrite(this.Meta.C1AllorsString);
			}
		}



		virtual public global::System.String C1AllorsString 
		{
			get
			{
				return (global::System.String) this.Get(Meta.C1AllorsString);
			}
			set
			{
				this.Set(Meta.C1AllorsString, value);
			}
		}

		virtual public bool ExistC1AllorsString{
			get
			{
				return this.Exist(Meta.C1AllorsString);
			}
		}

		virtual public void RemoveC1AllorsString()
		{
			this.Set(Meta.C1AllorsString, null);
		}
		public bool CanReadC1C1One2Manies 
		{
			get
			{
				return this.CanRead(this.Meta.C1C1One2Manies);
			}
		}

		public bool CanWriteC1C1One2Manies 
		{
			get
			{
				return this.CanWrite(this.Meta.C1C1One2Manies);
			}
		}



		virtual public C1[] C1C1One2Manies
		{ 
			get
			{
				return (C1[])this.Get(Meta.C1C1One2Manies);
			}
			set
			{
				this.Set(Meta.C1C1One2Manies, value);
			}
		}

		virtual public void AddC1C1One2Many (C1 value)
		{
			this.Add(Meta.C1C1One2Manies, value);
		}

		virtual public void RemoveC1C1One2Many (C1 value)
		{
			this.Remove(Meta.C1C1One2Manies, value);
		}

		virtual public bool ExistC1C1One2Manies
		{
			get
			{
				return this.Exist(Meta.C1C1One2Manies);
			}
		}

		virtual public void RemoveC1C1One2Manies()
		{
			this.Set(Meta.C1C1One2Manies, null);
		}
		public bool CanReadC1C1One2One 
		{
			get
			{
				return this.CanRead(this.Meta.C1C1One2One);
			}
		}

		public bool CanWriteC1C1One2One 
		{
			get
			{
				return this.CanWrite(this.Meta.C1C1One2One);
			}
		}



		virtual public C1 C1C1One2One
		{ 
			get
			{
				return (C1) this.Get(Meta.C1C1One2One);
			}
			set
			{
				this.Set(Meta.C1C1One2One, value);
			}
		}

		virtual public bool ExistC1C1One2One
		{
			get
			{
				return this.Exist(Meta.C1C1One2One);
			}
		}

		virtual public void RemoveC1C1One2One()
		{
			this.Set(Meta.C1C1One2One, null);
		}
		public bool CanReadI1AllorsString 
		{
			get
			{
				return this.CanRead(this.Meta.I1AllorsString);
			}
		}

		public bool CanWriteI1AllorsString 
		{
			get
			{
				return this.CanWrite(this.Meta.I1AllorsString);
			}
		}



		virtual public global::System.String I1AllorsString 
		{
			get
			{
				return (global::System.String) this.Get(Meta.I1AllorsString);
			}
			set
			{
				this.Set(Meta.I1AllorsString, value);
			}
		}

		virtual public bool ExistI1AllorsString{
			get
			{
				return this.Exist(Meta.I1AllorsString);
			}
		}

		virtual public void RemoveI1AllorsString()
		{
			this.Set(Meta.I1AllorsString, null);
		}


			public bool CanExecuteClassMethod 
			{
				get
				{
					return this.CanExecute(this.Meta.ClassMethod);
				}
			}

			public Method ClassMethod 
			{
				get
				{
					return new Method(this, "ClassMethod");
				}
			}
	}
}