// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class Person : SessionObject , User, UniquelyIdentifiable, Deletable
	{
		public Person(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaPerson Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaPerson.Instance;
			}
		}

		public static Person Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (Person) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadFirstName 
		{
			get
			{
				return this.CanRead(this.Meta.FirstName);
			}
		}

		public bool CanWriteFirstName 
		{
			get
			{
				return this.CanWrite(this.Meta.FirstName);
			}
		}



		virtual public global::System.String FirstName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.FirstName);
			}
			set
			{
				this.Set(Meta.FirstName, value);
			}
		}

		virtual public bool ExistFirstName{
			get
			{
				return this.Exist(Meta.FirstName);
			}
		}

		virtual public void RemoveFirstName()
		{
			this.Set(Meta.FirstName, null);
		}
		public bool CanReadLastName 
		{
			get
			{
				return this.CanRead(this.Meta.LastName);
			}
		}

		public bool CanWriteLastName 
		{
			get
			{
				return this.CanWrite(this.Meta.LastName);
			}
		}



		virtual public global::System.String LastName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.LastName);
			}
			set
			{
				this.Set(Meta.LastName, value);
			}
		}

		virtual public bool ExistLastName{
			get
			{
				return this.Exist(Meta.LastName);
			}
		}

		virtual public void RemoveLastName()
		{
			this.Set(Meta.LastName, null);
		}
		public bool CanReadMiddleName 
		{
			get
			{
				return this.CanRead(this.Meta.MiddleName);
			}
		}

		public bool CanWriteMiddleName 
		{
			get
			{
				return this.CanWrite(this.Meta.MiddleName);
			}
		}



		virtual public global::System.String MiddleName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.MiddleName);
			}
			set
			{
				this.Set(Meta.MiddleName, value);
			}
		}

		virtual public bool ExistMiddleName{
			get
			{
				return this.Exist(Meta.MiddleName);
			}
		}

		virtual public void RemoveMiddleName()
		{
			this.Set(Meta.MiddleName, null);
		}
		public bool CanReadBirthDate 
		{
			get
			{
				return this.CanRead(this.Meta.BirthDate);
			}
		}

		public bool CanWriteBirthDate 
		{
			get
			{
				return this.CanWrite(this.Meta.BirthDate);
			}
		}



		virtual public global::System.DateTime? BirthDate 
		{
			get
			{
				return (global::System.DateTime?) this.Get(Meta.BirthDate);
			}
			set
			{
				this.Set(Meta.BirthDate, value);
			}
		}

		virtual public bool ExistBirthDate{
			get
			{
				return this.Exist(Meta.BirthDate);
			}
		}

		virtual public void RemoveBirthDate()
		{
			this.Set(Meta.BirthDate, null);
		}
		public bool CanReadFullName 
		{
			get
			{
				return this.CanRead(this.Meta.FullName);
			}
		}

		public bool CanWriteFullName 
		{
			get
			{
				return this.CanWrite(this.Meta.FullName);
			}
		}



		virtual public global::System.String FullName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.FullName);
			}
			set
			{
				this.Set(Meta.FullName, value);
			}
		}

		virtual public bool ExistFullName{
			get
			{
				return this.Exist(Meta.FullName);
			}
		}

		virtual public void RemoveFullName()
		{
			this.Set(Meta.FullName, null);
		}
		public bool CanReadIsStudent 
		{
			get
			{
				return this.CanRead(this.Meta.IsStudent);
			}
		}

		public bool CanWriteIsStudent 
		{
			get
			{
				return this.CanWrite(this.Meta.IsStudent);
			}
		}



		virtual public global::System.Boolean? IsStudent 
		{
			get
			{
				return (global::System.Boolean?) this.Get(Meta.IsStudent);
			}
			set
			{
				this.Set(Meta.IsStudent, value);
			}
		}

		virtual public bool ExistIsStudent{
			get
			{
				return this.Exist(Meta.IsStudent);
			}
		}

		virtual public void RemoveIsStudent()
		{
			this.Set(Meta.IsStudent, null);
		}
		public bool CanReadPhoto 
		{
			get
			{
				return this.CanRead(this.Meta.Photo);
			}
		}

		public bool CanWritePhoto 
		{
			get
			{
				return this.CanWrite(this.Meta.Photo);
			}
		}



		virtual public Media Photo
		{ 
			get
			{
				return (Media) this.Get(Meta.Photo);
			}
			set
			{
				this.Set(Meta.Photo, value);
			}
		}

		virtual public bool ExistPhoto
		{
			get
			{
				return this.Exist(Meta.Photo);
			}
		}

		virtual public void RemovePhoto()
		{
			this.Set(Meta.Photo, null);
		}
		public bool CanReadWeight 
		{
			get
			{
				return this.CanRead(this.Meta.Weight);
			}
		}

		public bool CanWriteWeight 
		{
			get
			{
				return this.CanWrite(this.Meta.Weight);
			}
		}



		virtual public global::System.Decimal? Weight 
		{
			get
			{
				return (global::System.Decimal?) this.Get(Meta.Weight);
			}
			set
			{
				this.Set(Meta.Weight, value);
			}
		}

		virtual public bool ExistWeight{
			get
			{
				return this.Exist(Meta.Weight);
			}
		}

		virtual public void RemoveWeight()
		{
			this.Set(Meta.Weight, null);
		}
		public bool CanReadCycleOne 
		{
			get
			{
				return this.CanRead(this.Meta.CycleOne);
			}
		}

		public bool CanWriteCycleOne 
		{
			get
			{
				return this.CanWrite(this.Meta.CycleOne);
			}
		}



		virtual public Organisation CycleOne
		{ 
			get
			{
				return (Organisation) this.Get(Meta.CycleOne);
			}
			set
			{
				this.Set(Meta.CycleOne, value);
			}
		}

		virtual public bool ExistCycleOne
		{
			get
			{
				return this.Exist(Meta.CycleOne);
			}
		}

		virtual public void RemoveCycleOne()
		{
			this.Set(Meta.CycleOne, null);
		}
		public bool CanReadCycleMany 
		{
			get
			{
				return this.CanRead(this.Meta.CycleMany);
			}
		}

		public bool CanWriteCycleMany 
		{
			get
			{
				return this.CanWrite(this.Meta.CycleMany);
			}
		}



		virtual public Organisation[] CycleMany
		{ 
			get
			{
				return (Organisation[])this.Get(Meta.CycleMany);
			}
			set
			{
				this.Set(Meta.CycleMany, value);
			}
		}

		virtual public void AddCycleMany (Organisation value)
		{
			this.Add(Meta.CycleMany, value);
		}

		virtual public void RemoveCycleMany (Organisation value)
		{
			this.Remove(Meta.CycleMany, value);
		}

		virtual public bool ExistCycleMany
		{
			get
			{
				return this.Exist(Meta.CycleMany);
			}
		}

		virtual public void RemoveCycleMany()
		{
			this.Set(Meta.CycleMany, null);
		}
		public bool CanReadUserName 
		{
			get
			{
				return this.CanRead(this.Meta.UserName);
			}
		}

		public bool CanWriteUserName 
		{
			get
			{
				return this.CanWrite(this.Meta.UserName);
			}
		}



		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.UserName);
			}
			set
			{
				this.Set(Meta.UserName, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return this.Exist(Meta.UserName);
			}
		}

		virtual public void RemoveUserName()
		{
			this.Set(Meta.UserName, null);
		}
		public bool CanReadNormalizedUserName 
		{
			get
			{
				return this.CanRead(this.Meta.NormalizedUserName);
			}
		}

		public bool CanWriteNormalizedUserName 
		{
			get
			{
				return this.CanWrite(this.Meta.NormalizedUserName);
			}
		}



		virtual public global::System.String NormalizedUserName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.NormalizedUserName);
			}
			set
			{
				this.Set(Meta.NormalizedUserName, value);
			}
		}

		virtual public bool ExistNormalizedUserName{
			get
			{
				return this.Exist(Meta.NormalizedUserName);
			}
		}

		virtual public void RemoveNormalizedUserName()
		{
			this.Set(Meta.NormalizedUserName, null);
		}
		public bool CanReadUserEmail 
		{
			get
			{
				return this.CanRead(this.Meta.UserEmail);
			}
		}

		public bool CanWriteUserEmail 
		{
			get
			{
				return this.CanWrite(this.Meta.UserEmail);
			}
		}



		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) this.Get(Meta.UserEmail);
			}
			set
			{
				this.Set(Meta.UserEmail, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return this.Exist(Meta.UserEmail);
			}
		}

		virtual public void RemoveUserEmail()
		{
			this.Set(Meta.UserEmail, null);
		}
		public bool CanReadUserEmailConfirmed 
		{
			get
			{
				return this.CanRead(this.Meta.UserEmailConfirmed);
			}
		}

		public bool CanWriteUserEmailConfirmed 
		{
			get
			{
				return this.CanWrite(this.Meta.UserEmailConfirmed);
			}
		}



		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) this.Get(Meta.UserEmailConfirmed);
			}
			set
			{
				this.Set(Meta.UserEmailConfirmed, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return this.Exist(Meta.UserEmailConfirmed);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			this.Set(Meta.UserEmailConfirmed, null);
		}
		public bool CanReadTaskList 
		{
			get
			{
				return this.CanRead(this.Meta.TaskList);
			}
		}

		public bool CanWriteTaskList 
		{
			get
			{
				return this.CanWrite(this.Meta.TaskList);
			}
		}



		virtual public TaskList TaskList
		{ 
			get
			{
				return (TaskList) this.Get(Meta.TaskList);
			}
			set
			{
				this.Set(Meta.TaskList, value);
			}
		}

		virtual public bool ExistTaskList
		{
			get
			{
				return this.Exist(Meta.TaskList);
			}
		}

		virtual public void RemoveTaskList()
		{
			this.Set(Meta.TaskList, null);
		}
		public bool CanReadNotificationList 
		{
			get
			{
				return this.CanRead(this.Meta.NotificationList);
			}
		}

		public bool CanWriteNotificationList 
		{
			get
			{
				return this.CanWrite(this.Meta.NotificationList);
			}
		}



		virtual public NotificationList NotificationList
		{ 
			get
			{
				return (NotificationList) this.Get(Meta.NotificationList);
			}
			set
			{
				this.Set(Meta.NotificationList, value);
			}
		}

		virtual public bool ExistNotificationList
		{
			get
			{
				return this.Exist(Meta.NotificationList);
			}
		}

		virtual public void RemoveNotificationList()
		{
			this.Set(Meta.NotificationList, null);
		}
		public bool CanReadLocale 
		{
			get
			{
				return this.CanRead(this.Meta.Locale);
			}
		}

		public bool CanWriteLocale 
		{
			get
			{
				return this.CanWrite(this.Meta.Locale);
			}
		}



		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) this.Get(Meta.Locale);
			}
			set
			{
				this.Set(Meta.Locale, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return this.Exist(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			this.Set(Meta.Locale, null);
		}
		public bool CanReadUniqueId 
		{
			get
			{
				return this.CanRead(this.Meta.UniqueId);
			}
		}

		public bool CanWriteUniqueId 
		{
			get
			{
				return this.CanWrite(this.Meta.UniqueId);
			}
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) this.Get(Meta.UniqueId);
			}
			set
			{
				this.Set(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return this.Exist(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			this.Set(Meta.UniqueId, null);
		}


			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}