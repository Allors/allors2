// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class TaskAssignment : SessionObject , Deletable
	{
		public TaskAssignment(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaTaskAssignment Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaTaskAssignment.Instance;
			}
		}

		public static TaskAssignment Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (TaskAssignment) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadUser 
		{
			get
			{
				return this.CanRead(this.Meta.User);
			}
		}

		public bool CanWriteUser 
		{
			get
			{
				return this.CanWrite(this.Meta.User);
			}
		}



		virtual public User User
		{ 
			get
			{
				return (User) this.Get(Meta.User);
			}
			set
			{
				this.Set(Meta.User, value);
			}
		}

		virtual public bool ExistUser
		{
			get
			{
				return this.Exist(Meta.User);
			}
		}

		virtual public void RemoveUser()
		{
			this.Set(Meta.User, null);
		}
		public bool CanReadTask 
		{
			get
			{
				return this.CanRead(this.Meta.Task);
			}
		}

		public bool CanWriteTask 
		{
			get
			{
				return this.CanWrite(this.Meta.Task);
			}
		}



		virtual public Task Task
		{ 
			get
			{
				return (Task) this.Get(Meta.Task);
			}
			set
			{
				this.Set(Meta.Task, value);
			}
		}

		virtual public bool ExistTask
		{
			get
			{
				return this.Exist(Meta.Task);
			}
		}

		virtual public void RemoveTask()
		{
			this.Set(Meta.Task, null);
		}


			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}