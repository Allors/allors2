// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class TaskList : SessionObject , Deletable
	{
		public TaskList(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaTaskList Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaTaskList.Instance;
			}
		}

		public static TaskList Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (TaskList) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadTaskAssignments 
		{
			get
			{
				return this.CanRead(this.Meta.TaskAssignments);
			}
		}

		public bool CanWriteTaskAssignments 
		{
			get
			{
				return this.CanWrite(this.Meta.TaskAssignments);
			}
		}



		virtual public TaskAssignment[] TaskAssignments
		{ 
			get
			{
				return (TaskAssignment[])this.Get(Meta.TaskAssignments);
			}
			set
			{
				this.Set(Meta.TaskAssignments, value);
			}
		}

		virtual public void AddTaskAssignment (TaskAssignment value)
		{
			this.Add(Meta.TaskAssignments, value);
		}

		virtual public void RemoveTaskAssignment (TaskAssignment value)
		{
			this.Remove(Meta.TaskAssignments, value);
		}

		virtual public bool ExistTaskAssignments
		{
			get
			{
				return this.Exist(Meta.TaskAssignments);
			}
		}

		virtual public void RemoveTaskAssignments()
		{
			this.Set(Meta.TaskAssignments, null);
		}
		public bool CanReadOpenTaskAssignments 
		{
			get
			{
				return this.CanRead(this.Meta.OpenTaskAssignments);
			}
		}

		public bool CanWriteOpenTaskAssignments 
		{
			get
			{
				return this.CanWrite(this.Meta.OpenTaskAssignments);
			}
		}



		virtual public TaskAssignment[] OpenTaskAssignments
		{ 
			get
			{
				return (TaskAssignment[])this.Get(Meta.OpenTaskAssignments);
			}
			set
			{
				this.Set(Meta.OpenTaskAssignments, value);
			}
		}

		virtual public void AddOpenTaskAssignment (TaskAssignment value)
		{
			this.Add(Meta.OpenTaskAssignments, value);
		}

		virtual public void RemoveOpenTaskAssignment (TaskAssignment value)
		{
			this.Remove(Meta.OpenTaskAssignments, value);
		}

		virtual public bool ExistOpenTaskAssignments
		{
			get
			{
				return this.Exist(Meta.OpenTaskAssignments);
			}
		}

		virtual public void RemoveOpenTaskAssignments()
		{
			this.Set(Meta.OpenTaskAssignments, null);
		}
		public bool CanReadCount 
		{
			get
			{
				return this.CanRead(this.Meta.Count);
			}
		}

		public bool CanWriteCount 
		{
			get
			{
				return this.CanWrite(this.Meta.Count);
			}
		}



		virtual public global::System.Int32? Count 
		{
			get
			{
				return (global::System.Int32?) this.Get(Meta.Count);
			}
			set
			{
				this.Set(Meta.Count, value);
			}
		}

		virtual public bool ExistCount{
			get
			{
				return this.Exist(Meta.Count);
			}
		}

		virtual public void RemoveCount()
		{
			this.Set(Meta.Count, null);
		}


			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}