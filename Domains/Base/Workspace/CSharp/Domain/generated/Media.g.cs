// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class Media : SessionObject , UniquelyIdentifiable, Deletable
	{
		public Media(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaMedia Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaMedia.Instance;
			}
		}

		public static Media Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (Media) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadRevision 
		{
			get
			{
				return this.CanRead(this.Meta.Revision);
			}
		}

		public bool CanWriteRevision 
		{
			get
			{
				return this.CanWrite(this.Meta.Revision);
			}
		}



		virtual public global::System.Guid? Revision 
		{
			get
			{
				return (global::System.Guid?) this.Get(Meta.Revision);
			}
			set
			{
				this.Set(Meta.Revision, value);
			}
		}

		virtual public bool ExistRevision{
			get
			{
				return this.Exist(Meta.Revision);
			}
		}

		virtual public void RemoveRevision()
		{
			this.Set(Meta.Revision, null);
		}
		public bool CanReadMediaContent 
		{
			get
			{
				return this.CanRead(this.Meta.MediaContent);
			}
		}

		public bool CanWriteMediaContent 
		{
			get
			{
				return this.CanWrite(this.Meta.MediaContent);
			}
		}



		virtual public MediaContent MediaContent
		{ 
			get
			{
				return (MediaContent) this.Get(Meta.MediaContent);
			}
			set
			{
				this.Set(Meta.MediaContent, value);
			}
		}

		virtual public bool ExistMediaContent
		{
			get
			{
				return this.Exist(Meta.MediaContent);
			}
		}

		virtual public void RemoveMediaContent()
		{
			this.Set(Meta.MediaContent, null);
		}
		public bool CanReadInData 
		{
			get
			{
				return this.CanRead(this.Meta.InData);
			}
		}

		public bool CanWriteInData 
		{
			get
			{
				return this.CanWrite(this.Meta.InData);
			}
		}



		virtual public global::System.Byte[] InData 
		{
			get
			{
				return (global::System.Byte[]) this.Get(Meta.InData);
			}
			set
			{
				this.Set(Meta.InData, value);
			}
		}

		virtual public bool ExistInData{
			get
			{
				return this.Exist(Meta.InData);
			}
		}

		virtual public void RemoveInData()
		{
			this.Set(Meta.InData, null);
		}
		public bool CanReadInDataUri 
		{
			get
			{
				return this.CanRead(this.Meta.InDataUri);
			}
		}

		public bool CanWriteInDataUri 
		{
			get
			{
				return this.CanWrite(this.Meta.InDataUri);
			}
		}



		virtual public global::System.String InDataUri 
		{
			get
			{
				return (global::System.String) this.Get(Meta.InDataUri);
			}
			set
			{
				this.Set(Meta.InDataUri, value);
			}
		}

		virtual public bool ExistInDataUri{
			get
			{
				return this.Exist(Meta.InDataUri);
			}
		}

		virtual public void RemoveInDataUri()
		{
			this.Set(Meta.InDataUri, null);
		}
		public bool CanReadFileName 
		{
			get
			{
				return this.CanRead(this.Meta.FileName);
			}
		}

		public bool CanWriteFileName 
		{
			get
			{
				return this.CanWrite(this.Meta.FileName);
			}
		}



		virtual public global::System.String FileName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.FileName);
			}
			set
			{
				this.Set(Meta.FileName, value);
			}
		}

		virtual public bool ExistFileName{
			get
			{
				return this.Exist(Meta.FileName);
			}
		}

		virtual public void RemoveFileName()
		{
			this.Set(Meta.FileName, null);
		}
		public bool CanReadType 
		{
			get
			{
				return this.CanRead(this.Meta.Type);
			}
		}

		public bool CanWriteType 
		{
			get
			{
				return this.CanWrite(this.Meta.Type);
			}
		}



		virtual public global::System.String Type 
		{
			get
			{
				return (global::System.String) this.Get(Meta.Type);
			}
			set
			{
				this.Set(Meta.Type, value);
			}
		}

		virtual public bool ExistType{
			get
			{
				return this.Exist(Meta.Type);
			}
		}

		virtual public void RemoveType()
		{
			this.Set(Meta.Type, null);
		}
		public bool CanReadUniqueId 
		{
			get
			{
				return this.CanRead(this.Meta.UniqueId);
			}
		}

		public bool CanWriteUniqueId 
		{
			get
			{
				return this.CanWrite(this.Meta.UniqueId);
			}
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) this.Get(Meta.UniqueId);
			}
			set
			{
				this.Set(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return this.Exist(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			this.Set(Meta.UniqueId, null);
		}


			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}