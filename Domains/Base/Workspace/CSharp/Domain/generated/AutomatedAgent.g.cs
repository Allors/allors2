// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class AutomatedAgent : SessionObject , User
	{
		public AutomatedAgent(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaAutomatedAgent Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaAutomatedAgent.Instance;
			}
		}

		public static AutomatedAgent Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (AutomatedAgent) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadUserName 
		{
			get
			{
				return this.CanRead(this.Meta.UserName);
			}
		}

		public bool CanWriteUserName 
		{
			get
			{
				return this.CanWrite(this.Meta.UserName);
			}
		}



		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.UserName);
			}
			set
			{
				this.Set(Meta.UserName, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return this.Exist(Meta.UserName);
			}
		}

		virtual public void RemoveUserName()
		{
			this.Set(Meta.UserName, null);
		}
		public bool CanReadNormalizedUserName 
		{
			get
			{
				return this.CanRead(this.Meta.NormalizedUserName);
			}
		}

		public bool CanWriteNormalizedUserName 
		{
			get
			{
				return this.CanWrite(this.Meta.NormalizedUserName);
			}
		}



		virtual public global::System.String NormalizedUserName 
		{
			get
			{
				return (global::System.String) this.Get(Meta.NormalizedUserName);
			}
			set
			{
				this.Set(Meta.NormalizedUserName, value);
			}
		}

		virtual public bool ExistNormalizedUserName{
			get
			{
				return this.Exist(Meta.NormalizedUserName);
			}
		}

		virtual public void RemoveNormalizedUserName()
		{
			this.Set(Meta.NormalizedUserName, null);
		}
		public bool CanReadUserEmail 
		{
			get
			{
				return this.CanRead(this.Meta.UserEmail);
			}
		}

		public bool CanWriteUserEmail 
		{
			get
			{
				return this.CanWrite(this.Meta.UserEmail);
			}
		}



		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) this.Get(Meta.UserEmail);
			}
			set
			{
				this.Set(Meta.UserEmail, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return this.Exist(Meta.UserEmail);
			}
		}

		virtual public void RemoveUserEmail()
		{
			this.Set(Meta.UserEmail, null);
		}
		public bool CanReadUserEmailConfirmed 
		{
			get
			{
				return this.CanRead(this.Meta.UserEmailConfirmed);
			}
		}

		public bool CanWriteUserEmailConfirmed 
		{
			get
			{
				return this.CanWrite(this.Meta.UserEmailConfirmed);
			}
		}



		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) this.Get(Meta.UserEmailConfirmed);
			}
			set
			{
				this.Set(Meta.UserEmailConfirmed, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return this.Exist(Meta.UserEmailConfirmed);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			this.Set(Meta.UserEmailConfirmed, null);
		}
		public bool CanReadTaskList 
		{
			get
			{
				return this.CanRead(this.Meta.TaskList);
			}
		}

		public bool CanWriteTaskList 
		{
			get
			{
				return this.CanWrite(this.Meta.TaskList);
			}
		}



		virtual public TaskList TaskList
		{ 
			get
			{
				return (TaskList) this.Get(Meta.TaskList);
			}
			set
			{
				this.Set(Meta.TaskList, value);
			}
		}

		virtual public bool ExistTaskList
		{
			get
			{
				return this.Exist(Meta.TaskList);
			}
		}

		virtual public void RemoveTaskList()
		{
			this.Set(Meta.TaskList, null);
		}
		public bool CanReadNotificationList 
		{
			get
			{
				return this.CanRead(this.Meta.NotificationList);
			}
		}

		public bool CanWriteNotificationList 
		{
			get
			{
				return this.CanWrite(this.Meta.NotificationList);
			}
		}



		virtual public NotificationList NotificationList
		{ 
			get
			{
				return (NotificationList) this.Get(Meta.NotificationList);
			}
			set
			{
				this.Set(Meta.NotificationList, value);
			}
		}

		virtual public bool ExistNotificationList
		{
			get
			{
				return this.Exist(Meta.NotificationList);
			}
		}

		virtual public void RemoveNotificationList()
		{
			this.Set(Meta.NotificationList, null);
		}
		public bool CanReadLocale 
		{
			get
			{
				return this.CanRead(this.Meta.Locale);
			}
		}

		public bool CanWriteLocale 
		{
			get
			{
				return this.CanWrite(this.Meta.Locale);
			}
		}



		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) this.Get(Meta.Locale);
			}
			set
			{
				this.Set(Meta.Locale, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return this.Exist(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			this.Set(Meta.Locale, null);
		}


	}
}