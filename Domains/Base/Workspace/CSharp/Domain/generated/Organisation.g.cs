// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class Organisation : SessionObject , Deletable, UniquelyIdentifiable
	{
		public Organisation(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaOrganisation Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaOrganisation.Instance;
			}
		}

		public static Organisation Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (Organisation) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadEmployees 
		{
			get
			{
				return this.CanRead(this.Meta.Employees);
			}
		}

		public bool CanWriteEmployees 
		{
			get
			{
				return this.CanWrite(this.Meta.Employees);
			}
		}



		virtual public Person[] Employees
		{ 
			get
			{
				return (Person[])this.Get(Meta.Employees);
			}
			set
			{
				this.Set(Meta.Employees, value);
			}
		}

		virtual public void AddEmployee (Person value)
		{
			this.Add(Meta.Employees, value);
		}

		virtual public void RemoveEmployee (Person value)
		{
			this.Remove(Meta.Employees, value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return this.Exist(Meta.Employees);
			}
		}

		virtual public void RemoveEmployees()
		{
			this.Set(Meta.Employees, null);
		}
		public bool CanReadManager 
		{
			get
			{
				return this.CanRead(this.Meta.Manager);
			}
		}

		public bool CanWriteManager 
		{
			get
			{
				return this.CanWrite(this.Meta.Manager);
			}
		}



		virtual public Person Manager
		{ 
			get
			{
				return (Person) this.Get(Meta.Manager);
			}
			set
			{
				this.Set(Meta.Manager, value);
			}
		}

		virtual public bool ExistManager
		{
			get
			{
				return this.Exist(Meta.Manager);
			}
		}

		virtual public void RemoveManager()
		{
			this.Set(Meta.Manager, null);
		}
		public bool CanReadName 
		{
			get
			{
				return this.CanRead(this.Meta.Name);
			}
		}

		public bool CanWriteName 
		{
			get
			{
				return this.CanWrite(this.Meta.Name);
			}
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) this.Get(Meta.Name);
			}
			set
			{
				this.Set(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return this.Exist(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			this.Set(Meta.Name, null);
		}
		public bool CanReadOwner 
		{
			get
			{
				return this.CanRead(this.Meta.Owner);
			}
		}

		public bool CanWriteOwner 
		{
			get
			{
				return this.CanWrite(this.Meta.Owner);
			}
		}



		virtual public Person Owner
		{ 
			get
			{
				return (Person) this.Get(Meta.Owner);
			}
			set
			{
				this.Set(Meta.Owner, value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return this.Exist(Meta.Owner);
			}
		}

		virtual public void RemoveOwner()
		{
			this.Set(Meta.Owner, null);
		}
		public bool CanReadShareholders 
		{
			get
			{
				return this.CanRead(this.Meta.Shareholders);
			}
		}

		public bool CanWriteShareholders 
		{
			get
			{
				return this.CanWrite(this.Meta.Shareholders);
			}
		}



		virtual public Person[] Shareholders
		{ 
			get
			{
				return (Person[])this.Get(Meta.Shareholders);
			}
			set
			{
				this.Set(Meta.Shareholders, value);
			}
		}

		virtual public void AddShareholder (Person value)
		{
			this.Add(Meta.Shareholders, value);
		}

		virtual public void RemoveShareholder (Person value)
		{
			this.Remove(Meta.Shareholders, value);
		}

		virtual public bool ExistShareholders
		{
			get
			{
				return this.Exist(Meta.Shareholders);
			}
		}

		virtual public void RemoveShareholders()
		{
			this.Set(Meta.Shareholders, null);
		}
		public bool CanReadCycleOne 
		{
			get
			{
				return this.CanRead(this.Meta.CycleOne);
			}
		}

		public bool CanWriteCycleOne 
		{
			get
			{
				return this.CanWrite(this.Meta.CycleOne);
			}
		}



		virtual public Person CycleOne
		{ 
			get
			{
				return (Person) this.Get(Meta.CycleOne);
			}
			set
			{
				this.Set(Meta.CycleOne, value);
			}
		}

		virtual public bool ExistCycleOne
		{
			get
			{
				return this.Exist(Meta.CycleOne);
			}
		}

		virtual public void RemoveCycleOne()
		{
			this.Set(Meta.CycleOne, null);
		}
		public bool CanReadCycleMany 
		{
			get
			{
				return this.CanRead(this.Meta.CycleMany);
			}
		}

		public bool CanWriteCycleMany 
		{
			get
			{
				return this.CanWrite(this.Meta.CycleMany);
			}
		}



		virtual public Person[] CycleMany
		{ 
			get
			{
				return (Person[])this.Get(Meta.CycleMany);
			}
			set
			{
				this.Set(Meta.CycleMany, value);
			}
		}

		virtual public void AddCycleMany (Person value)
		{
			this.Add(Meta.CycleMany, value);
		}

		virtual public void RemoveCycleMany (Person value)
		{
			this.Remove(Meta.CycleMany, value);
		}

		virtual public bool ExistCycleMany
		{
			get
			{
				return this.Exist(Meta.CycleMany);
			}
		}

		virtual public void RemoveCycleMany()
		{
			this.Set(Meta.CycleMany, null);
		}
		public bool CanReadUniqueId 
		{
			get
			{
				return this.CanRead(this.Meta.UniqueId);
			}
		}

		public bool CanWriteUniqueId 
		{
			get
			{
				return this.CanWrite(this.Meta.UniqueId);
			}
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) this.Get(Meta.UniqueId);
			}
			set
			{
				this.Set(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return this.Exist(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			this.Set(Meta.UniqueId, null);
		}


			public bool CanExecuteJustDoIt 
			{
				get
				{
					return this.CanExecute(this.Meta.JustDoIt);
				}
			}

			public Method JustDoIt 
			{
				get
				{
					return new Method(this, "JustDoIt");
				}
			}
			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}