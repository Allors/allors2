// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
	public partial class NotificationList : SessionObject , Deletable
	{
		public NotificationList(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.MetaNotificationList Meta
		{
			get
			{
				return Allors.Workspace.Meta.MetaNotificationList.Instance;
			}
		}

		public static NotificationList Instantiate (Session allorsSession, long allorsObjectId)
		{
			return (NotificationList) allorsSession.Get(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


		public bool CanReadUnconfirmedNotifications 
		{
			get
			{
				return this.CanRead(this.Meta.UnconfirmedNotifications);
			}
		}

		public bool CanWriteUnconfirmedNotifications 
		{
			get
			{
				return this.CanWrite(this.Meta.UnconfirmedNotifications);
			}
		}



		virtual public Notification[] UnconfirmedNotifications
		{ 
			get
			{
				return (Notification[])this.Get(Meta.UnconfirmedNotifications);
			}
			set
			{
				this.Set(Meta.UnconfirmedNotifications, value);
			}
		}

		virtual public void AddUnconfirmedNotification (Notification value)
		{
			this.Add(Meta.UnconfirmedNotifications, value);
		}

		virtual public void RemoveUnconfirmedNotification (Notification value)
		{
			this.Remove(Meta.UnconfirmedNotifications, value);
		}

		virtual public bool ExistUnconfirmedNotifications
		{
			get
			{
				return this.Exist(Meta.UnconfirmedNotifications);
			}
		}

		virtual public void RemoveUnconfirmedNotifications()
		{
			this.Set(Meta.UnconfirmedNotifications, null);
		}


			public bool CanExecuteDelete 
			{
				get
				{
					return this.CanExecute(this.Meta.Delete);
				}
			}

			public Method Delete 
			{
				get
				{
					return new Method(this, "Delete");
				}
			}
	}
}