// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class EventRegistration : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public EventRegistration(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaEventRegistration Meta
		{
			get
			{
				return Allors.Meta.MetaEventRegistration.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static EventRegistration Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (EventRegistration) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Person Person
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Person.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Person.RelationType, value);
			}
		}

		virtual public bool ExistPerson
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Person.RelationType);
			}
		}

		virtual public void RemovePerson()
		{
			Strategy.RemoveCompositeRole(Meta.Person.RelationType);
		}


		virtual public Event Event
		{ 
			get
			{
				return (Event) Strategy.GetCompositeRole(Meta.Event.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Event.RelationType, value);
			}
		}

		virtual public bool ExistEvent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Event.RelationType);
			}
		}

		virtual public void RemoveEvent()
		{
			Strategy.RemoveCompositeRole(Meta.Event.RelationType);
		}


		virtual public global::System.DateTime? AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AllorsDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDateTime.RelationType, value);
			}
		}

		virtual public bool ExistAllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDateTime.RelationType);
			}
		}

		virtual public void RemoveAllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDateTime.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new EventRegistrationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new EventRegistrationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new EventRegistrationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new EventRegistrationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new EventRegistrationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new EventRegistrationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new EventRegistrationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new EventRegistrationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new EventRegistrationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new EventRegistrationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class EventRegistrationBuilder : Allors.ObjectBuilder<EventRegistration> , ObjectBuilder, global::System.IDisposable
	{		
		public EventRegistrationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(EventRegistration instance)
		{
			

			if(this.AllorsDateTime.HasValue)
			{
				instance.AllorsDateTime = this.AllorsDateTime.Value;
			}			
		
		

			instance.Person = this.Person;

		

			instance.Event = this.Event;

		
		}


				public Person Person {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithPerson(Person value)
		        {
		            if(this.Person!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Person = value;
		            return this;
		        }		

				
				public Event Event {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithEvent(Event value)
		        {
		            if(this.Event!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Event = value;
		            return this;
		        }		

				
				public global::System.DateTime? AllorsDateTime {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithAllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDateTime = value;
		            return this;
		        }	


	}

	public partial class EventRegistrations : global::Allors.ObjectsBase<EventRegistration>
	{
		public EventRegistrations(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaEventRegistration Meta
		{
			get
			{
				return Allors.Meta.MetaEventRegistration.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}