// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class StatementOfWorkVersion : Allors.IObject , QuoteVersion
	{
		private readonly IStrategy strategy;

		public StatementOfWorkVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaStatementOfWorkVersion Meta
		{
			get
			{
				return Allors.Meta.MetaStatementOfWorkVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static StatementOfWorkVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (StatementOfWorkVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public QuoteState QuoteState
		{ 
			get
			{
				return (QuoteState) Strategy.GetCompositeRole(Meta.QuoteState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteState.RelationType, value);
			}
		}

		virtual public bool ExistQuoteState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteState.RelationType);
			}
		}

		virtual public void RemoveQuoteState()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteState.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public global::System.DateTime? RequiredResponseDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RequiredResponseDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredResponseDate.RelationType, value);
			}
		}

		virtual public bool ExistRequiredResponseDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredResponseDate.RelationType);
			}
		}

		virtual public void RemoveRequiredResponseDate()
		{
			Strategy.RemoveUnitRole(Meta.RequiredResponseDate.RelationType);
		}


		virtual public global::System.DateTime? ValidFromDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ValidFromDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ValidFromDate.RelationType, value);
			}
		}

		virtual public bool ExistValidFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ValidFromDate.RelationType);
			}
		}

		virtual public void RemoveValidFromDate()
		{
			Strategy.RemoveUnitRole(Meta.ValidFromDate.RelationType);
		}


		virtual public global::Allors.Extent<QuoteTerm> QuoteTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.QuoteTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.QuoteTerms.RelationType, value);
			}
		}

		virtual public void AddQuoteTerm (QuoteTerm value)
		{
			Strategy.AddCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public void RemoveQuoteTerm (QuoteTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public bool ExistQuoteTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.QuoteTerms.RelationType);
			}
		}

		virtual public void RemoveQuoteTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.QuoteTerms.RelationType);
		}


		virtual public global::System.DateTime? ValidThroughDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ValidThroughDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ValidThroughDate.RelationType, value);
			}
		}

		virtual public bool ExistValidThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ValidThroughDate.RelationType);
			}
		}

		virtual public void RemoveValidThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ValidThroughDate.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public Party Receiver
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Receiver.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Receiver.RelationType, value);
			}
		}

		virtual public bool ExistReceiver
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Receiver.RelationType);
			}
		}

		virtual public void RemoveReceiver()
		{
			Strategy.RemoveCompositeRole(Meta.Receiver.RelationType);
		}


		virtual public ContactMechanism FullfillContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.FullfillContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.FullfillContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistFullfillContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.FullfillContactMechanism.RelationType);
			}
		}

		virtual public void RemoveFullfillContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.FullfillContactMechanism.RelationType);
		}


		virtual public global::System.Decimal? Price 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Price.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Price.RelationType, value);
			}
		}

		virtual public bool ExistPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.Price.RelationType);
			}
		}

		virtual public void RemovePrice()
		{
			Strategy.RemoveUnitRole(Meta.Price.RelationType);
		}


		virtual public Currency Currency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.Currency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Currency.RelationType, value);
			}
		}

		virtual public bool ExistCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Currency.RelationType);
			}
		}

		virtual public void RemoveCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.Currency.RelationType);
		}


		virtual public global::System.DateTime? IssueDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.IssueDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IssueDate.RelationType, value);
			}
		}

		virtual public bool ExistIssueDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.IssueDate.RelationType);
			}
		}

		virtual public void RemoveIssueDate()
		{
			Strategy.RemoveUnitRole(Meta.IssueDate.RelationType);
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.QuoteItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.QuoteItems.RelationType, value);
			}
		}

		virtual public void AddQuoteItem (QuoteItem value)
		{
			Strategy.AddCompositeRole(Meta.QuoteItems.RelationType, value);
		}

		virtual public void RemoveQuoteItem (QuoteItem value)
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItems.RelationType, value);
		}

		virtual public bool ExistQuoteItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.QuoteItems.RelationType);
			}
		}

		virtual public void RemoveQuoteItems()
		{
			Strategy.RemoveCompositeRoles(Meta.QuoteItems.RelationType);
		}


		virtual public global::System.String QuoteNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.QuoteNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuoteNumber.RelationType, value);
			}
		}

		virtual public bool ExistQuoteNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuoteNumber.RelationType);
			}
		}

		virtual public void RemoveQuoteNumber()
		{
			Strategy.RemoveUnitRole(Meta.QuoteNumber.RelationType);
		}


		virtual public Request Request
		{ 
			get
			{
				return (Request) Strategy.GetCompositeRole(Meta.Request.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Request.RelationType, value);
			}
		}

		virtual public bool ExistRequest
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Request.RelationType);
			}
		}

		virtual public void RemoveRequest()
		{
			Strategy.RemoveCompositeRole(Meta.Request.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public StatementOfWork StatementOfWorkWhereCurrentVersion
		{ 
			get
			{
				return (StatementOfWork) Strategy.GetCompositeAssociation(Meta.StatementOfWorkWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistStatementOfWorkWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.StatementOfWorkWhereCurrentVersion.RelationType);
			}
		}


		virtual public StatementOfWork StatementOfWorkWhereAllVersion
		{ 
			get
			{
				return (StatementOfWork) Strategy.GetCompositeAssociation(Meta.StatementOfWorkWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistStatementOfWorkWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.StatementOfWorkWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new StatementOfWorkVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new StatementOfWorkVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new StatementOfWorkVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new StatementOfWorkVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new StatementOfWorkVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new StatementOfWorkVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new StatementOfWorkVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new StatementOfWorkVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new StatementOfWorkVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new StatementOfWorkVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class StatementOfWorkVersionBuilder : Allors.ObjectBuilder<StatementOfWorkVersion> , QuoteVersionBuilder, global::System.IDisposable
	{		
		public StatementOfWorkVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(StatementOfWorkVersion instance)
		{

			instance.InternalComment = this.InternalComment;
		
		
			

			if(this.RequiredResponseDate.HasValue)
			{
				instance.RequiredResponseDate = this.RequiredResponseDate.Value;
			}			
		
		
			

			if(this.ValidFromDate.HasValue)
			{
				instance.ValidFromDate = this.ValidFromDate.Value;
			}			
		
		
			

			if(this.ValidThroughDate.HasValue)
			{
				instance.ValidThroughDate = this.ValidThroughDate.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.Price.HasValue)
			{
				instance.Price = this.Price.Value;
			}			
		
		
			

			if(this.IssueDate.HasValue)
			{
				instance.IssueDate = this.IssueDate.Value;
			}			
		
		

			instance.QuoteNumber = this.QuoteNumber;
		
		
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.QuoteState = this.QuoteState;

		
			if(this.QuoteTerms!=null)
			{
				instance.QuoteTerms = this.QuoteTerms.ToArray();
			}
		

			instance.Receiver = this.Receiver;

		

			instance.FullfillContactMechanism = this.FullfillContactMechanism;

		

			instance.Currency = this.Currency;

		
			if(this.QuoteItems!=null)
			{
				instance.QuoteItems = this.QuoteItems.ToArray();
			}
		

			instance.Request = this.Request;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public QuoteState QuoteState {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithQuoteState(QuoteState value)
		        {
		            if(this.QuoteState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteState = value;
		            return this;
		        }		

				
				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public global::System.DateTime? RequiredResponseDate {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithRequiredResponseDate(global::System.DateTime? value)
		        {
				    if(this.RequiredResponseDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredResponseDate = value;
		            return this;
		        }	

				public global::System.DateTime? ValidFromDate {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithValidFromDate(global::System.DateTime? value)
		        {
				    if(this.ValidFromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ValidFromDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<QuoteTerm> QuoteTerms {get; set;}	

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithQuoteTerm(QuoteTerm value)
		        {
					if(this.QuoteTerms == null)
					{
						this.QuoteTerms = new global::System.Collections.Generic.List<QuoteTerm>(); 
					}
		            this.QuoteTerms.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ValidThroughDate {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithValidThroughDate(global::System.DateTime? value)
		        {
				    if(this.ValidThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ValidThroughDate = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Party Receiver {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithReceiver(Party value)
		        {
		            if(this.Receiver!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Receiver = value;
		            return this;
		        }		

				
				public ContactMechanism FullfillContactMechanism {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithFullfillContactMechanism(ContactMechanism value)
		        {
		            if(this.FullfillContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.FullfillContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? Price {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithPrice(global::System.Decimal? value)
		        {
				    if(this.Price!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Price = value;
		            return this;
		        }	

				public Currency Currency {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public global::System.DateTime? IssueDate {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithIssueDate(global::System.DateTime? value)
		        {
				    if(this.IssueDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IssueDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<QuoteItem> QuoteItems {get; set;}	

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithQuoteItem(QuoteItem value)
		        {
					if(this.QuoteItems == null)
					{
						this.QuoteItems = new global::System.Collections.Generic.List<QuoteItem>(); 
					}
		            this.QuoteItems.Add(value);
		            return this;
		        }		

				
				public global::System.String QuoteNumber {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithQuoteNumber(global::System.String value)
		        {
				    if(this.QuoteNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuoteNumber = value;
		            return this;
		        }	

				public Request Request {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithRequest(Request value)
		        {
		            if(this.Request!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Request = value;
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public StatementOfWorkVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class StatementOfWorkVersions : global::Allors.ObjectsBase<StatementOfWorkVersion>
	{
		public StatementOfWorkVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaStatementOfWorkVersion Meta
		{
			get
			{
				return Allors.Meta.MetaStatementOfWorkVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}