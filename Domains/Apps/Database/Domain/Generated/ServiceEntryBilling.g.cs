// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ServiceEntryBilling : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public ServiceEntryBilling(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaServiceEntryBilling Meta
		{
			get
			{
				return Allors.Meta.MetaServiceEntryBilling.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ServiceEntryBilling Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ServiceEntryBilling) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public ServiceEntry ServiceEntry
		{ 
			get
			{
				return (ServiceEntry) Strategy.GetCompositeRole(Meta.ServiceEntry.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ServiceEntry.RelationType, value);
			}
		}

		virtual public bool ExistServiceEntry
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ServiceEntry.RelationType);
			}
		}

		virtual public void RemoveServiceEntry()
		{
			Strategy.RemoveCompositeRole(Meta.ServiceEntry.RelationType);
		}


		virtual public InvoiceItem InvoiceItem
		{ 
			get
			{
				return (InvoiceItem) Strategy.GetCompositeRole(Meta.InvoiceItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InvoiceItem.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InvoiceItem.RelationType);
			}
		}

		virtual public void RemoveInvoiceItem()
		{
			Strategy.RemoveCompositeRole(Meta.InvoiceItem.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ServiceEntryBillingOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ServiceEntryBillingOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ServiceEntryBillingOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ServiceEntryBillingOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ServiceEntryBillingOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ServiceEntryBillingOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ServiceEntryBillingOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ServiceEntryBillingOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ServiceEntryBillingOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ServiceEntryBillingOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ServiceEntryBillingBuilder : Allors.ObjectBuilder<ServiceEntryBilling> , ObjectBuilder, global::System.IDisposable
	{		
		public ServiceEntryBillingBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ServiceEntryBilling instance)
		{

			instance.ServiceEntry = this.ServiceEntry;

		

			instance.InvoiceItem = this.InvoiceItem;

		
		}


				public ServiceEntry ServiceEntry {get; set;}

				/// <exclude/>
				public ServiceEntryBillingBuilder WithServiceEntry(ServiceEntry value)
		        {
		            if(this.ServiceEntry!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ServiceEntry = value;
		            return this;
		        }		

				
				public InvoiceItem InvoiceItem {get; set;}

				/// <exclude/>
				public ServiceEntryBillingBuilder WithInvoiceItem(InvoiceItem value)
		        {
		            if(this.InvoiceItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InvoiceItem = value;
		            return this;
		        }		

				

	}

	public partial class ServiceEntryBillings : global::Allors.ObjectsBase<ServiceEntryBilling>
	{
		public ServiceEntryBillings(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaServiceEntryBilling Meta
		{
			get
			{
				return Allors.Meta.MetaServiceEntryBilling.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}