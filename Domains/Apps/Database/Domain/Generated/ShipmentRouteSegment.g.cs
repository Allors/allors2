// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ShipmentRouteSegment : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public ShipmentRouteSegment(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaShipmentRouteSegment Meta
		{
			get
			{
				return Allors.Meta.MetaShipmentRouteSegment.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ShipmentRouteSegment Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ShipmentRouteSegment) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal? EndKilometers 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EndKilometers.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EndKilometers.RelationType, value);
			}
		}

		virtual public bool ExistEndKilometers{
			get
			{
				return Strategy.ExistUnitRole(Meta.EndKilometers.RelationType);
			}
		}

		virtual public void RemoveEndKilometers()
		{
			Strategy.RemoveUnitRole(Meta.EndKilometers.RelationType);
		}


		virtual public Facility FromFacility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.FromFacility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.FromFacility.RelationType, value);
			}
		}

		virtual public bool ExistFromFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.FromFacility.RelationType);
			}
		}

		virtual public void RemoveFromFacility()
		{
			Strategy.RemoveCompositeRole(Meta.FromFacility.RelationType);
		}


		virtual public global::System.Decimal? StartKilometers 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.StartKilometers.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.StartKilometers.RelationType, value);
			}
		}

		virtual public bool ExistStartKilometers{
			get
			{
				return Strategy.ExistUnitRole(Meta.StartKilometers.RelationType);
			}
		}

		virtual public void RemoveStartKilometers()
		{
			Strategy.RemoveUnitRole(Meta.StartKilometers.RelationType);
		}


		virtual public ShipmentMethod ShipmentMethod
		{ 
			get
			{
				return (ShipmentMethod) Strategy.GetCompositeRole(Meta.ShipmentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipmentMethod.RelationType, value);
			}
		}

		virtual public bool ExistShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipmentMethod.RelationType);
			}
		}

		virtual public void RemoveShipmentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.ShipmentMethod.RelationType);
		}


		virtual public global::System.DateTime? EstimatedStartDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EstimatedStartDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedStartDateTime.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedStartDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedStartDateTime.RelationType);
			}
		}

		virtual public void RemoveEstimatedStartDateTime()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedStartDateTime.RelationType);
		}


		virtual public Facility ToFacility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.ToFacility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ToFacility.RelationType, value);
			}
		}

		virtual public bool ExistToFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ToFacility.RelationType);
			}
		}

		virtual public void RemoveToFacility()
		{
			Strategy.RemoveCompositeRole(Meta.ToFacility.RelationType);
		}


		virtual public global::System.DateTime? EstimatedArrivalDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EstimatedArrivalDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedArrivalDateTime.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedArrivalDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedArrivalDateTime.RelationType);
			}
		}

		virtual public void RemoveEstimatedArrivalDateTime()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedArrivalDateTime.RelationType);
		}


		virtual public Vehicle Vehicle
		{ 
			get
			{
				return (Vehicle) Strategy.GetCompositeRole(Meta.Vehicle.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Vehicle.RelationType, value);
			}
		}

		virtual public bool ExistVehicle
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Vehicle.RelationType);
			}
		}

		virtual public void RemoveVehicle()
		{
			Strategy.RemoveCompositeRole(Meta.Vehicle.RelationType);
		}


		virtual public global::System.DateTime? ActualArrivalDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualArrivalDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualArrivalDateTime.RelationType, value);
			}
		}

		virtual public bool ExistActualArrivalDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualArrivalDateTime.RelationType);
			}
		}

		virtual public void RemoveActualArrivalDateTime()
		{
			Strategy.RemoveUnitRole(Meta.ActualArrivalDateTime.RelationType);
		}


		virtual public global::System.DateTime? ActualStartDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualStartDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualStartDateTime.RelationType, value);
			}
		}

		virtual public bool ExistActualStartDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualStartDateTime.RelationType);
			}
		}

		virtual public void RemoveActualStartDateTime()
		{
			Strategy.RemoveUnitRole(Meta.ActualStartDateTime.RelationType);
		}


		virtual public Organisation Carrier
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.Carrier.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Carrier.RelationType, value);
			}
		}

		virtual public bool ExistCarrier
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Carrier.RelationType);
			}
		}

		virtual public void RemoveCarrier()
		{
			Strategy.RemoveCompositeRole(Meta.Carrier.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public ShipmentVersion ShipmentVersionWhereShipmentRouteSegment
		{ 
			get
			{
				return (ShipmentVersion) Strategy.GetCompositeAssociation(Meta.ShipmentVersionWhereShipmentRouteSegment.RelationType);
			}
		} 

		virtual public bool ExistShipmentVersionWhereShipmentRouteSegment
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentVersionWhereShipmentRouteSegment.RelationType);
			}
		}


		virtual public Shipment ShipmentWhereShipmentRouteSegment
		{ 
			get
			{
				return (Shipment) Strategy.GetCompositeAssociation(Meta.ShipmentWhereShipmentRouteSegment.RelationType);
			}
		} 

		virtual public bool ExistShipmentWhereShipmentRouteSegment
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentWhereShipmentRouteSegment.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ShipmentRouteSegmentOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ShipmentRouteSegmentOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ShipmentRouteSegmentOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ShipmentRouteSegmentOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ShipmentRouteSegmentOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ShipmentRouteSegmentOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ShipmentRouteSegmentOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ShipmentRouteSegmentOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ShipmentRouteSegmentOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ShipmentRouteSegmentOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ShipmentRouteSegmentBuilder : Allors.ObjectBuilder<ShipmentRouteSegment> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public ShipmentRouteSegmentBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ShipmentRouteSegment instance)
		{
			

			if(this.EndKilometers.HasValue)
			{
				instance.EndKilometers = this.EndKilometers.Value;
			}			
		
		
			

			if(this.StartKilometers.HasValue)
			{
				instance.StartKilometers = this.StartKilometers.Value;
			}			
		
		
			

			if(this.EstimatedStartDateTime.HasValue)
			{
				instance.EstimatedStartDateTime = this.EstimatedStartDateTime.Value;
			}			
		
		
			

			if(this.EstimatedArrivalDateTime.HasValue)
			{
				instance.EstimatedArrivalDateTime = this.EstimatedArrivalDateTime.Value;
			}			
		
		
			

			if(this.ActualArrivalDateTime.HasValue)
			{
				instance.ActualArrivalDateTime = this.ActualArrivalDateTime.Value;
			}			
		
		
			

			if(this.ActualStartDateTime.HasValue)
			{
				instance.ActualStartDateTime = this.ActualStartDateTime.Value;
			}			
		
		

			instance.FromFacility = this.FromFacility;

		

			instance.ShipmentMethod = this.ShipmentMethod;

		

			instance.ToFacility = this.ToFacility;

		

			instance.Vehicle = this.Vehicle;

		

			instance.Carrier = this.Carrier;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Decimal? EndKilometers {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithEndKilometers(global::System.Decimal? value)
		        {
				    if(this.EndKilometers!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EndKilometers = value;
		            return this;
		        }	

				public Facility FromFacility {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithFromFacility(Facility value)
		        {
		            if(this.FromFacility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.FromFacility = value;
		            return this;
		        }		

				
				public global::System.Decimal? StartKilometers {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithStartKilometers(global::System.Decimal? value)
		        {
				    if(this.StartKilometers!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StartKilometers = value;
		            return this;
		        }	

				public ShipmentMethod ShipmentMethod {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithShipmentMethod(ShipmentMethod value)
		        {
		            if(this.ShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.DateTime? EstimatedStartDateTime {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithEstimatedStartDateTime(global::System.DateTime? value)
		        {
				    if(this.EstimatedStartDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedStartDateTime = value;
		            return this;
		        }	

				public Facility ToFacility {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithToFacility(Facility value)
		        {
		            if(this.ToFacility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ToFacility = value;
		            return this;
		        }		

				
				public global::System.DateTime? EstimatedArrivalDateTime {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithEstimatedArrivalDateTime(global::System.DateTime? value)
		        {
				    if(this.EstimatedArrivalDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedArrivalDateTime = value;
		            return this;
		        }	

				public Vehicle Vehicle {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithVehicle(Vehicle value)
		        {
		            if(this.Vehicle!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Vehicle = value;
		            return this;
		        }		

				
				public global::System.DateTime? ActualArrivalDateTime {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithActualArrivalDateTime(global::System.DateTime? value)
		        {
				    if(this.ActualArrivalDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualArrivalDateTime = value;
		            return this;
		        }	

				public global::System.DateTime? ActualStartDateTime {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithActualStartDateTime(global::System.DateTime? value)
		        {
				    if(this.ActualStartDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualStartDateTime = value;
		            return this;
		        }	

				public Organisation Carrier {get; set;}

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithCarrier(Organisation value)
		        {
		            if(this.Carrier!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Carrier = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public ShipmentRouteSegmentBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class ShipmentRouteSegments : global::Allors.ObjectsBase<ShipmentRouteSegment>
	{
		public ShipmentRouteSegments(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaShipmentRouteSegment Meta
		{
			get
			{
				return Allors.Meta.MetaShipmentRouteSegment.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}