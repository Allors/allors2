// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class OwnCreditCard : Allors.IObject , PaymentMethod, FinancialAccount
	{
		private readonly IStrategy strategy;

		public OwnCreditCard(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaOwnCreditCard Meta
		{
			get
			{
				return Allors.Meta.MetaOwnCreditCard.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static OwnCreditCard Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (OwnCreditCard) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner.RelationType, value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner.RelationType);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner.RelationType);
		}


		virtual public CreditCard CreditCard
		{ 
			get
			{
				return (CreditCard) Strategy.GetCompositeRole(Meta.CreditCard.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreditCard.RelationType, value);
			}
		}

		virtual public bool ExistCreditCard
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreditCard.RelationType);
			}
		}

		virtual public void RemoveCreditCard()
		{
			Strategy.RemoveCompositeRole(Meta.CreditCard.RelationType);
		}


		virtual public global::System.Decimal? BalanceLimit 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.BalanceLimit.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BalanceLimit.RelationType, value);
			}
		}

		virtual public bool ExistBalanceLimit{
			get
			{
				return Strategy.ExistUnitRole(Meta.BalanceLimit.RelationType);
			}
		}

		virtual public void RemoveBalanceLimit()
		{
			Strategy.RemoveUnitRole(Meta.BalanceLimit.RelationType);
		}


		virtual public global::System.Decimal CurrentBalance 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.CurrentBalance.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CurrentBalance.RelationType, value);
			}
		}

		virtual public bool ExistCurrentBalance{
			get
			{
				return Strategy.ExistUnitRole(Meta.CurrentBalance.RelationType);
			}
		}

		virtual public void RemoveCurrentBalance()
		{
			Strategy.RemoveUnitRole(Meta.CurrentBalance.RelationType);
		}


		virtual public Journal Journal
		{ 
			get
			{
				return (Journal) Strategy.GetCompositeRole(Meta.Journal.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Journal.RelationType, value);
			}
		}

		virtual public bool ExistJournal
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Journal.RelationType);
			}
		}

		virtual public void RemoveJournal()
		{
			Strategy.RemoveCompositeRole(Meta.Journal.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public OrganisationGlAccount GlPaymentInTransit
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.GlPaymentInTransit.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GlPaymentInTransit.RelationType, value);
			}
		}

		virtual public bool ExistGlPaymentInTransit
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GlPaymentInTransit.RelationType);
			}
		}

		virtual public void RemoveGlPaymentInTransit()
		{
			Strategy.RemoveCompositeRole(Meta.GlPaymentInTransit.RelationType);
		}


		virtual public global::System.String Remarks 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Remarks.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Remarks.RelationType, value);
			}
		}

		virtual public bool ExistRemarks{
			get
			{
				return Strategy.ExistUnitRole(Meta.Remarks.RelationType);
			}
		}

		virtual public void RemoveRemarks()
		{
			Strategy.RemoveUnitRole(Meta.Remarks.RelationType);
		}


		virtual public OrganisationGlAccount GeneralLedgerAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.GeneralLedgerAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralLedgerAccount.RelationType, value);
			}
		}

		virtual public bool ExistGeneralLedgerAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralLedgerAccount.RelationType);
			}
		}

		virtual public void RemoveGeneralLedgerAccount()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralLedgerAccount.RelationType);
		}


		virtual public global::System.Boolean IsActive 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.IsActive.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive.RelationType, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive.RelationType);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::Allors.Extent<FinancialAccountTransaction> FinancialAccountTransactions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FinancialAccountTransactions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FinancialAccountTransactions.RelationType, value);
			}
		}

		virtual public void AddFinancialAccountTransaction (FinancialAccountTransaction value)
		{
			Strategy.AddCompositeRole(Meta.FinancialAccountTransactions.RelationType, value);
		}

		virtual public void RemoveFinancialAccountTransaction (FinancialAccountTransaction value)
		{
			Strategy.RemoveCompositeRole(Meta.FinancialAccountTransactions.RelationType, value);
		}

		virtual public bool ExistFinancialAccountTransactions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FinancialAccountTransactions.RelationType);
			}
		}

		virtual public void RemoveFinancialAccountTransactions()
		{
			Strategy.RemoveCompositeRoles(Meta.FinancialAccountTransactions.RelationType);
		}



		virtual public global::Allors.Extent<AmountDue> AmountDuesWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AmountDuesWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistAmountDuesWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AmountDuesWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<CustomerShipment> CustomerShipmentsWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CustomerShipmentsWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistCustomerShipmentsWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CustomerShipmentsWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<CustomerShipmentVersion> CustomerShipmentVersionsWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CustomerShipmentVersionsWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistCustomerShipmentVersionsWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CustomerShipmentVersionsWherePaymentMethod.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActivePaymentMethod
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActivePaymentMethod.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActivePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActivePaymentMethod.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereDefaultPaymentMethod
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereDefaultPaymentMethod.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereDefaultPaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<PayrollPreference> PayrollPreferencesWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PayrollPreferencesWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistPayrollPreferencesWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PayrollPreferencesWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<Store> StoresWhereDefaultPaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoresWhereDefaultPaymentMethod.RelationType);
			}
		}

		virtual public bool ExistStoresWhereDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoresWhereDefaultPaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<Store> StoresWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoresWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistStoresWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoresWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereDefaultPaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereDefaultPaymentMethod.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereDefaultPaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereDefaultPaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereDefaultPaymentMethod.RelationType);
			}
		}

		virtual public bool ExistPartiesWhereDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereDefaultPaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<Payment> PaymentsWherePaymentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentsWherePaymentMethod.RelationType);
			}
		}

		virtual public bool ExistPaymentsWherePaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentsWherePaymentMethod.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new OwnCreditCardOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OwnCreditCardOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OwnCreditCardOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OwnCreditCardOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OwnCreditCardOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OwnCreditCardOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OwnCreditCardOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OwnCreditCardOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OwnCreditCardOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OwnCreditCardOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class OwnCreditCardBuilder : Allors.ObjectBuilder<OwnCreditCard> , PaymentMethodBuilder, FinancialAccountBuilder, global::System.IDisposable
	{		
		public OwnCreditCardBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(OwnCreditCard instance)
		{
			

			if(this.BalanceLimit.HasValue)
			{
				instance.BalanceLimit = this.BalanceLimit.Value;
			}			
		
				

			instance.Description = this.Description;
		
		

			instance.Remarks = this.Remarks;
		
		
			

			if(this.IsActive.HasValue)
			{
				instance.IsActive = this.IsActive.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Owner = this.Owner;

		

			instance.CreditCard = this.CreditCard;

		

			instance.Journal = this.Journal;

		

			instance.GlPaymentInTransit = this.GlPaymentInTransit;

		

			instance.GeneralLedgerAccount = this.GeneralLedgerAccount;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
			if(this.FinancialAccountTransactions!=null)
			{
				instance.FinancialAccountTransactions = this.FinancialAccountTransactions.ToArray();
			}
		
		}


				public Person Owner {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public CreditCard CreditCard {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithCreditCard(CreditCard value)
		        {
		            if(this.CreditCard!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreditCard = value;
		            return this;
		        }		

				
				public global::System.Decimal? BalanceLimit {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithBalanceLimit(global::System.Decimal? value)
		        {
				    if(this.BalanceLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BalanceLimit = value;
		            return this;
		        }	

				public Journal Journal {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithJournal(Journal value)
		        {
		            if(this.Journal!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Journal = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public OrganisationGlAccount GlPaymentInTransit {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithGlPaymentInTransit(OrganisationGlAccount value)
		        {
		            if(this.GlPaymentInTransit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GlPaymentInTransit = value;
		            return this;
		        }		

				
				public global::System.String Remarks {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithRemarks(global::System.String value)
		        {
				    if(this.Remarks!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Remarks = value;
		            return this;
		        }	

				public OrganisationGlAccount GeneralLedgerAccount {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithGeneralLedgerAccount(OrganisationGlAccount value)
		        {
		            if(this.GeneralLedgerAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccount = value;
		            return this;
		        }		

				
				public global::System.Boolean? IsActive {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithIsActive(global::System.Boolean? value)
		        {
				    if(this.IsActive!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsActive = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OwnCreditCardBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OwnCreditCardBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OwnCreditCardBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<FinancialAccountTransaction> FinancialAccountTransactions {get; set;}	

				/// <exclude/>
				public OwnCreditCardBuilder WithFinancialAccountTransaction(FinancialAccountTransaction value)
		        {
					if(this.FinancialAccountTransactions == null)
					{
						this.FinancialAccountTransactions = new global::System.Collections.Generic.List<FinancialAccountTransaction>(); 
					}
		            this.FinancialAccountTransactions.Add(value);
		            return this;
		        }		

				

	}

	public partial class OwnCreditCards : global::Allors.ObjectsBase<OwnCreditCard>
	{
		public OwnCreditCards(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaOwnCreditCard Meta
		{
			get
			{
				return Allors.Meta.MetaOwnCreditCard.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}