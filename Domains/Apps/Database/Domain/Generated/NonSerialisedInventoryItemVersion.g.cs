// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class NonSerialisedInventoryItemVersion : Allors.IObject , InventoryItemVersion
	{
		private readonly IStrategy strategy;

		public NonSerialisedInventoryItemVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaNonSerialisedInventoryItemVersion Meta
		{
			get
			{
				return Allors.Meta.MetaNonSerialisedInventoryItemVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static NonSerialisedInventoryItemVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (NonSerialisedInventoryItemVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public NonSerialisedInventoryItemState NonSerialisedInventoryItemState
		{ 
			get
			{
				return (NonSerialisedInventoryItemState) Strategy.GetCompositeRole(Meta.NonSerialisedInventoryItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NonSerialisedInventoryItemState.RelationType, value);
			}
		}

		virtual public bool ExistNonSerialisedInventoryItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NonSerialisedInventoryItemState.RelationType);
			}
		}

		virtual public void RemoveNonSerialisedInventoryItemState()
		{
			Strategy.RemoveCompositeRole(Meta.NonSerialisedInventoryItemState.RelationType);
		}


		virtual public global::System.Decimal QuantityCommittedOut 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityCommittedOut.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityCommittedOut.RelationType, value);
			}
		}

		virtual public bool ExistQuantityCommittedOut{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityCommittedOut.RelationType);
			}
		}

		virtual public void RemoveQuantityCommittedOut()
		{
			Strategy.RemoveUnitRole(Meta.QuantityCommittedOut.RelationType);
		}


		virtual public global::System.Decimal QuantityOnHand 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityOnHand.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityOnHand.RelationType, value);
			}
		}

		virtual public bool ExistQuantityOnHand{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityOnHand.RelationType);
			}
		}

		virtual public void RemoveQuantityOnHand()
		{
			Strategy.RemoveUnitRole(Meta.QuantityOnHand.RelationType);
		}


		virtual public global::System.Decimal PreviousQuantityOnHand 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.PreviousQuantityOnHand.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PreviousQuantityOnHand.RelationType, value);
			}
		}

		virtual public bool ExistPreviousQuantityOnHand{
			get
			{
				return Strategy.ExistUnitRole(Meta.PreviousQuantityOnHand.RelationType);
			}
		}

		virtual public void RemovePreviousQuantityOnHand()
		{
			Strategy.RemoveUnitRole(Meta.PreviousQuantityOnHand.RelationType);
		}


		virtual public global::System.Decimal AvailableToPromise 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AvailableToPromise.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AvailableToPromise.RelationType, value);
			}
		}

		virtual public bool ExistAvailableToPromise{
			get
			{
				return Strategy.ExistUnitRole(Meta.AvailableToPromise.RelationType);
			}
		}

		virtual public void RemoveAvailableToPromise()
		{
			Strategy.RemoveUnitRole(Meta.AvailableToPromise.RelationType);
		}


		virtual public global::System.Decimal QuantityExpectedIn 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityExpectedIn.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityExpectedIn.RelationType, value);
			}
		}

		virtual public bool ExistQuantityExpectedIn{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityExpectedIn.RelationType);
			}
		}

		virtual public void RemoveQuantityExpectedIn()
		{
			Strategy.RemoveUnitRole(Meta.QuantityExpectedIn.RelationType);
		}


		virtual public global::Allors.Extent<ProductCharacteristicValue> ProductCharacteristicValues
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ProductCharacteristicValues.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ProductCharacteristicValues.RelationType, value);
			}
		}

		virtual public void AddProductCharacteristicValue (ProductCharacteristicValue value)
		{
			Strategy.AddCompositeRole(Meta.ProductCharacteristicValues.RelationType, value);
		}

		virtual public void RemoveProductCharacteristicValue (ProductCharacteristicValue value)
		{
			Strategy.RemoveCompositeRole(Meta.ProductCharacteristicValues.RelationType, value);
		}

		virtual public bool ExistProductCharacteristicValues
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ProductCharacteristicValues.RelationType);
			}
		}

		virtual public void RemoveProductCharacteristicValues()
		{
			Strategy.RemoveCompositeRoles(Meta.ProductCharacteristicValues.RelationType);
		}


		virtual public global::Allors.Extent<InventoryItemVariance> InventoryItemVariances
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItemVariances.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItemVariances.RelationType, value);
			}
		}

		virtual public void AddInventoryItemVariance (InventoryItemVariance value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItemVariances.RelationType, value);
		}

		virtual public void RemoveInventoryItemVariance (InventoryItemVariance value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItemVariances.RelationType, value);
		}

		virtual public bool ExistInventoryItemVariances
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItemVariances.RelationType);
			}
		}

		virtual public void RemoveInventoryItemVariances()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItemVariances.RelationType);
		}


		virtual public Part Part
		{ 
			get
			{
				return (Part) Strategy.GetCompositeRole(Meta.Part.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Part.RelationType, value);
			}
		}

		virtual public bool ExistPart
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Part.RelationType);
			}
		}

		virtual public void RemovePart()
		{
			Strategy.RemoveCompositeRole(Meta.Part.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public Lot Lot
		{ 
			get
			{
				return (Lot) Strategy.GetCompositeRole(Meta.Lot.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Lot.RelationType, value);
			}
		}

		virtual public bool ExistLot
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Lot.RelationType);
			}
		}

		virtual public void RemoveLot()
		{
			Strategy.RemoveCompositeRole(Meta.Lot.RelationType);
		}


		virtual public global::System.String Sku 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Sku.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Sku.RelationType, value);
			}
		}

		virtual public bool ExistSku{
			get
			{
				return Strategy.ExistUnitRole(Meta.Sku.RelationType);
			}
		}

		virtual public void RemoveSku()
		{
			Strategy.RemoveUnitRole(Meta.Sku.RelationType);
		}


		virtual public UnitOfMeasure UnitOfMeasure
		{ 
			get
			{
				return (UnitOfMeasure) Strategy.GetCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.UnitOfMeasure.RelationType, value);
			}
		}

		virtual public bool ExistUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasure()
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasure.RelationType);
		}


		virtual public global::Allors.Extent<ProductCategory> DerivedProductCategories
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DerivedProductCategories.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DerivedProductCategories.RelationType, value);
			}
		}

		virtual public void AddDerivedProductCategory (ProductCategory value)
		{
			Strategy.AddCompositeRole(Meta.DerivedProductCategories.RelationType, value);
		}

		virtual public void RemoveDerivedProductCategory (ProductCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.DerivedProductCategories.RelationType, value);
		}

		virtual public bool ExistDerivedProductCategories
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DerivedProductCategories.RelationType);
			}
		}

		virtual public void RemoveDerivedProductCategories()
		{
			Strategy.RemoveCompositeRoles(Meta.DerivedProductCategories.RelationType);
		}


		virtual public Good Good
		{ 
			get
			{
				return (Good) Strategy.GetCompositeRole(Meta.Good.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Good.RelationType, value);
			}
		}

		virtual public bool ExistGood
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Good.RelationType);
			}
		}

		virtual public void RemoveGood()
		{
			Strategy.RemoveCompositeRole(Meta.Good.RelationType);
		}


		virtual public ProductType ProductType
		{ 
			get
			{
				return (ProductType) Strategy.GetCompositeRole(Meta.ProductType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductType.RelationType, value);
			}
		}

		virtual public bool ExistProductType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductType.RelationType);
			}
		}

		virtual public void RemoveProductType()
		{
			Strategy.RemoveCompositeRole(Meta.ProductType.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public NonSerialisedInventoryItem NonSerialisedInventoryItemWhereCurrentVersion
		{ 
			get
			{
				return (NonSerialisedInventoryItem) Strategy.GetCompositeAssociation(Meta.NonSerialisedInventoryItemWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistNonSerialisedInventoryItemWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.NonSerialisedInventoryItemWhereCurrentVersion.RelationType);
			}
		}


		virtual public NonSerialisedInventoryItem NonSerialisedInventoryItemWhereAllVersion
		{ 
			get
			{
				return (NonSerialisedInventoryItem) Strategy.GetCompositeAssociation(Meta.NonSerialisedInventoryItemWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistNonSerialisedInventoryItemWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.NonSerialisedInventoryItemWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new NonSerialisedInventoryItemVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new NonSerialisedInventoryItemVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new NonSerialisedInventoryItemVersionDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new NonSerialisedInventoryItemVersionDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class NonSerialisedInventoryItemVersionBuilder : Allors.ObjectBuilder<NonSerialisedInventoryItemVersion> , InventoryItemVersionBuilder, global::System.IDisposable
	{		
		public NonSerialisedInventoryItemVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(NonSerialisedInventoryItemVersion instance)
		{
						
			

			if(this.AvailableToPromise.HasValue)
			{
				instance.AvailableToPromise = this.AvailableToPromise.Value;
			}			
		
								
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.NonSerialisedInventoryItemState = this.NonSerialisedInventoryItemState;

		
			if(this.ProductCharacteristicValues!=null)
			{
				instance.ProductCharacteristicValues = this.ProductCharacteristicValues.ToArray();
			}
		
			if(this.InventoryItemVariances!=null)
			{
				instance.InventoryItemVariances = this.InventoryItemVariances.ToArray();
			}
		

			instance.Part = this.Part;

		

			instance.Lot = this.Lot;

						

			instance.Good = this.Good;

		

			instance.ProductType = this.ProductType;

		

			instance.Facility = this.Facility;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public NonSerialisedInventoryItemState NonSerialisedInventoryItemState {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithNonSerialisedInventoryItemState(NonSerialisedInventoryItemState value)
		        {
		            if(this.NonSerialisedInventoryItemState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NonSerialisedInventoryItemState = value;
		            return this;
		        }		

				
				public global::System.Decimal? AvailableToPromise {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithAvailableToPromise(global::System.Decimal? value)
		        {
				    if(this.AvailableToPromise!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AvailableToPromise = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ProductCharacteristicValue> ProductCharacteristicValues {get; set;}	

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithProductCharacteristicValue(ProductCharacteristicValue value)
		        {
					if(this.ProductCharacteristicValues == null)
					{
						this.ProductCharacteristicValues = new global::System.Collections.Generic.List<ProductCharacteristicValue>(); 
					}
		            this.ProductCharacteristicValues.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InventoryItemVariance> InventoryItemVariances {get; set;}	

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithInventoryItemVariance(InventoryItemVariance value)
		        {
					if(this.InventoryItemVariances == null)
					{
						this.InventoryItemVariances = new global::System.Collections.Generic.List<InventoryItemVariance>(); 
					}
		            this.InventoryItemVariances.Add(value);
		            return this;
		        }		

				
				public Part Part {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public Lot Lot {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithLot(Lot value)
		        {
		            if(this.Lot!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Lot = value;
		            return this;
		        }		

				
				public Good Good {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithGood(Good value)
		        {
		            if(this.Good!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Good = value;
		            return this;
		        }		

				
				public ProductType ProductType {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithProductType(ProductType value)
		        {
		            if(this.ProductType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductType = value;
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public NonSerialisedInventoryItemVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class NonSerialisedInventoryItemVersions : global::Allors.ObjectsBase<NonSerialisedInventoryItemVersion>
	{
		public NonSerialisedInventoryItemVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaNonSerialisedInventoryItemVersion Meta
		{
			get
			{
				return Allors.Meta.MetaNonSerialisedInventoryItemVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}