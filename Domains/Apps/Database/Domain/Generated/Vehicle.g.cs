// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Vehicle : Allors.IObject , FixedAsset
	{
		private readonly IStrategy strategy;

		public Vehicle(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaVehicle Meta
		{
			get
			{
				return Allors.Meta.MetaVehicle.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Vehicle Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Vehicle) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.DateTime? LastServiceDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastServiceDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastServiceDate.RelationType, value);
			}
		}

		virtual public bool ExistLastServiceDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastServiceDate.RelationType);
			}
		}

		virtual public void RemoveLastServiceDate()
		{
			Strategy.RemoveUnitRole(Meta.LastServiceDate.RelationType);
		}


		virtual public global::System.DateTime? AcquiredDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AcquiredDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AcquiredDate.RelationType, value);
			}
		}

		virtual public bool ExistAcquiredDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.AcquiredDate.RelationType);
			}
		}

		virtual public void RemoveAcquiredDate()
		{
			Strategy.RemoveUnitRole(Meta.AcquiredDate.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Decimal? ProductionCapacity 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ProductionCapacity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ProductionCapacity.RelationType, value);
			}
		}

		virtual public bool ExistProductionCapacity{
			get
			{
				return Strategy.ExistUnitRole(Meta.ProductionCapacity.RelationType);
			}
		}

		virtual public void RemoveProductionCapacity()
		{
			Strategy.RemoveUnitRole(Meta.ProductionCapacity.RelationType);
		}


		virtual public global::System.DateTime? NextServiceDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.NextServiceDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NextServiceDate.RelationType, value);
			}
		}

		virtual public bool ExistNextServiceDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.NextServiceDate.RelationType);
			}
		}

		virtual public void RemoveNextServiceDate()
		{
			Strategy.RemoveUnitRole(Meta.NextServiceDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereVehicle
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereVehicle.RelationType);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereVehicle
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereVehicle.RelationType);
			}
		}


		virtual public global::Allors.Extent<Depreciation> DepreciationsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.DepreciationsWhereFixedAsset.RelationType);
			}
		}

		virtual public bool ExistDepreciationsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.DepreciationsWhereFixedAsset.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyFixedAssetAssignment> PartyFixedAssetAssignmentsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereFixedAsset.RelationType);
			}
		}

		virtual public bool ExistPartyFixedAssetAssignmentsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereFixedAsset.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortFixedAssetAssignment> WorkEffortFixedAssetAssignmentsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereFixedAsset.RelationType);
			}
		}

		virtual public bool ExistWorkEffortFixedAssetAssignmentsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereFixedAsset.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortFixedAssetStandard> WorkEffortFixedAssetStandardsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortFixedAssetStandardsWhereFixedAsset.RelationType);
			}
		}

		virtual public bool ExistWorkEffortFixedAssetStandardsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortFixedAssetStandardsWhereFixedAsset.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortType> WorkEffortTypesWhereFixedAssetToRepair
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortTypesWhereFixedAssetToRepair.RelationType);
			}
		}

		virtual public bool ExistWorkEffortTypesWhereFixedAssetToRepair
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortTypesWhereFixedAssetToRepair.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new VehicleOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new VehicleOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new VehicleOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new VehicleOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new VehicleOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new VehicleOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new VehicleOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new VehicleOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new VehicleOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new VehicleOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class VehicleBuilder : Allors.ObjectBuilder<Vehicle> , FixedAssetBuilder, global::System.IDisposable
	{		
		public VehicleBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Vehicle instance)
		{

			instance.Name = this.Name;
		
		
			

			if(this.LastServiceDate.HasValue)
			{
				instance.LastServiceDate = this.LastServiceDate.Value;
			}			
		
		
			

			if(this.AcquiredDate.HasValue)
			{
				instance.AcquiredDate = this.AcquiredDate.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.ProductionCapacity.HasValue)
			{
				instance.ProductionCapacity = this.ProductionCapacity.Value;
			}			
		
		
			

			if(this.NextServiceDate.HasValue)
			{
				instance.NextServiceDate = this.NextServiceDate.Value;
			}			
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Name {get; set;}

				/// <exclude/>
				public VehicleBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.DateTime? LastServiceDate {get; set;}

				/// <exclude/>
				public VehicleBuilder WithLastServiceDate(global::System.DateTime? value)
		        {
				    if(this.LastServiceDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastServiceDate = value;
		            return this;
		        }	

				public global::System.DateTime? AcquiredDate {get; set;}

				/// <exclude/>
				public VehicleBuilder WithAcquiredDate(global::System.DateTime? value)
		        {
				    if(this.AcquiredDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AcquiredDate = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public VehicleBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Decimal? ProductionCapacity {get; set;}

				/// <exclude/>
				public VehicleBuilder WithProductionCapacity(global::System.Decimal? value)
		        {
				    if(this.ProductionCapacity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ProductionCapacity = value;
		            return this;
		        }	

				public global::System.DateTime? NextServiceDate {get; set;}

				/// <exclude/>
				public VehicleBuilder WithNextServiceDate(global::System.DateTime? value)
		        {
				    if(this.NextServiceDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NextServiceDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public VehicleBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public VehicleBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Vehicles : global::Allors.ObjectsBase<Vehicle>
	{
		public Vehicles(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaVehicle Meta
		{
			get
			{
				return Allors.Meta.MetaVehicle.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}