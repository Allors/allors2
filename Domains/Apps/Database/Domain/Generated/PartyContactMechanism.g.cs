// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PartyContactMechanism : Allors.IObject , Commentable, Auditable, Period, Deletable
	{
		private readonly IStrategy strategy;

		public PartyContactMechanism(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPartyContactMechanism Meta
		{
			get
			{
				return Allors.Meta.MetaPartyContactMechanism.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PartyContactMechanism Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PartyContactMechanism) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<ContactMechanismPurpose> ContactPurposes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ContactPurposes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ContactPurposes.RelationType, value);
			}
		}

		virtual public void AddContactPurpose (ContactMechanismPurpose value)
		{
			Strategy.AddCompositeRole(Meta.ContactPurposes.RelationType, value);
		}

		virtual public void RemoveContactPurpose (ContactMechanismPurpose value)
		{
			Strategy.RemoveCompositeRole(Meta.ContactPurposes.RelationType, value);
		}

		virtual public bool ExistContactPurposes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ContactPurposes.RelationType);
			}
		}

		virtual public void RemoveContactPurposes()
		{
			Strategy.RemoveCompositeRoles(Meta.ContactPurposes.RelationType);
		}


		virtual public ContactMechanism ContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.ContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactMechanism.RelationType);
			}
		}

		virtual public void RemoveContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.ContactMechanism.RelationType);
		}


		virtual public global::System.Boolean UseAsDefault 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.UseAsDefault.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UseAsDefault.RelationType, value);
			}
		}

		virtual public bool ExistUseAsDefault{
			get
			{
				return Strategy.ExistUnitRole(Meta.UseAsDefault.RelationType);
			}
		}

		virtual public void RemoveUseAsDefault()
		{
			Strategy.RemoveUnitRole(Meta.UseAsDefault.RelationType);
		}


		virtual public global::System.Boolean? NonSolicitationIndicator 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.NonSolicitationIndicator.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NonSolicitationIndicator.RelationType, value);
			}
		}

		virtual public bool ExistNonSolicitationIndicator{
			get
			{
				return Strategy.ExistUnitRole(Meta.NonSolicitationIndicator.RelationType);
			}
		}

		virtual public void RemoveNonSolicitationIndicator()
		{
			Strategy.RemoveUnitRole(Meta.NonSolicitationIndicator.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.DateTime FromDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.FromDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FromDate.RelationType, value);
			}
		}

		virtual public bool ExistFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.FromDate.RelationType);
			}
		}

		virtual public void RemoveFromDate()
		{
			Strategy.RemoveUnitRole(Meta.FromDate.RelationType);
		}


		virtual public global::System.DateTime? ThroughDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ThroughDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ThroughDate.RelationType, value);
			}
		}

		virtual public bool ExistThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ThroughDate.RelationType);
			}
		}

		virtual public void RemoveThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ThroughDate.RelationType);
		}



		virtual public PartyVersion PartyVersionWhereInactivePartyContactMechanism
		{ 
			get
			{
				return (PartyVersion) Strategy.GetCompositeAssociation(Meta.PartyVersionWhereInactivePartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyVersionWhereInactivePartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyVersionWhereInactivePartyContactMechanism.RelationType);
			}
		}


		virtual public PartyVersion PartyVersionWherePartyContactMechanism
		{ 
			get
			{
				return (PartyVersion) Strategy.GetCompositeAssociation(Meta.PartyVersionWherePartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyVersionWherePartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyVersionWherePartyContactMechanism.RelationType);
			}
		}


		virtual public PartyVersion PartyVersionWhereCurrentPartyContactMechanism
		{ 
			get
			{
				return (PartyVersion) Strategy.GetCompositeAssociation(Meta.PartyVersionWhereCurrentPartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyVersionWhereCurrentPartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyVersionWhereCurrentPartyContactMechanism.RelationType);
			}
		}


		virtual public Party PartyWhereInactivePartyContactMechanism
		{ 
			get
			{
				return (Party) Strategy.GetCompositeAssociation(Meta.PartyWhereInactivePartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyWhereInactivePartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyWhereInactivePartyContactMechanism.RelationType);
			}
		}


		virtual public Party PartyWherePartyContactMechanism
		{ 
			get
			{
				return (Party) Strategy.GetCompositeAssociation(Meta.PartyWherePartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyWherePartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyWherePartyContactMechanism.RelationType);
			}
		}


		virtual public Party PartyWhereCurrentPartyContactMechanism
		{ 
			get
			{
				return (Party) Strategy.GetCompositeAssociation(Meta.PartyWhereCurrentPartyContactMechanism.RelationType);
			}
		} 

		virtual public bool ExistPartyWhereCurrentPartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyWhereCurrentPartyContactMechanism.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PartyContactMechanismOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PartyContactMechanismOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PartyContactMechanismOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PartyContactMechanismOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PartyContactMechanismOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PartyContactMechanismOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PartyContactMechanismOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PartyContactMechanismOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PartyContactMechanismOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PartyContactMechanismOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PartyContactMechanismDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PartyContactMechanismDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PartyContactMechanismBuilder : Allors.ObjectBuilder<PartyContactMechanism> , CommentableBuilder, AuditableBuilder, PeriodBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public PartyContactMechanismBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PartyContactMechanism instance)
		{
			

			if(this.UseAsDefault.HasValue)
			{
				instance.UseAsDefault = this.UseAsDefault.Value;
			}			
		
		
			

			if(this.NonSolicitationIndicator.HasValue)
			{
				instance.NonSolicitationIndicator = this.NonSolicitationIndicator.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
			

			if(this.FromDate.HasValue)
			{
				instance.FromDate = this.FromDate.Value;
			}			
		
		
			

			if(this.ThroughDate.HasValue)
			{
				instance.ThroughDate = this.ThroughDate.Value;
			}			
		
		
			if(this.ContactPurposes!=null)
			{
				instance.ContactPurposes = this.ContactPurposes.ToArray();
			}
		

			instance.ContactMechanism = this.ContactMechanism;

		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<ContactMechanismPurpose> ContactPurposes {get; set;}	

				/// <exclude/>
				public PartyContactMechanismBuilder WithContactPurpose(ContactMechanismPurpose value)
		        {
					if(this.ContactPurposes == null)
					{
						this.ContactPurposes = new global::System.Collections.Generic.List<ContactMechanismPurpose>(); 
					}
		            this.ContactPurposes.Add(value);
		            return this;
		        }		

				
				public ContactMechanism ContactMechanism {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithContactMechanism(ContactMechanism value)
		        {
		            if(this.ContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Boolean? UseAsDefault {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithUseAsDefault(global::System.Boolean? value)
		        {
				    if(this.UseAsDefault!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UseAsDefault = value;
		            return this;
		        }	

				public global::System.Boolean? NonSolicitationIndicator {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithNonSolicitationIndicator(global::System.Boolean? value)
		        {
				    if(this.NonSolicitationIndicator!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NonSolicitationIndicator = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PartyContactMechanismBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PartyContactMechanismBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public PartyContactMechanismBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	


	}

	public partial class PartyContactMechanisms : global::Allors.ObjectsBase<PartyContactMechanism>
	{
		public PartyContactMechanisms(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPartyContactMechanism Meta
		{
			get
			{
				return Allors.Meta.MetaPartyContactMechanism.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}