// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ItemIssuance : Allors.IObject , Deletable, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public ItemIssuance(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaItemIssuance Meta
		{
			get
			{
				return Allors.Meta.MetaItemIssuance.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ItemIssuance Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ItemIssuance) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.DateTime? IssuanceDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.IssuanceDateTime.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IssuanceDateTime.RelationType, value);
			}
		}

		virtual public bool ExistIssuanceDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.IssuanceDateTime.RelationType);
			}
		}

		virtual public void RemoveIssuanceDateTime()
		{
			Strategy.RemoveUnitRole(Meta.IssuanceDateTime.RelationType);
		}


		virtual public InventoryItem InventoryItem
		{ 
			get
			{
				return (InventoryItem) Strategy.GetCompositeRole(Meta.InventoryItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InventoryItem.RelationType, value);
			}
		}

		virtual public bool ExistInventoryItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InventoryItem.RelationType);
			}
		}

		virtual public void RemoveInventoryItem()
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItem.RelationType);
		}


		virtual public global::System.Decimal Quantity 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public ShipmentItem ShipmentItem
		{ 
			get
			{
				return (ShipmentItem) Strategy.GetCompositeRole(Meta.ShipmentItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipmentItem.RelationType, value);
			}
		}

		virtual public bool ExistShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipmentItem.RelationType);
			}
		}

		virtual public void RemoveShipmentItem()
		{
			Strategy.RemoveCompositeRole(Meta.ShipmentItem.RelationType);
		}


		virtual public PickListItem PickListItem
		{ 
			get
			{
				return (PickListItem) Strategy.GetCompositeRole(Meta.PickListItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PickListItem.RelationType, value);
			}
		}

		virtual public bool ExistPickListItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PickListItem.RelationType);
			}
		}

		virtual public void RemovePickListItem()
		{
			Strategy.RemoveCompositeRole(Meta.PickListItem.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public DeletableDelete Delete()
		{ 
			var method = new ItemIssuanceDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new ItemIssuanceDelete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new ItemIssuanceOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ItemIssuanceOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ItemIssuanceOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ItemIssuanceOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ItemIssuanceOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ItemIssuanceOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ItemIssuanceOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ItemIssuanceOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ItemIssuanceOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ItemIssuanceOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ItemIssuanceBuilder : Allors.ObjectBuilder<ItemIssuance> , DeletableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public ItemIssuanceBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ItemIssuance instance)
		{
			

			if(this.IssuanceDateTime.HasValue)
			{
				instance.IssuanceDateTime = this.IssuanceDateTime.Value;
			}			
		
		
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		

			instance.InventoryItem = this.InventoryItem;

		

			instance.ShipmentItem = this.ShipmentItem;

		

			instance.PickListItem = this.PickListItem;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.DateTime? IssuanceDateTime {get; set;}

				/// <exclude/>
				public ItemIssuanceBuilder WithIssuanceDateTime(global::System.DateTime? value)
		        {
				    if(this.IssuanceDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IssuanceDateTime = value;
		            return this;
		        }	

				public InventoryItem InventoryItem {get; set;}

				/// <exclude/>
				public ItemIssuanceBuilder WithInventoryItem(InventoryItem value)
		        {
		            if(this.InventoryItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InventoryItem = value;
		            return this;
		        }		

				
				public global::System.Decimal? Quantity {get; set;}

				/// <exclude/>
				public ItemIssuanceBuilder WithQuantity(global::System.Decimal? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public ShipmentItem ShipmentItem {get; set;}

				/// <exclude/>
				public ItemIssuanceBuilder WithShipmentItem(ShipmentItem value)
		        {
		            if(this.ShipmentItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipmentItem = value;
		            return this;
		        }		

				
				public PickListItem PickListItem {get; set;}

				/// <exclude/>
				public ItemIssuanceBuilder WithPickListItem(PickListItem value)
		        {
		            if(this.PickListItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PickListItem = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public ItemIssuanceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public ItemIssuanceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class ItemIssuances : global::Allors.ObjectsBase<ItemIssuance>
	{
		public ItemIssuances(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaItemIssuance Meta
		{
			get
			{
				return Allors.Meta.MetaItemIssuance.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}