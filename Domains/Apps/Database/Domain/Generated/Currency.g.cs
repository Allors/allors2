// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Currency : Allors.IObject , IUnitOfMeasure
	{
		private readonly IStrategy strategy;

		public Currency(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaCurrency Meta
		{
			get
			{
				return Allors.Meta.MetaCurrency.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Currency Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Currency) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IsoCode.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsoCode.RelationType, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsoCode.RelationType);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(Meta.IsoCode.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames.RelationType, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames.RelationType, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames.RelationType, value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames.RelationType);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.UnitOfMeasureConversions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.UnitOfMeasureConversions.RelationType, value);
			}
		}

		virtual public void AddUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.AddCompositeRole(Meta.UnitOfMeasureConversions.RelationType, value);
		}

		virtual public void RemoveUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasureConversions.RelationType, value);
		}

		virtual public bool ExistUnitOfMeasureConversions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.UnitOfMeasureConversions.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasureConversions()
		{
			Strategy.RemoveCompositeRoles(Meta.UnitOfMeasureConversions.RelationType);
		}


		virtual public global::System.String Abbreviation 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Abbreviation.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Abbreviation.RelationType, value);
			}
		}

		virtual public bool ExistAbbreviation{
			get
			{
				return Strategy.ExistUnitRole(Meta.Abbreviation.RelationType);
			}
		}

		virtual public void RemoveAbbreviation()
		{
			Strategy.RemoveUnitRole(Meta.Abbreviation.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public global::Allors.Extent<Singleton> SingletonsWherePreviousCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWherePreviousCurrency.RelationType);
			}
		}

		virtual public bool ExistSingletonsWherePreviousCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWherePreviousCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWherePreferredCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWherePreferredCurrency.RelationType);
			}
		}

		virtual public bool ExistSingletonsWherePreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWherePreferredCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Country> CountriesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CountriesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistCountriesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CountriesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<AmountDue> AmountDuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AmountDuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistAmountDuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AmountDuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<BankAccount> BankAccountsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BankAccountsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistBankAccountsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BankAccountsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisationRevenue> InternalOrganisationRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PackageRevenue> PackageRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PackageRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPackageRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PackageRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyPackageRevenue> PartyPackageRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyPackageRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPartyPackageRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyPackageRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductCategoryRevenue> PartyProductCategoryRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPartyProductCategoryRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductRevenue> PartyProductRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPartyProductRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyRevenue> PartyRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPartyRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductCategoryRevenue> ProductCategoryRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistProductCategoryRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductPurchasePrice> ProductPurchasePricesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductPurchasePricesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistProductPurchasePricesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductPurchasePricesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductRevenue> ProductRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistProductRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesChannelRevenue> SalesChannelRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesChannelRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesChannelRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesChannelRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepCommission> SalesRepCommissionsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepCommissionsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesRepCommissionsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepCommissionsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyProductCategoryRevenue> SalesRepPartyProductCategoryRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyProductCategoryRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyRevenue> SalesRepPartyRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepProductCategoryRevenue> SalesRepProductCategoryRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesRepProductCategoryRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepProductCategoryRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepRevenue> SalesRepRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistSalesRepRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShippingAndHandlingComponent> ShippingAndHandlingComponentsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShippingAndHandlingComponentsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistShippingAndHandlingComponentsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShippingAndHandlingComponentsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<StoreRevenue> StoreRevenuesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoreRevenuesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistStoreRevenuesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoreRevenuesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<EstimatedProductCost> EstimatedProductCostsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EstimatedProductCostsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistEstimatedProductCostsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EstimatedProductCostsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<InvoiceVersion> InvoiceVersionsWhereCustomerCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceVersionsWhereCustomerCurrency.RelationType);
			}
		}

		virtual public bool ExistInvoiceVersionsWhereCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceVersionsWhereCustomerCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Invoice> InvoicesWhereCustomerCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoicesWhereCustomerCurrency.RelationType);
			}
		}

		virtual public bool ExistInvoicesWhereCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoicesWhereCustomerCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderVersion> OrderVersionsWhereCustomerCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderVersionsWhereCustomerCurrency.RelationType);
			}
		}

		virtual public bool ExistOrderVersionsWhereCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderVersionsWhereCustomerCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWherePreferredCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWherePreferredCurrency.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWherePreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWherePreferredCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteVersion> QuoteVersionsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteVersionsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistQuoteVersionsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteVersionsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestVersion> RequestVersionsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestVersionsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistRequestVersionsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestVersionsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Order> OrdersWhereCustomerCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrdersWhereCustomerCurrency.RelationType);
			}
		}

		virtual public bool ExistOrdersWhereCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrdersWhereCustomerCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWherePreferredCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWherePreferredCurrency.RelationType);
			}
		}

		virtual public bool ExistPartiesWherePreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWherePreferredCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<PriceComponent> PriceComponentsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PriceComponentsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistPriceComponentsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PriceComponentsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Quote> QuotesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuotesWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistQuotesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuotesWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Request> RequestsWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestsWhereCurrency.RelationType);
			}
		}

		virtual public bool ExistRequestsWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestsWhereCurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversionsWhereToUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure.RelationType);
			}
		}

		virtual public bool ExistUnitOfMeasureConversionsWhereToUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CurrencyOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CurrencyOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CurrencyOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CurrencyOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CurrencyOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CurrencyOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CurrencyOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CurrencyOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CurrencyOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CurrencyOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class CurrencyBuilder : Allors.ObjectBuilder<Currency> , IUnitOfMeasureBuilder, global::System.IDisposable
	{		
		public CurrencyBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Currency instance)
		{

			instance.IsoCode = this.IsoCode;
		
		

			instance.Name = this.Name;
		
		

			instance.Description = this.Description;
		
		

			instance.Abbreviation = this.Abbreviation;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.UnitOfMeasureConversions!=null)
			{
				instance.UnitOfMeasureConversions = this.UnitOfMeasureConversions.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String IsoCode {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithIsoCode(global::System.String value)
		        {
				    if(this.IsoCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsoCode = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<UnitOfMeasureConversion> UnitOfMeasureConversions {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithUnitOfMeasureConversion(UnitOfMeasureConversion value)
		        {
					if(this.UnitOfMeasureConversions == null)
					{
						this.UnitOfMeasureConversions = new global::System.Collections.Generic.List<UnitOfMeasureConversion>(); 
					}
		            this.UnitOfMeasureConversions.Add(value);
		            return this;
		        }		

				
				public global::System.String Abbreviation {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithAbbreviation(global::System.String value)
		        {
				    if(this.Abbreviation!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Abbreviation = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Currencies : global::Allors.ObjectsBase<Currency>
	{
		public Currencies(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaCurrency Meta
		{
			get
			{
				return Allors.Meta.MetaCurrency.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}