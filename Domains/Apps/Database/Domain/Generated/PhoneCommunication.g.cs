// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PhoneCommunication : Allors.IObject , CommunicationEvent, Versioned
	{
		private readonly IStrategy strategy;

		public PhoneCommunication(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPhoneCommunication Meta
		{
			get
			{
				return Allors.Meta.MetaPhoneCommunication.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PhoneCommunication Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PhoneCommunication) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Boolean? LeftVoiceMail 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.LeftVoiceMail.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LeftVoiceMail.RelationType, value);
			}
		}

		virtual public bool ExistLeftVoiceMail{
			get
			{
				return Strategy.ExistUnitRole(Meta.LeftVoiceMail.RelationType);
			}
		}

		virtual public void RemoveLeftVoiceMail()
		{
			Strategy.RemoveUnitRole(Meta.LeftVoiceMail.RelationType);
		}


		virtual public global::System.Boolean IncomingCall 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.IncomingCall.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IncomingCall.RelationType, value);
			}
		}

		virtual public bool ExistIncomingCall{
			get
			{
				return Strategy.ExistUnitRole(Meta.IncomingCall.RelationType);
			}
		}

		virtual public void RemoveIncomingCall()
		{
			Strategy.RemoveUnitRole(Meta.IncomingCall.RelationType);
		}


		virtual public global::Allors.Extent<Party> Receivers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Receivers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Receivers.RelationType, value);
			}
		}

		virtual public void AddReceiver (Party value)
		{
			Strategy.AddCompositeRole(Meta.Receivers.RelationType, value);
		}

		virtual public void RemoveReceiver (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.Receivers.RelationType, value);
		}

		virtual public bool ExistReceivers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Receivers.RelationType);
			}
		}

		virtual public void RemoveReceivers()
		{
			Strategy.RemoveCompositeRoles(Meta.Receivers.RelationType);
		}


		virtual public global::Allors.Extent<Party> Callers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Callers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Callers.RelationType, value);
			}
		}

		virtual public void AddCaller (Party value)
		{
			Strategy.AddCompositeRole(Meta.Callers.RelationType, value);
		}

		virtual public void RemoveCaller (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.Callers.RelationType, value);
		}

		virtual public bool ExistCallers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Callers.RelationType);
			}
		}

		virtual public void RemoveCallers()
		{
			Strategy.RemoveCompositeRoles(Meta.Callers.RelationType);
		}


		virtual public PhoneCommunicationVersion CurrentVersion
		{ 
			get
			{
				return (PhoneCommunicationVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PhoneCommunicationVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PhoneCommunicationVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PhoneCommunicationVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public CommunicationEventState PreviousCommunicationEventState
		{ 
			get
			{
				return (CommunicationEventState) Strategy.GetCompositeRole(Meta.PreviousCommunicationEventState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousCommunicationEventState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousCommunicationEventState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousCommunicationEventState.RelationType);
			}
		}

		virtual public void RemovePreviousCommunicationEventState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousCommunicationEventState.RelationType);
		}


		virtual public CommunicationEventState LastCommunicationEventState
		{ 
			get
			{
				return (CommunicationEventState) Strategy.GetCompositeRole(Meta.LastCommunicationEventState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastCommunicationEventState.RelationType, value);
			}
		}

		virtual public bool ExistLastCommunicationEventState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastCommunicationEventState.RelationType);
			}
		}

		virtual public void RemoveLastCommunicationEventState()
		{
			Strategy.RemoveCompositeRole(Meta.LastCommunicationEventState.RelationType);
		}


		virtual public CommunicationEventState CommunicationEventState
		{ 
			get
			{
				return (CommunicationEventState) Strategy.GetCompositeRole(Meta.CommunicationEventState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CommunicationEventState.RelationType, value);
			}
		}

		virtual public bool ExistCommunicationEventState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CommunicationEventState.RelationType);
			}
		}

		virtual public void RemoveCommunicationEventState()
		{
			Strategy.RemoveCompositeRole(Meta.CommunicationEventState.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public global::System.DateTime? ScheduledStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledStart.RelationType, value);
			}
		}

		virtual public bool ExistScheduledStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledStart.RelationType);
			}
		}

		virtual public void RemoveScheduledStart()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledStart.RelationType);
		}


		virtual public global::Allors.Extent<Party> ToParties
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ToParties.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ToParties.RelationType, value);
			}
		}

		virtual public void AddToParty (Party value)
		{
			Strategy.AddCompositeRole(Meta.ToParties.RelationType, value);
		}

		virtual public void RemoveToParty (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.ToParties.RelationType, value);
		}

		virtual public bool ExistToParties
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ToParties.RelationType);
			}
		}

		virtual public void RemoveToParties()
		{
			Strategy.RemoveCompositeRoles(Meta.ToParties.RelationType);
		}


		virtual public global::Allors.Extent<ContactMechanism> ContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddContactMechanism (ContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.ContactMechanisms.RelationType, value);
		}

		virtual public void RemoveContactMechanism (ContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.ContactMechanisms.RelationType, value);
		}

		virtual public bool ExistContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.ContactMechanisms.RelationType);
		}


		virtual public global::Allors.Extent<Party> InvolvedParties
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InvolvedParties.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InvolvedParties.RelationType, value);
			}
		}

		virtual public void AddInvolvedParty (Party value)
		{
			Strategy.AddCompositeRole(Meta.InvolvedParties.RelationType, value);
		}

		virtual public void RemoveInvolvedParty (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.InvolvedParties.RelationType, value);
		}

		virtual public bool ExistInvolvedParties
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InvolvedParties.RelationType);
			}
		}

		virtual public void RemoveInvolvedParties()
		{
			Strategy.RemoveCompositeRoles(Meta.InvolvedParties.RelationType);
		}


		virtual public global::System.DateTime? InitialScheduledStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.InitialScheduledStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialScheduledStart.RelationType, value);
			}
		}

		virtual public bool ExistInitialScheduledStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialScheduledStart.RelationType);
			}
		}

		virtual public void RemoveInitialScheduledStart()
		{
			Strategy.RemoveUnitRole(Meta.InitialScheduledStart.RelationType);
		}


		virtual public global::Allors.Extent<CommunicationEventPurpose> EventPurposes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EventPurposes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EventPurposes.RelationType, value);
			}
		}

		virtual public void AddEventPurpose (CommunicationEventPurpose value)
		{
			Strategy.AddCompositeRole(Meta.EventPurposes.RelationType, value);
		}

		virtual public void RemoveEventPurpose (CommunicationEventPurpose value)
		{
			Strategy.RemoveCompositeRole(Meta.EventPurposes.RelationType, value);
		}

		virtual public bool ExistEventPurposes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EventPurposes.RelationType);
			}
		}

		virtual public void RemoveEventPurposes()
		{
			Strategy.RemoveCompositeRoles(Meta.EventPurposes.RelationType);
		}


		virtual public global::System.DateTime? ScheduledEnd 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledEnd.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledEnd.RelationType, value);
			}
		}

		virtual public bool ExistScheduledEnd{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledEnd.RelationType);
			}
		}

		virtual public void RemoveScheduledEnd()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledEnd.RelationType);
		}


		virtual public global::System.DateTime? ActualEnd 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualEnd.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualEnd.RelationType, value);
			}
		}

		virtual public bool ExistActualEnd{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualEnd.RelationType);
			}
		}

		virtual public void RemoveActualEnd()
		{
			Strategy.RemoveUnitRole(Meta.ActualEnd.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEfforts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.WorkEfforts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.WorkEfforts.RelationType, value);
			}
		}

		virtual public void AddWorkEffort (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.WorkEfforts.RelationType, value);
		}

		virtual public void RemoveWorkEffort (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.WorkEfforts.RelationType, value);
		}

		virtual public bool ExistWorkEfforts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.WorkEfforts.RelationType);
			}
		}

		virtual public void RemoveWorkEfforts()
		{
			Strategy.RemoveCompositeRoles(Meta.WorkEfforts.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.DateTime? InitialScheduledEnd 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.InitialScheduledEnd.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialScheduledEnd.RelationType, value);
			}
		}

		virtual public bool ExistInitialScheduledEnd{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialScheduledEnd.RelationType);
			}
		}

		virtual public void RemoveInitialScheduledEnd()
		{
			Strategy.RemoveUnitRole(Meta.InitialScheduledEnd.RelationType);
		}


		virtual public global::Allors.Extent<Party> FromParties
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FromParties.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FromParties.RelationType, value);
			}
		}

		virtual public void AddFromParty (Party value)
		{
			Strategy.AddCompositeRole(Meta.FromParties.RelationType, value);
		}

		virtual public void RemoveFromParty (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.FromParties.RelationType, value);
		}

		virtual public bool ExistFromParties
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FromParties.RelationType);
			}
		}

		virtual public void RemoveFromParties()
		{
			Strategy.RemoveCompositeRoles(Meta.FromParties.RelationType);
		}


		virtual public global::System.String Subject 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Subject.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subject.RelationType, value);
			}
		}

		virtual public bool ExistSubject{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subject.RelationType);
			}
		}

		virtual public void RemoveSubject()
		{
			Strategy.RemoveUnitRole(Meta.Subject.RelationType);
		}


		virtual public global::Allors.Extent<Media> Documents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Documents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Documents.RelationType, value);
			}
		}

		virtual public void AddDocument (Media value)
		{
			Strategy.AddCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public void RemoveDocument (Media value)
		{
			Strategy.RemoveCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public bool ExistDocuments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Documents.RelationType);
			}
		}

		virtual public void RemoveDocuments()
		{
			Strategy.RemoveCompositeRoles(Meta.Documents.RelationType);
		}


		virtual public Case Case
		{ 
			get
			{
				return (Case) Strategy.GetCompositeRole(Meta.Case.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Case.RelationType, value);
			}
		}

		virtual public bool ExistCase
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Case.RelationType);
			}
		}

		virtual public void RemoveCase()
		{
			Strategy.RemoveCompositeRole(Meta.Case.RelationType);
		}


		virtual public Priority Priority
		{ 
			get
			{
				return (Priority) Strategy.GetCompositeRole(Meta.Priority.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Priority.RelationType, value);
			}
		}

		virtual public bool ExistPriority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Priority.RelationType);
			}
		}

		virtual public void RemovePriority()
		{
			Strategy.RemoveCompositeRole(Meta.Priority.RelationType);
		}


		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner.RelationType, value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner.RelationType);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner.RelationType);
		}


		virtual public global::System.String Note 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Note.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Note.RelationType, value);
			}
		}

		virtual public bool ExistNote{
			get
			{
				return Strategy.ExistUnitRole(Meta.Note.RelationType);
			}
		}

		virtual public void RemoveNote()
		{
			Strategy.RemoveUnitRole(Meta.Note.RelationType);
		}


		virtual public global::System.DateTime? ActualStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualStart.RelationType, value);
			}
		}

		virtual public bool ExistActualStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualStart.RelationType);
			}
		}

		virtual public void RemoveActualStart()
		{
			Strategy.RemoveUnitRole(Meta.ActualStart.RelationType);
		}


		virtual public global::System.Boolean? SendNotification 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendNotification.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendNotification.RelationType, value);
			}
		}

		virtual public bool ExistSendNotification{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendNotification.RelationType);
			}
		}

		virtual public void RemoveSendNotification()
		{
			Strategy.RemoveUnitRole(Meta.SendNotification.RelationType);
		}


		virtual public global::System.Boolean? SendReminder 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendReminder.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendReminder.RelationType, value);
			}
		}

		virtual public bool ExistSendReminder{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendReminder.RelationType);
			}
		}

		virtual public void RemoveSendReminder()
		{
			Strategy.RemoveUnitRole(Meta.SendReminder.RelationType);
		}


		virtual public global::System.DateTime? RemindAt 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RemindAt.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RemindAt.RelationType, value);
			}
		}

		virtual public bool ExistRemindAt{
			get
			{
				return Strategy.ExistUnitRole(Meta.RemindAt.RelationType);
			}
		}

		virtual public void RemoveRemindAt()
		{
			Strategy.RemoveUnitRole(Meta.RemindAt.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}



		virtual public global::Allors.Extent<RequirementCommunication> RequirementCommunicationsWhereCommunicationEvent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementCommunicationsWhereCommunicationEvent.RelationType);
			}
		}

		virtual public bool ExistRequirementCommunicationsWhereCommunicationEvent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementCommunicationsWhereCommunicationEvent.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereCommunicationEvent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereCommunicationEvent.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereCommunicationEvent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereCommunicationEvent.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereCommunicationEvent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereCommunicationEvent.RelationType);
			}
		}

		virtual public bool ExistPartiesWhereCommunicationEvent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereCommunicationEvent.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public CommunicationEventCancel Cancel()
		{ 
			var method = new PhoneCommunicationCancel(this);
            method.Execute();
            return method;
		}

		public CommunicationEventCancel Cancel(System.Action<CommunicationEventCancel> action)
		{ 
			var method = new PhoneCommunicationCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public CommunicationEventClose Close()
		{ 
			var method = new PhoneCommunicationClose(this);
            method.Execute();
            return method;
		}

		public CommunicationEventClose Close(System.Action<CommunicationEventClose> action)
		{ 
			var method = new PhoneCommunicationClose(this);
            action(method);
            method.Execute();
            return method;
		}

		public CommunicationEventReopen Reopen()
		{ 
			var method = new PhoneCommunicationReopen(this);
            method.Execute();
            return method;
		}

		public CommunicationEventReopen Reopen(System.Action<CommunicationEventReopen> action)
		{ 
			var method = new PhoneCommunicationReopen(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PhoneCommunicationDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PhoneCommunicationDelete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PhoneCommunicationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PhoneCommunicationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PhoneCommunicationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PhoneCommunicationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PhoneCommunicationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PhoneCommunicationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PhoneCommunicationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PhoneCommunicationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PhoneCommunicationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PhoneCommunicationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PhoneCommunicationBuilder : Allors.ObjectBuilder<PhoneCommunication> , CommunicationEventBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PhoneCommunicationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PhoneCommunication instance)
		{
			

			if(this.LeftVoiceMail.HasValue)
			{
				instance.LeftVoiceMail = this.LeftVoiceMail.Value;
			}			
		
		
			

			if(this.IncomingCall.HasValue)
			{
				instance.IncomingCall = this.IncomingCall.Value;
			}			
		
		
			

			if(this.ScheduledStart.HasValue)
			{
				instance.ScheduledStart = this.ScheduledStart.Value;
			}			
		
		
			

			if(this.InitialScheduledStart.HasValue)
			{
				instance.InitialScheduledStart = this.InitialScheduledStart.Value;
			}			
		
		
			

			if(this.ScheduledEnd.HasValue)
			{
				instance.ScheduledEnd = this.ScheduledEnd.Value;
			}			
		
		
			

			if(this.ActualEnd.HasValue)
			{
				instance.ActualEnd = this.ActualEnd.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.InitialScheduledEnd.HasValue)
			{
				instance.InitialScheduledEnd = this.InitialScheduledEnd.Value;
			}			
		
		

			instance.Subject = this.Subject;
		
		

			instance.Note = this.Note;
		
		
			

			if(this.ActualStart.HasValue)
			{
				instance.ActualStart = this.ActualStart.Value;
			}			
		
		
			

			if(this.SendNotification.HasValue)
			{
				instance.SendNotification = this.SendNotification.Value;
			}			
		
		
			

			if(this.SendReminder.HasValue)
			{
				instance.SendReminder = this.SendReminder.Value;
			}			
		
		
			

			if(this.RemindAt.HasValue)
			{
				instance.RemindAt = this.RemindAt.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
			if(this.Receivers!=null)
			{
				instance.Receivers = this.Receivers.ToArray();
			}
		
			if(this.Callers!=null)
			{
				instance.Callers = this.Callers.ToArray();
			}
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
						

			instance.CommunicationEventState = this.CommunicationEventState;

								
			if(this.ContactMechanisms!=null)
			{
				instance.ContactMechanisms = this.ContactMechanisms.ToArray();
			}
				
			if(this.EventPurposes!=null)
			{
				instance.EventPurposes = this.EventPurposes.ToArray();
			}
		
			if(this.WorkEfforts!=null)
			{
				instance.WorkEfforts = this.WorkEfforts.ToArray();
			}
				
			if(this.Documents!=null)
			{
				instance.Documents = this.Documents.ToArray();
			}
		

			instance.Case = this.Case;

		

			instance.Priority = this.Priority;

		

			instance.Owner = this.Owner;

		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
								
		}


				public global::System.Boolean? LeftVoiceMail {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithLeftVoiceMail(global::System.Boolean? value)
		        {
				    if(this.LeftVoiceMail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LeftVoiceMail = value;
		            return this;
		        }	

				public global::System.Boolean? IncomingCall {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithIncomingCall(global::System.Boolean? value)
		        {
				    if(this.IncomingCall!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IncomingCall = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Party> Receivers {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithReceiver(Party value)
		        {
					if(this.Receivers == null)
					{
						this.Receivers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.Receivers.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> Callers {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithCaller(Party value)
		        {
					if(this.Callers == null)
					{
						this.Callers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.Callers.Add(value);
		            return this;
		        }		

				
				public PhoneCommunicationVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithCurrentVersion(PhoneCommunicationVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PhoneCommunicationVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithAllVersion(PhoneCommunicationVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PhoneCommunicationVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public CommunicationEventState CommunicationEventState {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithCommunicationEventState(CommunicationEventState value)
		        {
		            if(this.CommunicationEventState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CommunicationEventState = value;
		            return this;
		        }		

				
				public global::System.DateTime? ScheduledStart {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithScheduledStart(global::System.DateTime? value)
		        {
				    if(this.ScheduledStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ContactMechanism> ContactMechanisms {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithContactMechanism(ContactMechanism value)
		        {
					if(this.ContactMechanisms == null)
					{
						this.ContactMechanisms = new global::System.Collections.Generic.List<ContactMechanism>(); 
					}
		            this.ContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? InitialScheduledStart {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithInitialScheduledStart(global::System.DateTime? value)
		        {
				    if(this.InitialScheduledStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialScheduledStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<CommunicationEventPurpose> EventPurposes {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithEventPurpose(CommunicationEventPurpose value)
		        {
					if(this.EventPurposes == null)
					{
						this.EventPurposes = new global::System.Collections.Generic.List<CommunicationEventPurpose>(); 
					}
		            this.EventPurposes.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ScheduledEnd {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithScheduledEnd(global::System.DateTime? value)
		        {
				    if(this.ScheduledEnd!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledEnd = value;
		            return this;
		        }	

				public global::System.DateTime? ActualEnd {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithActualEnd(global::System.DateTime? value)
		        {
				    if(this.ActualEnd!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualEnd = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffort> WorkEfforts {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithWorkEffort(WorkEffort value)
		        {
					if(this.WorkEfforts == null)
					{
						this.WorkEfforts = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.WorkEfforts.Add(value);
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.DateTime? InitialScheduledEnd {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithInitialScheduledEnd(global::System.DateTime? value)
		        {
				    if(this.InitialScheduledEnd!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialScheduledEnd = value;
		            return this;
		        }	

				public global::System.String Subject {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithSubject(global::System.String value)
		        {
				    if(this.Subject!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subject = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Media> Documents {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithDocument(Media value)
		        {
					if(this.Documents == null)
					{
						this.Documents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Documents.Add(value);
		            return this;
		        }		

				
				public Case Case {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithCase(Case value)
		        {
		            if(this.Case!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Case = value;
		            return this;
		        }		

				
				public Priority Priority {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithPriority(Priority value)
		        {
		            if(this.Priority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Priority = value;
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public global::System.String Note {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithNote(global::System.String value)
		        {
				    if(this.Note!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Note = value;
		            return this;
		        }	

				public global::System.DateTime? ActualStart {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithActualStart(global::System.DateTime? value)
		        {
				    if(this.ActualStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualStart = value;
		            return this;
		        }	

				public global::System.Boolean? SendNotification {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithSendNotification(global::System.Boolean? value)
		        {
				    if(this.SendNotification!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendNotification = value;
		            return this;
		        }	

				public global::System.Boolean? SendReminder {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithSendReminder(global::System.Boolean? value)
		        {
				    if(this.SendReminder!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendReminder = value;
		            return this;
		        }	

				public global::System.DateTime? RemindAt {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithRemindAt(global::System.DateTime? value)
		        {
				    if(this.RemindAt!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RemindAt = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public PhoneCommunicationBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PhoneCommunicationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PhoneCommunications : global::Allors.ObjectsBase<PhoneCommunication>
	{
		public PhoneCommunications(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPhoneCommunication Meta
		{
			get
			{
				return Allors.Meta.MetaPhoneCommunication.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}