// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class EngagementRate : Allors.IObject , Period, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public EngagementRate(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaEngagementRate Meta
		{
			get
			{
				return Allors.Meta.MetaEngagementRate.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static EngagementRate Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (EngagementRate) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal BillingRate 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.BillingRate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BillingRate.RelationType, value);
			}
		}

		virtual public bool ExistBillingRate{
			get
			{
				return Strategy.ExistUnitRole(Meta.BillingRate.RelationType);
			}
		}

		virtual public void RemoveBillingRate()
		{
			Strategy.RemoveUnitRole(Meta.BillingRate.RelationType);
		}


		virtual public RatingType RatingType
		{ 
			get
			{
				return (RatingType) Strategy.GetCompositeRole(Meta.RatingType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RatingType.RelationType, value);
			}
		}

		virtual public bool ExistRatingType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RatingType.RelationType);
			}
		}

		virtual public void RemoveRatingType()
		{
			Strategy.RemoveCompositeRole(Meta.RatingType.RelationType);
		}


		virtual public global::System.Decimal? Cost 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Cost.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Cost.RelationType, value);
			}
		}

		virtual public bool ExistCost{
			get
			{
				return Strategy.ExistUnitRole(Meta.Cost.RelationType);
			}
		}

		virtual public void RemoveCost()
		{
			Strategy.RemoveUnitRole(Meta.Cost.RelationType);
		}


		virtual public global::Allors.Extent<PriceComponent> GoverningPriceComponents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.GoverningPriceComponents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.GoverningPriceComponents.RelationType, value);
			}
		}

		virtual public void AddGoverningPriceComponent (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.GoverningPriceComponents.RelationType, value);
		}

		virtual public void RemoveGoverningPriceComponent (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.GoverningPriceComponents.RelationType, value);
		}

		virtual public bool ExistGoverningPriceComponents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.GoverningPriceComponents.RelationType);
			}
		}

		virtual public void RemoveGoverningPriceComponents()
		{
			Strategy.RemoveCompositeRoles(Meta.GoverningPriceComponents.RelationType);
		}


		virtual public global::System.String ChangeReason 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ChangeReason.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ChangeReason.RelationType, value);
			}
		}

		virtual public bool ExistChangeReason{
			get
			{
				return Strategy.ExistUnitRole(Meta.ChangeReason.RelationType);
			}
		}

		virtual public void RemoveChangeReason()
		{
			Strategy.RemoveUnitRole(Meta.ChangeReason.RelationType);
		}


		virtual public UnitOfMeasure UnitOfMeasure
		{ 
			get
			{
				return (UnitOfMeasure) Strategy.GetCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.UnitOfMeasure.RelationType, value);
			}
		}

		virtual public bool ExistUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasure()
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasure.RelationType);
		}


		virtual public global::System.DateTime FromDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.FromDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FromDate.RelationType, value);
			}
		}

		virtual public bool ExistFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.FromDate.RelationType);
			}
		}

		virtual public void RemoveFromDate()
		{
			Strategy.RemoveUnitRole(Meta.FromDate.RelationType);
		}


		virtual public global::System.DateTime? ThroughDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ThroughDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ThroughDate.RelationType, value);
			}
		}

		virtual public bool ExistThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ThroughDate.RelationType);
			}
		}

		virtual public void RemoveThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ThroughDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public EngagementItem EngagementItemWhereEngagementRate
		{ 
			get
			{
				return (EngagementItem) Strategy.GetCompositeAssociation(Meta.EngagementItemWhereEngagementRate.RelationType);
			}
		} 

		virtual public bool ExistEngagementItemWhereEngagementRate
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.EngagementItemWhereEngagementRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereCurrentEngagementRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereCurrentEngagementRate.RelationType);
			}
		}

		virtual public bool ExistEngagementItemsWhereCurrentEngagementRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereCurrentEngagementRate.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new EngagementRateOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new EngagementRateOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new EngagementRateOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new EngagementRateOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new EngagementRateOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new EngagementRateOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new EngagementRateOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new EngagementRateOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new EngagementRateOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new EngagementRateOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class EngagementRateBuilder : Allors.ObjectBuilder<EngagementRate> , PeriodBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public EngagementRateBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(EngagementRate instance)
		{
			

			if(this.BillingRate.HasValue)
			{
				instance.BillingRate = this.BillingRate.Value;
			}			
		
		
			

			if(this.Cost.HasValue)
			{
				instance.Cost = this.Cost.Value;
			}			
		
		

			instance.ChangeReason = this.ChangeReason;
		
		
			

			if(this.FromDate.HasValue)
			{
				instance.FromDate = this.FromDate.Value;
			}			
		
		
			

			if(this.ThroughDate.HasValue)
			{
				instance.ThroughDate = this.ThroughDate.Value;
			}			
		
		

			instance.RatingType = this.RatingType;

		
			if(this.GoverningPriceComponents!=null)
			{
				instance.GoverningPriceComponents = this.GoverningPriceComponents.ToArray();
			}
		

			instance.UnitOfMeasure = this.UnitOfMeasure;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Decimal? BillingRate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithBillingRate(global::System.Decimal? value)
		        {
				    if(this.BillingRate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BillingRate = value;
		            return this;
		        }	

				public RatingType RatingType {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithRatingType(RatingType value)
		        {
		            if(this.RatingType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RatingType = value;
		            return this;
		        }		

				
				public global::System.Decimal? Cost {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithCost(global::System.Decimal? value)
		        {
				    if(this.Cost!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Cost = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PriceComponent> GoverningPriceComponents {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithGoverningPriceComponent(PriceComponent value)
		        {
					if(this.GoverningPriceComponents == null)
					{
						this.GoverningPriceComponents = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.GoverningPriceComponents.Add(value);
		            return this;
		        }		

				
				public global::System.String ChangeReason {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithChangeReason(global::System.String value)
		        {
				    if(this.ChangeReason!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ChangeReason = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class EngagementRates : global::Allors.ObjectsBase<EngagementRate>
	{
		public EngagementRates(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaEngagementRate Meta
		{
			get
			{
				return Allors.Meta.MetaEngagementRate.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}