// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SalesOrderItem : Allors.IObject , OrderItem, Versioned
	{
		private readonly IStrategy strategy;

		public SalesOrderItem(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaSalesOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaSalesOrderItem.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SalesOrderItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SalesOrderItem) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public SalesOrderItemState PreviousSalesOrderItemState
		{ 
			get
			{
				return (SalesOrderItemState) Strategy.GetCompositeRole(Meta.PreviousSalesOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousSalesOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousSalesOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousSalesOrderItemState.RelationType);
			}
		}

		virtual public void RemovePreviousSalesOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousSalesOrderItemState.RelationType);
		}


		virtual public SalesOrderItemState LastSalesOrderItemState
		{ 
			get
			{
				return (SalesOrderItemState) Strategy.GetCompositeRole(Meta.LastSalesOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastSalesOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistLastSalesOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastSalesOrderItemState.RelationType);
			}
		}

		virtual public void RemoveLastSalesOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.LastSalesOrderItemState.RelationType);
		}


		virtual public SalesOrderItemState SalesOrderItemState
		{ 
			get
			{
				return (SalesOrderItemState) Strategy.GetCompositeRole(Meta.SalesOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrderItemState.RelationType);
			}
		}

		virtual public void RemoveSalesOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrderItemState.RelationType);
		}


		virtual public SalesOrderItemPaymentState PreviousSalesOrderItemPaymentState
		{ 
			get
			{
				return (SalesOrderItemPaymentState) Strategy.GetCompositeRole(Meta.PreviousSalesOrderItemPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousSalesOrderItemPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousSalesOrderItemPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousSalesOrderItemPaymentState.RelationType);
			}
		}

		virtual public void RemovePreviousSalesOrderItemPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousSalesOrderItemPaymentState.RelationType);
		}


		virtual public SalesOrderItemPaymentState LastSalesOrderItemPaymentState
		{ 
			get
			{
				return (SalesOrderItemPaymentState) Strategy.GetCompositeRole(Meta.LastSalesOrderItemPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastSalesOrderItemPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistLastSalesOrderItemPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastSalesOrderItemPaymentState.RelationType);
			}
		}

		virtual public void RemoveLastSalesOrderItemPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastSalesOrderItemPaymentState.RelationType);
		}


		virtual public SalesOrderItemPaymentState SalesOrderItemPaymentState
		{ 
			get
			{
				return (SalesOrderItemPaymentState) Strategy.GetCompositeRole(Meta.SalesOrderItemPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrderItemPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrderItemPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrderItemPaymentState.RelationType);
			}
		}

		virtual public void RemoveSalesOrderItemPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrderItemPaymentState.RelationType);
		}


		virtual public SalesOrderItemShipmentState PreviousSalesOrderItemShipmentState
		{ 
			get
			{
				return (SalesOrderItemShipmentState) Strategy.GetCompositeRole(Meta.PreviousSalesOrderItemShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousSalesOrderItemShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousSalesOrderItemShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousSalesOrderItemShipmentState.RelationType);
			}
		}

		virtual public void RemovePreviousSalesOrderItemShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousSalesOrderItemShipmentState.RelationType);
		}


		virtual public SalesOrderItemShipmentState LastSalesOrderItemShipmentState
		{ 
			get
			{
				return (SalesOrderItemShipmentState) Strategy.GetCompositeRole(Meta.LastSalesOrderItemShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastSalesOrderItemShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistLastSalesOrderItemShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastSalesOrderItemShipmentState.RelationType);
			}
		}

		virtual public void RemoveLastSalesOrderItemShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastSalesOrderItemShipmentState.RelationType);
		}


		virtual public SalesOrderItemShipmentState SalesOrderItemShipmentState
		{ 
			get
			{
				return (SalesOrderItemShipmentState) Strategy.GetCompositeRole(Meta.SalesOrderItemShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrderItemShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrderItemShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrderItemShipmentState.RelationType);
			}
		}

		virtual public void RemoveSalesOrderItemShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrderItemShipmentState.RelationType);
		}


		virtual public SalesOrderItemVersion CurrentVersion
		{ 
			get
			{
				return (SalesOrderItemVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (SalesOrderItemVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (SalesOrderItemVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::System.Decimal InitialProfitMargin 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.InitialProfitMargin.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialProfitMargin.RelationType, value);
			}
		}

		virtual public bool ExistInitialProfitMargin{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialProfitMargin.RelationType);
			}
		}

		virtual public void RemoveInitialProfitMargin()
		{
			Strategy.RemoveUnitRole(Meta.InitialProfitMargin.RelationType);
		}


		virtual public global::System.Decimal QuantityShortFalled 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityShortFalled.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityShortFalled.RelationType, value);
			}
		}

		virtual public bool ExistQuantityShortFalled{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityShortFalled.RelationType);
			}
		}

		virtual public void RemoveQuantityShortFalled()
		{
			Strategy.RemoveUnitRole(Meta.QuantityShortFalled.RelationType);
		}


		virtual public global::Allors.Extent<OrderItem> OrderedWithFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderedWithFeatures.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderedWithFeatures.RelationType, value);
			}
		}

		virtual public void AddOrderedWithFeature (OrderItem value)
		{
			Strategy.AddCompositeRole(Meta.OrderedWithFeatures.RelationType, value);
		}

		virtual public void RemoveOrderedWithFeature (OrderItem value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderedWithFeatures.RelationType, value);
		}

		virtual public bool ExistOrderedWithFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderedWithFeatures.RelationType);
			}
		}

		virtual public void RemoveOrderedWithFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderedWithFeatures.RelationType);
		}


		virtual public global::System.Decimal MaintainedProfitMargin 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.MaintainedProfitMargin.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaintainedProfitMargin.RelationType, value);
			}
		}

		virtual public bool ExistMaintainedProfitMargin{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaintainedProfitMargin.RelationType);
			}
		}

		virtual public void RemoveMaintainedProfitMargin()
		{
			Strategy.RemoveUnitRole(Meta.MaintainedProfitMargin.RelationType);
		}


		virtual public global::System.Decimal? RequiredProfitMargin 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.RequiredProfitMargin.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredProfitMargin.RelationType, value);
			}
		}

		virtual public bool ExistRequiredProfitMargin{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredProfitMargin.RelationType);
			}
		}

		virtual public void RemoveRequiredProfitMargin()
		{
			Strategy.RemoveUnitRole(Meta.RequiredProfitMargin.RelationType);
		}


		virtual public NonSerialisedInventoryItem PreviousReservedFromInventoryItem
		{ 
			get
			{
				return (NonSerialisedInventoryItem) Strategy.GetCompositeRole(Meta.PreviousReservedFromInventoryItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousReservedFromInventoryItem.RelationType, value);
			}
		}

		virtual public bool ExistPreviousReservedFromInventoryItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousReservedFromInventoryItem.RelationType);
			}
		}

		virtual public void RemovePreviousReservedFromInventoryItem()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousReservedFromInventoryItem.RelationType);
		}


		virtual public global::System.Decimal? QuantityShipNow 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.QuantityShipNow.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityShipNow.RelationType, value);
			}
		}

		virtual public bool ExistQuantityShipNow{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityShipNow.RelationType);
			}
		}

		virtual public void RemoveQuantityShipNow()
		{
			Strategy.RemoveUnitRole(Meta.QuantityShipNow.RelationType);
		}


		virtual public global::System.Decimal? RequiredMarkupPercentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.RequiredMarkupPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredMarkupPercentage.RelationType, value);
			}
		}

		virtual public bool ExistRequiredMarkupPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredMarkupPercentage.RelationType);
			}
		}

		virtual public void RemoveRequiredMarkupPercentage()
		{
			Strategy.RemoveUnitRole(Meta.RequiredMarkupPercentage.RelationType);
		}


		virtual public global::System.Decimal QuantityShipped 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityShipped.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityShipped.RelationType, value);
			}
		}

		virtual public bool ExistQuantityShipped{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityShipped.RelationType);
			}
		}

		virtual public void RemoveQuantityShipped()
		{
			Strategy.RemoveUnitRole(Meta.QuantityShipped.RelationType);
		}


		virtual public PostalAddress ShipToAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShipToAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToAddress.RelationType, value);
			}
		}

		virtual public bool ExistShipToAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToAddress.RelationType);
			}
		}

		virtual public void RemoveShipToAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToAddress.RelationType);
		}


		virtual public global::System.Decimal QuantityPicked 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityPicked.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityPicked.RelationType, value);
			}
		}

		virtual public bool ExistQuantityPicked{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityPicked.RelationType);
			}
		}

		virtual public void RemoveQuantityPicked()
		{
			Strategy.RemoveUnitRole(Meta.QuantityPicked.RelationType);
		}


		virtual public Product PreviousProduct
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.PreviousProduct.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousProduct.RelationType, value);
			}
		}

		virtual public bool ExistPreviousProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousProduct.RelationType);
			}
		}

		virtual public void RemovePreviousProduct()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousProduct.RelationType);
		}


		virtual public global::System.Decimal UnitPurchasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitPurchasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitPurchasePrice.RelationType, value);
			}
		}

		virtual public bool ExistUnitPurchasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitPurchasePrice.RelationType);
			}
		}

		virtual public void RemoveUnitPurchasePrice()
		{
			Strategy.RemoveUnitRole(Meta.UnitPurchasePrice.RelationType);
		}


		virtual public Party ShipToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ShipToParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToParty.RelationType, value);
			}
		}

		virtual public bool ExistShipToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToParty.RelationType);
			}
		}

		virtual public void RemoveShipToParty()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToParty.RelationType);
		}


		virtual public PostalAddress AssignedShipToAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.AssignedShipToAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AssignedShipToAddress.RelationType, value);
			}
		}

		virtual public bool ExistAssignedShipToAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AssignedShipToAddress.RelationType);
			}
		}

		virtual public void RemoveAssignedShipToAddress()
		{
			Strategy.RemoveCompositeRole(Meta.AssignedShipToAddress.RelationType);
		}


		virtual public global::System.Decimal QuantityReturned 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityReturned.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityReturned.RelationType, value);
			}
		}

		virtual public bool ExistQuantityReturned{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityReturned.RelationType);
			}
		}

		virtual public void RemoveQuantityReturned()
		{
			Strategy.RemoveUnitRole(Meta.QuantityReturned.RelationType);
		}


		virtual public global::System.Decimal QuantityReserved 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityReserved.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityReserved.RelationType, value);
			}
		}

		virtual public bool ExistQuantityReserved{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityReserved.RelationType);
			}
		}

		virtual public void RemoveQuantityReserved()
		{
			Strategy.RemoveUnitRole(Meta.QuantityReserved.RelationType);
		}


		virtual public Person SalesRep
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.SalesRep.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesRep.RelationType, value);
			}
		}

		virtual public bool ExistSalesRep
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesRep.RelationType);
			}
		}

		virtual public void RemoveSalesRep()
		{
			Strategy.RemoveCompositeRole(Meta.SalesRep.RelationType);
		}


		virtual public Party AssignedShipToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.AssignedShipToParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AssignedShipToParty.RelationType, value);
			}
		}

		virtual public bool ExistAssignedShipToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AssignedShipToParty.RelationType);
			}
		}

		virtual public void RemoveAssignedShipToParty()
		{
			Strategy.RemoveCompositeRole(Meta.AssignedShipToParty.RelationType);
		}


		virtual public global::System.Decimal QuantityPendingShipment 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityPendingShipment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityPendingShipment.RelationType, value);
			}
		}

		virtual public bool ExistQuantityPendingShipment{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityPendingShipment.RelationType);
			}
		}

		virtual public void RemoveQuantityPendingShipment()
		{
			Strategy.RemoveUnitRole(Meta.QuantityPendingShipment.RelationType);
		}


		virtual public global::System.Decimal MaintainedMarkupPercentage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaintainedMarkupPercentage.RelationType, value);
			}
		}

		virtual public bool ExistMaintainedMarkupPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
			}
		}

		virtual public void RemoveMaintainedMarkupPercentage()
		{
			Strategy.RemoveUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
		}


		virtual public global::System.Decimal InitialMarkupPercentage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.InitialMarkupPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialMarkupPercentage.RelationType, value);
			}
		}

		virtual public bool ExistInitialMarkupPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialMarkupPercentage.RelationType);
			}
		}

		virtual public void RemoveInitialMarkupPercentage()
		{
			Strategy.RemoveUnitRole(Meta.InitialMarkupPercentage.RelationType);
		}


		virtual public NonSerialisedInventoryItem ReservedFromInventoryItem
		{ 
			get
			{
				return (NonSerialisedInventoryItem) Strategy.GetCompositeRole(Meta.ReservedFromInventoryItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ReservedFromInventoryItem.RelationType, value);
			}
		}

		virtual public bool ExistReservedFromInventoryItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ReservedFromInventoryItem.RelationType);
			}
		}

		virtual public void RemoveReservedFromInventoryItem()
		{
			Strategy.RemoveCompositeRole(Meta.ReservedFromInventoryItem.RelationType);
		}


		virtual public Product Product
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.Product.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Product.RelationType, value);
			}
		}

		virtual public bool ExistProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Product.RelationType);
			}
		}

		virtual public void RemoveProduct()
		{
			Strategy.RemoveCompositeRole(Meta.Product.RelationType);
		}


		virtual public ProductFeature ProductFeature
		{ 
			get
			{
				return (ProductFeature) Strategy.GetCompositeRole(Meta.ProductFeature.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductFeature.RelationType, value);
			}
		}

		virtual public bool ExistProductFeature
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductFeature.RelationType);
			}
		}

		virtual public void RemoveProductFeature()
		{
			Strategy.RemoveCompositeRole(Meta.ProductFeature.RelationType);
		}


		virtual public global::System.Decimal QuantityRequestsShipping 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityRequestsShipping.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityRequestsShipping.RelationType, value);
			}
		}

		virtual public bool ExistQuantityRequestsShipping{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityRequestsShipping.RelationType);
			}
		}

		virtual public void RemoveQuantityRequestsShipping()
		{
			Strategy.RemoveUnitRole(Meta.QuantityRequestsShipping.RelationType);
		}


		virtual public SalesInvoiceItemType ItemType
		{ 
			get
			{
				return (SalesInvoiceItemType) Strategy.GetCompositeRole(Meta.ItemType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ItemType.RelationType, value);
			}
		}

		virtual public bool ExistItemType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ItemType.RelationType);
			}
		}

		virtual public void RemoveItemType()
		{
			Strategy.RemoveCompositeRole(Meta.ItemType.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public BudgetItem BudgetItem
		{ 
			get
			{
				return (BudgetItem) Strategy.GetCompositeRole(Meta.BudgetItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BudgetItem.RelationType, value);
			}
		}

		virtual public bool ExistBudgetItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BudgetItem.RelationType);
			}
		}

		virtual public void RemoveBudgetItem()
		{
			Strategy.RemoveCompositeRole(Meta.BudgetItem.RelationType);
		}


		virtual public global::System.Decimal PreviousQuantity 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.PreviousQuantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PreviousQuantity.RelationType, value);
			}
		}

		virtual public bool ExistPreviousQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.PreviousQuantity.RelationType);
			}
		}

		virtual public void RemovePreviousQuantity()
		{
			Strategy.RemoveUnitRole(Meta.PreviousQuantity.RelationType);
		}


		virtual public global::System.Decimal QuantityOrdered 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityOrdered.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityOrdered.RelationType, value);
			}
		}

		virtual public bool ExistQuantityOrdered{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityOrdered.RelationType);
			}
		}

		virtual public void RemoveQuantityOrdered()
		{
			Strategy.RemoveUnitRole(Meta.QuantityOrdered.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public PurchaseOrder CorrespondingPurchaseOrder
		{ 
			get
			{
				return (PurchaseOrder) Strategy.GetCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType, value);
			}
		}

		virtual public bool ExistCorrespondingPurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
			}
		}

		virtual public void RemoveCorrespondingPurchaseOrder()
		{
			Strategy.RemoveCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
		}


		virtual public global::System.Decimal TotalOrderAdjustmentCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalOrderAdjustmentCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalOrderAdjustmentCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalOrderAdjustment 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalOrderAdjustment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalOrderAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistTotalOrderAdjustment{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalOrderAdjustment.RelationType);
			}
		}

		virtual public void RemoveTotalOrderAdjustment()
		{
			Strategy.RemoveUnitRole(Meta.TotalOrderAdjustment.RelationType);
		}


		virtual public QuoteItem QuoteItem
		{ 
			get
			{
				return (QuoteItem) Strategy.GetCompositeRole(Meta.QuoteItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteItem.RelationType, value);
			}
		}

		virtual public bool ExistQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteItem.RelationType);
			}
		}

		virtual public void RemoveQuoteItem()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItem.RelationType);
		}


		virtual public global::System.DateTime? AssignedDeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AssignedDeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AssignedDeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistAssignedDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.AssignedDeliveryDate.RelationType);
			}
		}

		virtual public void RemoveAssignedDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.AssignedDeliveryDate.RelationType);
		}


		virtual public global::System.DateTime? DeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeliveryDate.RelationType);
			}
		}

		virtual public void RemoveDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.DeliveryDate.RelationType);
		}


		virtual public global::Allors.Extent<OrderTerm> OrderTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderTerms.RelationType, value);
			}
		}

		virtual public void AddOrderTerm (OrderTerm value)
		{
			Strategy.AddCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public void RemoveOrderTerm (OrderTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public bool ExistOrderTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderTerms.RelationType);
			}
		}

		virtual public void RemoveOrderTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderTerms.RelationType);
		}


		virtual public global::System.String ShippingInstruction 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ShippingInstruction.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShippingInstruction.RelationType, value);
			}
		}

		virtual public bool ExistShippingInstruction{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShippingInstruction.RelationType);
			}
		}

		virtual public void RemoveShippingInstruction()
		{
			Strategy.RemoveUnitRole(Meta.ShippingInstruction.RelationType);
		}


		virtual public global::Allors.Extent<OrderItem> Associations
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Associations.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Associations.RelationType, value);
			}
		}

		virtual public void AddAssociation (OrderItem value)
		{
			Strategy.AddCompositeRole(Meta.Associations.RelationType, value);
		}

		virtual public void RemoveAssociation (OrderItem value)
		{
			Strategy.RemoveCompositeRole(Meta.Associations.RelationType, value);
		}

		virtual public bool ExistAssociations
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Associations.RelationType);
			}
		}

		virtual public void RemoveAssociations()
		{
			Strategy.RemoveCompositeRoles(Meta.Associations.RelationType);
		}


		virtual public global::System.String Message 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Message.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Message.RelationType, value);
			}
		}

		virtual public bool ExistMessage{
			get
			{
				return Strategy.ExistUnitRole(Meta.Message.RelationType);
			}
		}

		virtual public void RemoveMessage()
		{
			Strategy.RemoveUnitRole(Meta.Message.RelationType);
		}


		virtual public global::System.Decimal? TotalDiscountAsPercentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountAsPercentage.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountAsPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountAsPercentage()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
		}


		virtual public DiscountAdjustment DiscountAdjustment
		{ 
			get
			{
				return (DiscountAdjustment) Strategy.GetCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DiscountAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistDiscountAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
		}

		virtual public void RemoveDiscountAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.DiscountAdjustment.RelationType);
		}


		virtual public global::System.Decimal UnitVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitVat.RelationType, value);
			}
		}

		virtual public bool ExistUnitVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitVat.RelationType);
			}
		}

		virtual public void RemoveUnitVat()
		{
			Strategy.RemoveUnitRole(Meta.UnitVat.RelationType);
		}


		virtual public global::System.Decimal TotalVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVat.RelationType);
			}
		}

		virtual public void RemoveTotalVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalVat.RelationType);
		}


		virtual public global::System.Decimal UnitSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistUnitSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitSurcharge.RelationType);
			}
		}

		virtual public void RemoveUnitSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.UnitSurcharge.RelationType);
		}


		virtual public global::System.Decimal UnitDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitDiscount.RelationType, value);
			}
		}

		virtual public bool ExistUnitDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitDiscount.RelationType);
			}
		}

		virtual public void RemoveUnitDiscount()
		{
			Strategy.RemoveUnitRole(Meta.UnitDiscount.RelationType);
		}


		virtual public global::System.Decimal TotalExVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalExVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
		}


		virtual public VatRate DerivedVatRate
		{ 
			get
			{
				return (VatRate) Strategy.GetCompositeRole(Meta.DerivedVatRate.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DerivedVatRate.RelationType, value);
			}
		}

		virtual public bool ExistDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DerivedVatRate.RelationType);
			}
		}

		virtual public void RemoveDerivedVatRate()
		{
			Strategy.RemoveCompositeRole(Meta.DerivedVatRate.RelationType);
		}


		virtual public global::System.Decimal? ActualUnitPrice 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ActualUnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualUnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistActualUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualUnitPrice.RelationType);
			}
		}

		virtual public void RemoveActualUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.ActualUnitPrice.RelationType);
		}


		virtual public global::System.Decimal TotalIncVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalIncVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal UnitBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistUnitBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitBasePrice.RelationType);
			}
		}

		virtual public void RemoveUnitBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.UnitBasePrice.RelationType);
		}


		virtual public global::System.Decimal CalculatedUnitPrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.CalculatedUnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CalculatedUnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistCalculatedUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.CalculatedUnitPrice.RelationType);
			}
		}

		virtual public void RemoveCalculatedUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.CalculatedUnitPrice.RelationType);
		}


		virtual public global::System.Decimal TotalSurchargeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalIncVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVat.RelationType);
			}
		}

		virtual public void RemoveTotalIncVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVat.RelationType);
		}


		virtual public global::System.Decimal? TotalSurchargeAsPercentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeAsPercentage.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeAsPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeAsPercentage()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
		}


		virtual public global::System.Decimal TotalDiscountCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscount.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscount.RelationType);
			}
		}

		virtual public void RemoveTotalDiscount()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscount.RelationType);
		}


		virtual public global::System.Decimal TotalSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurcharge.RelationType);
			}
		}

		virtual public void RemoveTotalSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurcharge.RelationType);
		}


		virtual public VatRegime AssignedVatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.AssignedVatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AssignedVatRegime.RelationType, value);
			}
		}

		virtual public bool ExistAssignedVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AssignedVatRegime.RelationType);
			}
		}

		virtual public void RemoveAssignedVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.AssignedVatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePrice.RelationType);
			}
		}

		virtual public void RemoveTotalBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePrice.RelationType);
		}


		virtual public global::System.Decimal TotalExVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVat.RelationType);
			}
		}

		virtual public void RemoveTotalExVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVat.RelationType);
		}


		virtual public global::System.Decimal TotalBasePriceCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePriceCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalBasePriceCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
		}


		virtual public global::Allors.Extent<PriceComponent> CurrentPriceComponents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentPriceComponents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentPriceComponents.RelationType, value);
			}
		}

		virtual public void AddCurrentPriceComponent (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.CurrentPriceComponents.RelationType, value);
		}

		virtual public void RemoveCurrentPriceComponent (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentPriceComponents.RelationType, value);
		}

		virtual public bool ExistCurrentPriceComponents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentPriceComponents.RelationType);
			}
		}

		virtual public void RemoveCurrentPriceComponents()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentPriceComponents.RelationType);
		}


		virtual public SurchargeAdjustment SurchargeAdjustment
		{ 
			get
			{
				return (SurchargeAdjustment) Strategy.GetCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SurchargeAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistSurchargeAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
		}

		virtual public void RemoveSurchargeAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.SurchargeAdjustment.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<SalesInvoiceItemVersion> SalesInvoiceItemVersionsWhereSalesOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereSalesOrderItem.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemVersionsWhereSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereSalesOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereSalesOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereSalesOrderItem.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereSalesOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderShipment> OrderShipmentsWhereSalesOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderShipmentsWhereSalesOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderShipmentsWhereSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderShipmentsWhereSalesOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItem> SalesInvoiceItemsWhereSalesOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemsWhereSalesOrderItem.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemsWhereSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemsWhereSalesOrderItem.RelationType);
			}
		}


		virtual public SalesOrder SalesOrderWhereSalesOrderItem
		{ 
			get
			{
				return (SalesOrder) Strategy.GetCompositeAssociation(Meta.SalesOrderWhereSalesOrderItem.RelationType);
			}
		} 

		virtual public bool ExistSalesOrderWhereSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SalesOrderWhereSalesOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereOrderedWithFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereOrderedWithFeature.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereOrderedWithFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereOrderedWithFeature.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemBilling> OrderItemBillingsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemBillingsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderItemBillingsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemBillingsWhereOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderRequirementCommitment> OrderRequirementCommitmentsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderRequirementCommitmentsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderRequirementCommitmentsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderRequirementCommitmentsWhereOrderItem.RelationType);
			}
		}


		virtual public SalesOrderItem SalesOrderItemWhereOrderedWithFeature
		{ 
			get
			{
				return (SalesOrderItem) Strategy.GetCompositeAssociation(Meta.SalesOrderItemWhereOrderedWithFeature.RelationType);
			}
		} 

		virtual public bool ExistSalesOrderItemWhereOrderedWithFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SalesOrderItemWhereOrderedWithFeature.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentReceipt> ShipmentReceiptsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentReceiptsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistShipmentReceiptsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentReceiptsWhereOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemVersion> OrderItemVersionsWhereAssociation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemVersionsWhereAssociation.RelationType);
			}
		}

		virtual public bool ExistOrderItemVersionsWhereAssociation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemVersionsWhereAssociation.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderVersion> OrderVersionsWhereValidOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderVersionsWhereValidOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderVersionsWhereValidOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderVersionsWhereValidOrderItem.RelationType);
			}
		}


		virtual public Order OrderWhereValidOrderItem
		{ 
			get
			{
				return (Order) Strategy.GetCompositeAssociation(Meta.OrderWhereValidOrderItem.RelationType);
			}
		} 

		virtual public bool ExistOrderWhereValidOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrderWhereValidOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItem> OrderItemsWhereAssociation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemsWhereAssociation.RelationType);
			}
		}

		virtual public bool ExistOrderItemsWhereAssociation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemsWhereAssociation.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereOrderItemFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereOrderItemFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereOrderItemFulfillment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereOrderItemFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereOrderItemFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereOrderItemFulfillment.RelationType);
			}
		}



		public SalesOrderItemContinue Continue()
		{ 
			var method = new SalesOrderItemContinue(this);
            method.Execute();
            return method;
		}

		public SalesOrderItemContinue Continue(System.Action<SalesOrderItemContinue> action)
		{ 
			var method = new SalesOrderItemContinue(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemCancel Cancel()
		{ 
			var method = new SalesOrderItemCancel(this);
            method.Execute();
            return method;
		}

		public OrderItemCancel Cancel(System.Action<OrderItemCancel> action)
		{ 
			var method = new SalesOrderItemCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemReject Reject()
		{ 
			var method = new SalesOrderItemReject(this);
            method.Execute();
            return method;
		}

		public OrderItemReject Reject(System.Action<OrderItemReject> action)
		{ 
			var method = new SalesOrderItemReject(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemConfirm Confirm()
		{ 
			var method = new SalesOrderItemConfirm(this);
            method.Execute();
            return method;
		}

		public OrderItemConfirm Confirm(System.Action<OrderItemConfirm> action)
		{ 
			var method = new SalesOrderItemConfirm(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemApprove Approve()
		{ 
			var method = new SalesOrderItemApprove(this);
            method.Execute();
            return method;
		}

		public OrderItemApprove Approve(System.Action<OrderItemApprove> action)
		{ 
			var method = new SalesOrderItemApprove(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new SalesOrderItemOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SalesOrderItemOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SalesOrderItemOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SalesOrderItemOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SalesOrderItemOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SalesOrderItemOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SalesOrderItemOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SalesOrderItemOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SalesOrderItemOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SalesOrderItemOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new SalesOrderItemDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new SalesOrderItemDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class SalesOrderItemBuilder : Allors.ObjectBuilder<SalesOrderItem> , OrderItemBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public SalesOrderItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SalesOrderItem instance)
		{
						
			

			if(this.RequiredProfitMargin.HasValue)
			{
				instance.RequiredProfitMargin = this.RequiredProfitMargin.Value;
			}			
		
		
			

			if(this.QuantityShipNow.HasValue)
			{
				instance.QuantityShipNow = this.QuantityShipNow.Value;
			}			
		
		
			

			if(this.RequiredMarkupPercentage.HasValue)
			{
				instance.RequiredMarkupPercentage = this.RequiredMarkupPercentage.Value;
			}			
		
								
			

			if(this.QuantityReturned.HasValue)
			{
				instance.QuantityReturned = this.QuantityReturned.Value;
			}			
		
												

			instance.InternalComment = this.InternalComment;
		
				
			

			if(this.QuantityOrdered.HasValue)
			{
				instance.QuantityOrdered = this.QuantityOrdered.Value;
			}			
		
		

			instance.Description = this.Description;
		
						
			

			if(this.AssignedDeliveryDate.HasValue)
			{
				instance.AssignedDeliveryDate = this.AssignedDeliveryDate.Value;
			}			
		
				

			instance.ShippingInstruction = this.ShippingInstruction;
		
		

			instance.Message = this.Message;
		
																
			

			if(this.ActualUnitPrice.HasValue)
			{
				instance.ActualUnitPrice = this.ActualUnitPrice.Value;
			}			
		
																										

			instance.Comment = this.Comment;
		
		
				

			instance.SalesOrderItemState = this.SalesOrderItemState;

						

			instance.SalesOrderItemPaymentState = this.SalesOrderItemPaymentState;

						

			instance.SalesOrderItemShipmentState = this.SalesOrderItemShipmentState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		
			if(this.OrderedWithFeatures!=null)
			{
				instance.OrderedWithFeatures = this.OrderedWithFeatures.ToArray();
			}
										

			instance.AssignedShipToAddress = this.AssignedShipToAddress;

				

			instance.AssignedShipToParty = this.AssignedShipToParty;

		

			instance.ReservedFromInventoryItem = this.ReservedFromInventoryItem;

		

			instance.Product = this.Product;

		

			instance.ProductFeature = this.ProductFeature;

		

			instance.ItemType = this.ItemType;

		

			instance.BudgetItem = this.BudgetItem;

		

			instance.CorrespondingPurchaseOrder = this.CorrespondingPurchaseOrder;

		

			instance.QuoteItem = this.QuoteItem;

		
			if(this.OrderTerms!=null)
			{
				instance.OrderTerms = this.OrderTerms.ToArray();
			}
		
			if(this.Associations!=null)
			{
				instance.Associations = this.Associations.ToArray();
			}
		

			instance.DiscountAdjustment = this.DiscountAdjustment;

						

			instance.AssignedVatRegime = this.AssignedVatRegime;

				

			instance.SurchargeAdjustment = this.SurchargeAdjustment;

								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public SalesOrderItemState SalesOrderItemState {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSalesOrderItemState(SalesOrderItemState value)
		        {
		            if(this.SalesOrderItemState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrderItemState = value;
		            return this;
		        }		

				
				public SalesOrderItemPaymentState SalesOrderItemPaymentState {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSalesOrderItemPaymentState(SalesOrderItemPaymentState value)
		        {
		            if(this.SalesOrderItemPaymentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrderItemPaymentState = value;
		            return this;
		        }		

				
				public SalesOrderItemShipmentState SalesOrderItemShipmentState {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSalesOrderItemShipmentState(SalesOrderItemShipmentState value)
		        {
		            if(this.SalesOrderItemShipmentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrderItemShipmentState = value;
		            return this;
		        }		

				
				public SalesOrderItemVersion CurrentVersion {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentVersion(SalesOrderItemVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesOrderItemVersion> AllVersions {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithAllVersion(SalesOrderItemVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<SalesOrderItemVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrderItem> OrderedWithFeatures {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithOrderedWithFeature(OrderItem value)
		        {
					if(this.OrderedWithFeatures == null)
					{
						this.OrderedWithFeatures = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.OrderedWithFeatures.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? RequiredProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithRequiredProfitMargin(global::System.Decimal? value)
		        {
				    if(this.RequiredProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredProfitMargin = value;
		            return this;
		        }	

				public global::System.Decimal? QuantityShipNow {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityShipNow(global::System.Decimal? value)
		        {
				    if(this.QuantityShipNow!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityShipNow = value;
		            return this;
		        }	

				public global::System.Decimal? RequiredMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithRequiredMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.RequiredMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredMarkupPercentage = value;
		            return this;
		        }	

				public PostalAddress AssignedShipToAddress {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedShipToAddress(PostalAddress value)
		        {
		            if(this.AssignedShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedShipToAddress = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityReturned {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityReturned(global::System.Decimal? value)
		        {
				    if(this.QuantityReturned!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityReturned = value;
		            return this;
		        }	

				public Party AssignedShipToParty {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedShipToParty(Party value)
		        {
		            if(this.AssignedShipToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedShipToParty = value;
		            return this;
		        }		

				
				public NonSerialisedInventoryItem ReservedFromInventoryItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithReservedFromInventoryItem(NonSerialisedInventoryItem value)
		        {
		            if(this.ReservedFromInventoryItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ReservedFromInventoryItem = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public SalesInvoiceItemType ItemType {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithItemType(SalesInvoiceItemType value)
		        {
		            if(this.ItemType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ItemType = value;
		            return this;
		        }		

				
				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public BudgetItem BudgetItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithBudgetItem(BudgetItem value)
		        {
		            if(this.BudgetItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BudgetItem = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityOrdered {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityOrdered(global::System.Decimal? value)
		        {
				    if(this.QuantityOrdered!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityOrdered = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public PurchaseOrder CorrespondingPurchaseOrder {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCorrespondingPurchaseOrder(PurchaseOrder value)
		        {
		            if(this.CorrespondingPurchaseOrder!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CorrespondingPurchaseOrder = value;
		            return this;
		        }		

				
				public QuoteItem QuoteItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuoteItem(QuoteItem value)
		        {
		            if(this.QuoteItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItem = value;
		            return this;
		        }		

				
				public global::System.DateTime? AssignedDeliveryDate {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.AssignedDeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AssignedDeliveryDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderTerm> OrderTerms {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithOrderTerm(OrderTerm value)
		        {
					if(this.OrderTerms == null)
					{
						this.OrderTerms = new global::System.Collections.Generic.List<OrderTerm>(); 
					}
		            this.OrderTerms.Add(value);
		            return this;
		        }		

				
				public global::System.String ShippingInstruction {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithShippingInstruction(global::System.String value)
		        {
				    if(this.ShippingInstruction!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShippingInstruction = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderItem> Associations {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithAssociation(OrderItem value)
		        {
					if(this.Associations == null)
					{
						this.Associations = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.Associations.Add(value);
		            return this;
		        }		

				
				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? ActualUnitPrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithActualUnitPrice(global::System.Decimal? value)
		        {
				    if(this.ActualUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualUnitPrice = value;
		            return this;
		        }	

				public VatRegime AssignedVatRegime {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedVatRegime(VatRegime value)
		        {
		            if(this.AssignedVatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedVatRegime = value;
		            return this;
		        }		

				
				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesOrderItems : global::Allors.ObjectsBase<SalesOrderItem>
	{
		public SalesOrderItems(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaSalesOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaSalesOrderItem.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}