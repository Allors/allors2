// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SalesInvoiceVersion : Allors.IObject , InvoiceVersion
	{
		private readonly IStrategy strategy;

		public SalesInvoiceVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaSalesInvoiceVersion Meta
		{
			get
			{
				return Allors.Meta.MetaSalesInvoiceVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SalesInvoiceVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SalesInvoiceVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public SalesInvoiceState SalesInvoiceState
		{ 
			get
			{
				return (SalesInvoiceState) Strategy.GetCompositeRole(Meta.SalesInvoiceState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesInvoiceState.RelationType, value);
			}
		}

		virtual public bool ExistSalesInvoiceState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesInvoiceState.RelationType);
			}
		}

		virtual public void RemoveSalesInvoiceState()
		{
			Strategy.RemoveCompositeRole(Meta.SalesInvoiceState.RelationType);
		}


		virtual public global::System.Decimal? TotalListPrice 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalListPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalListPrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalListPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalListPrice.RelationType);
			}
		}

		virtual public void RemoveTotalListPrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalListPrice.RelationType);
		}


		virtual public ContactMechanism BillToContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistBillToContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
		}

		virtual public void RemoveBillToContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.BillToContactMechanism.RelationType);
		}


		virtual public Party PreviousBillToCustomer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.PreviousBillToCustomer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousBillToCustomer.RelationType, value);
			}
		}

		virtual public bool ExistPreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousBillToCustomer.RelationType);
			}
		}

		virtual public void RemovePreviousBillToCustomer()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousBillToCustomer.RelationType);
		}


		virtual public SalesInvoiceType SalesInvoiceType
		{ 
			get
			{
				return (SalesInvoiceType) Strategy.GetCompositeRole(Meta.SalesInvoiceType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesInvoiceType.RelationType, value);
			}
		}

		virtual public bool ExistSalesInvoiceType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesInvoiceType.RelationType);
			}
		}

		virtual public void RemoveSalesInvoiceType()
		{
			Strategy.RemoveCompositeRole(Meta.SalesInvoiceType.RelationType);
		}


		virtual public global::System.Decimal InitialProfitMargin 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.InitialProfitMargin.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialProfitMargin.RelationType, value);
			}
		}

		virtual public bool ExistInitialProfitMargin{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialProfitMargin.RelationType);
			}
		}

		virtual public void RemoveInitialProfitMargin()
		{
			Strategy.RemoveUnitRole(Meta.InitialProfitMargin.RelationType);
		}


		virtual public PaymentMethod PaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.PaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PaymentMethod.RelationType);
			}
		}

		virtual public void RemovePaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.PaymentMethod.RelationType);
		}


		virtual public SalesOrder SalesOrder
		{ 
			get
			{
				return (SalesOrder) Strategy.GetCompositeRole(Meta.SalesOrder.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrder.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrder
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrder.RelationType);
			}
		}

		virtual public void RemoveSalesOrder()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrder.RelationType);
		}


		virtual public global::System.Decimal InitialMarkupPercentage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.InitialMarkupPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InitialMarkupPercentage.RelationType, value);
			}
		}

		virtual public bool ExistInitialMarkupPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.InitialMarkupPercentage.RelationType);
			}
		}

		virtual public void RemoveInitialMarkupPercentage()
		{
			Strategy.RemoveUnitRole(Meta.InitialMarkupPercentage.RelationType);
		}


		virtual public global::System.Decimal MaintainedMarkupPercentage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaintainedMarkupPercentage.RelationType, value);
			}
		}

		virtual public bool ExistMaintainedMarkupPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
			}
		}

		virtual public void RemoveMaintainedMarkupPercentage()
		{
			Strategy.RemoveUnitRole(Meta.MaintainedMarkupPercentage.RelationType);
		}


		virtual public global::Allors.Extent<Person> SalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SalesReps.RelationType, value);
			}
		}

		virtual public void AddSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.SalesReps.RelationType, value);
		}

		virtual public void RemoveSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.SalesReps.RelationType, value);
		}

		virtual public bool ExistSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SalesReps.RelationType);
			}
		}

		virtual public void RemoveSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.SalesReps.RelationType);
		}


		virtual public Shipment Shipment
		{ 
			get
			{
				return (Shipment) Strategy.GetCompositeRole(Meta.Shipment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Shipment.RelationType, value);
			}
		}

		virtual public bool ExistShipment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Shipment.RelationType);
			}
		}

		virtual public void RemoveShipment()
		{
			Strategy.RemoveCompositeRole(Meta.Shipment.RelationType);
		}


		virtual public global::System.Decimal MaintainedProfitMargin 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.MaintainedProfitMargin.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaintainedProfitMargin.RelationType, value);
			}
		}

		virtual public bool ExistMaintainedProfitMargin{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaintainedProfitMargin.RelationType);
			}
		}

		virtual public void RemoveMaintainedProfitMargin()
		{
			Strategy.RemoveUnitRole(Meta.MaintainedProfitMargin.RelationType);
		}


		virtual public Party PreviousShipToCustomer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.PreviousShipToCustomer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousShipToCustomer.RelationType, value);
			}
		}

		virtual public bool ExistPreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousShipToCustomer.RelationType);
			}
		}

		virtual public void RemovePreviousShipToCustomer()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousShipToCustomer.RelationType);
		}


		virtual public Party BillToCustomer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.BillToCustomer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToCustomer.RelationType, value);
			}
		}

		virtual public bool ExistBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToCustomer.RelationType);
			}
		}

		virtual public void RemoveBillToCustomer()
		{
			Strategy.RemoveCompositeRole(Meta.BillToCustomer.RelationType);
		}


		virtual public global::Allors.Extent<SalesInvoiceItem> SalesInvoiceItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SalesInvoiceItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SalesInvoiceItems.RelationType, value);
			}
		}

		virtual public void AddSalesInvoiceItem (SalesInvoiceItem value)
		{
			Strategy.AddCompositeRole(Meta.SalesInvoiceItems.RelationType, value);
		}

		virtual public void RemoveSalesInvoiceItem (SalesInvoiceItem value)
		{
			Strategy.RemoveCompositeRole(Meta.SalesInvoiceItems.RelationType, value);
		}

		virtual public bool ExistSalesInvoiceItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SalesInvoiceItems.RelationType);
			}
		}

		virtual public void RemoveSalesInvoiceItems()
		{
			Strategy.RemoveCompositeRoles(Meta.SalesInvoiceItems.RelationType);
		}


		virtual public global::System.Decimal TotalListPriceCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalListPriceCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalListPriceCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalListPriceCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalListPriceCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalListPriceCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalListPriceCustomerCurrency.RelationType);
		}


		virtual public Party ShipToCustomer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ShipToCustomer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToCustomer.RelationType, value);
			}
		}

		virtual public bool ExistShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToCustomer.RelationType);
			}
		}

		virtual public void RemoveShipToCustomer()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToCustomer.RelationType);
		}


		virtual public ContactMechanism BilledFromContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BilledFromContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BilledFromContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistBilledFromContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BilledFromContactMechanism.RelationType);
			}
		}

		virtual public void RemoveBilledFromContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.BilledFromContactMechanism.RelationType);
		}


		virtual public global::System.Decimal? TotalPurchasePrice 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalPurchasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalPurchasePrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalPurchasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalPurchasePrice.RelationType);
			}
		}

		virtual public void RemoveTotalPurchasePrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalPurchasePrice.RelationType);
		}


		virtual public SalesChannel SalesChannel
		{ 
			get
			{
				return (SalesChannel) Strategy.GetCompositeRole(Meta.SalesChannel.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesChannel.RelationType, value);
			}
		}

		virtual public bool ExistSalesChannel
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesChannel.RelationType);
			}
		}

		virtual public void RemoveSalesChannel()
		{
			Strategy.RemoveCompositeRole(Meta.SalesChannel.RelationType);
		}


		virtual public global::Allors.Extent<Party> Customers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Customers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Customers.RelationType, value);
			}
		}

		virtual public void AddCustomer (Party value)
		{
			Strategy.AddCompositeRole(Meta.Customers.RelationType, value);
		}

		virtual public void RemoveCustomer (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.Customers.RelationType, value);
		}

		virtual public bool ExistCustomers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Customers.RelationType);
			}
		}

		virtual public void RemoveCustomers()
		{
			Strategy.RemoveCompositeRoles(Meta.Customers.RelationType);
		}


		virtual public PostalAddress ShipToAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShipToAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToAddress.RelationType, value);
			}
		}

		virtual public bool ExistShipToAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToAddress.RelationType);
			}
		}

		virtual public void RemoveShipToAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToAddress.RelationType);
		}


		virtual public Store Store
		{ 
			get
			{
				return (Store) Strategy.GetCompositeRole(Meta.Store.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Store.RelationType, value);
			}
		}

		virtual public bool ExistStore
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Store.RelationType);
			}
		}

		virtual public void RemoveStore()
		{
			Strategy.RemoveCompositeRole(Meta.Store.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public global::System.Decimal TotalShippingAndHandlingCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalShippingAndHandlingCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalShippingAndHandlingCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
		}


		virtual public Currency CustomerCurrency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.CustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveCustomerCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.CustomerCurrency.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public ShippingAndHandlingCharge ShippingAndHandlingCharge
		{ 
			get
			{
				return (ShippingAndHandlingCharge) Strategy.GetCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAndHandlingCharge.RelationType, value);
			}
		}

		virtual public bool ExistShippingAndHandlingCharge
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
			}
		}

		virtual public void RemoveShippingAndHandlingCharge()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
		}


		virtual public global::System.Decimal TotalFeeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalFeeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalFeeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalFeeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
		}


		virtual public Fee Fee
		{ 
			get
			{
				return (Fee) Strategy.GetCompositeRole(Meta.Fee.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Fee.RelationType, value);
			}
		}

		virtual public bool ExistFee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Fee.RelationType);
			}
		}

		virtual public void RemoveFee()
		{
			Strategy.RemoveCompositeRole(Meta.Fee.RelationType);
		}


		virtual public global::System.Decimal TotalExVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalExVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
		}


		virtual public global::System.String CustomerReference 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.CustomerReference.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CustomerReference.RelationType, value);
			}
		}

		virtual public bool ExistCustomerReference{
			get
			{
				return Strategy.ExistUnitRole(Meta.CustomerReference.RelationType);
			}
		}

		virtual public void RemoveCustomerReference()
		{
			Strategy.RemoveUnitRole(Meta.CustomerReference.RelationType);
		}


		virtual public DiscountAdjustment DiscountAdjustment
		{ 
			get
			{
				return (DiscountAdjustment) Strategy.GetCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DiscountAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistDiscountAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
		}

		virtual public void RemoveDiscountAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.DiscountAdjustment.RelationType);
		}


		virtual public global::System.Decimal AmountPaid 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountPaid.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountPaid.RelationType, value);
			}
		}

		virtual public bool ExistAmountPaid{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountPaid.RelationType);
			}
		}

		virtual public void RemoveAmountPaid()
		{
			Strategy.RemoveUnitRole(Meta.AmountPaid.RelationType);
		}


		virtual public global::System.Decimal TotalDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscount.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscount.RelationType);
			}
		}

		virtual public void RemoveTotalDiscount()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscount.RelationType);
		}


		virtual public BillingAccount BillingAccount
		{ 
			get
			{
				return (BillingAccount) Strategy.GetCompositeRole(Meta.BillingAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingAccount.RelationType, value);
			}
		}

		virtual public bool ExistBillingAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingAccount.RelationType);
			}
		}

		virtual public void RemoveBillingAccount()
		{
			Strategy.RemoveCompositeRole(Meta.BillingAccount.RelationType);
		}


		virtual public global::System.Decimal TotalIncVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVat.RelationType);
			}
		}

		virtual public void RemoveTotalIncVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVat.RelationType);
		}


		virtual public global::System.Decimal TotalSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurcharge.RelationType);
			}
		}

		virtual public void RemoveTotalSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurcharge.RelationType);
		}


		virtual public global::System.Decimal TotalBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePrice.RelationType);
			}
		}

		virtual public void RemoveTotalBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePrice.RelationType);
		}


		virtual public global::System.Decimal TotalVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
		}


		virtual public global::System.DateTime InvoiceDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.InvoiceDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InvoiceDate.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.InvoiceDate.RelationType);
			}
		}

		virtual public void RemoveInvoiceDate()
		{
			Strategy.RemoveUnitRole(Meta.InvoiceDate.RelationType);
		}


		virtual public global::System.DateTime EntryDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.EntryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EntryDate.RelationType, value);
			}
		}

		virtual public bool ExistEntryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EntryDate.RelationType);
			}
		}

		virtual public void RemoveEntryDate()
		{
			Strategy.RemoveUnitRole(Meta.EntryDate.RelationType);
		}


		virtual public global::System.Decimal TotalIncVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalIncVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalShippingAndHandling 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalShippingAndHandling.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalShippingAndHandling.RelationType, value);
			}
		}

		virtual public bool ExistTotalShippingAndHandling{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalShippingAndHandling.RelationType);
			}
		}

		virtual public void RemoveTotalShippingAndHandling()
		{
			Strategy.RemoveUnitRole(Meta.TotalShippingAndHandling.RelationType);
		}


		virtual public global::System.Decimal TotalBasePriceCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePriceCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalBasePriceCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
		}


		virtual public SurchargeAdjustment SurchargeAdjustment
		{ 
			get
			{
				return (SurchargeAdjustment) Strategy.GetCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SurchargeAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistSurchargeAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
		}

		virtual public void RemoveSurchargeAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.SurchargeAdjustment.RelationType);
		}


		virtual public global::System.Decimal TotalExVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVat.RelationType);
			}
		}

		virtual public void RemoveTotalExVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVat.RelationType);
		}


		virtual public global::Allors.Extent<InvoiceTerm> InvoiceTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InvoiceTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InvoiceTerms.RelationType, value);
			}
		}

		virtual public void AddInvoiceTerm (InvoiceTerm value)
		{
			Strategy.AddCompositeRole(Meta.InvoiceTerms.RelationType, value);
		}

		virtual public void RemoveInvoiceTerm (InvoiceTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.InvoiceTerms.RelationType, value);
		}

		virtual public bool ExistInvoiceTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InvoiceTerms.RelationType);
			}
		}

		virtual public void RemoveInvoiceTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.InvoiceTerms.RelationType);
		}


		virtual public global::System.Decimal TotalSurchargeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
		}


		virtual public global::System.String InvoiceNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InvoiceNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InvoiceNumber.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.InvoiceNumber.RelationType);
			}
		}

		virtual public void RemoveInvoiceNumber()
		{
			Strategy.RemoveUnitRole(Meta.InvoiceNumber.RelationType);
		}


		virtual public global::System.String Message 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Message.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Message.RelationType, value);
			}
		}

		virtual public bool ExistMessage{
			get
			{
				return Strategy.ExistUnitRole(Meta.Message.RelationType);
			}
		}

		virtual public void RemoveMessage()
		{
			Strategy.RemoveUnitRole(Meta.Message.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalDiscountCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVat.RelationType);
			}
		}

		virtual public void RemoveTotalVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalVat.RelationType);
		}


		virtual public global::System.Decimal TotalFee 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalFee.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalFee.RelationType, value);
			}
		}

		virtual public bool ExistTotalFee{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalFee.RelationType);
			}
		}

		virtual public void RemoveTotalFee()
		{
			Strategy.RemoveUnitRole(Meta.TotalFee.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public SalesInvoice SalesInvoiceWhereCurrentVersion
		{ 
			get
			{
				return (SalesInvoice) Strategy.GetCompositeAssociation(Meta.SalesInvoiceWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistSalesInvoiceWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SalesInvoiceWhereCurrentVersion.RelationType);
			}
		}


		virtual public SalesInvoice SalesInvoiceWhereAllVersion
		{ 
			get
			{
				return (SalesInvoice) Strategy.GetCompositeAssociation(Meta.SalesInvoiceWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistSalesInvoiceWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SalesInvoiceWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SalesInvoiceVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SalesInvoiceVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SalesInvoiceVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SalesInvoiceVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SalesInvoiceVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SalesInvoiceVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SalesInvoiceVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SalesInvoiceVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SalesInvoiceVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SalesInvoiceVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class SalesInvoiceVersionBuilder : Allors.ObjectBuilder<SalesInvoiceVersion> , InvoiceVersionBuilder, global::System.IDisposable
	{		
		public SalesInvoiceVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SalesInvoiceVersion instance)
		{
			

			if(this.TotalListPrice.HasValue)
			{
				instance.TotalListPrice = this.TotalListPrice.Value;
			}			
		
												
			

			if(this.TotalPurchasePrice.HasValue)
			{
				instance.TotalPurchasePrice = this.TotalPurchasePrice.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		

			instance.InternalComment = this.InternalComment;
		
		
			

			if(this.TotalShippingAndHandlingCustomerCurrency.HasValue)
			{
				instance.TotalShippingAndHandlingCustomerCurrency = this.TotalShippingAndHandlingCustomerCurrency.Value;
			}			
		
		

			instance.Description = this.Description;
		
						

			instance.CustomerReference = this.CustomerReference;
		
														
			

			if(this.InvoiceDate.HasValue)
			{
				instance.InvoiceDate = this.InvoiceDate.Value;
			}			
		
														

			instance.InvoiceNumber = this.InvoiceNumber;
		
		

			instance.Message = this.Message;
		
								
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.SalesInvoiceState = this.SalesInvoiceState;

		

			instance.BillToContactMechanism = this.BillToContactMechanism;

				

			instance.SalesInvoiceType = this.SalesInvoiceType;

		

			instance.PaymentMethod = this.PaymentMethod;

								

			instance.PreviousShipToCustomer = this.PreviousShipToCustomer;

		

			instance.BillToCustomer = this.BillToCustomer;

		
			if(this.SalesInvoiceItems!=null)
			{
				instance.SalesInvoiceItems = this.SalesInvoiceItems.ToArray();
			}
		

			instance.ShipToCustomer = this.ShipToCustomer;

		

			instance.BilledFromContactMechanism = this.BilledFromContactMechanism;

		

			instance.SalesChannel = this.SalesChannel;

				

			instance.ShipToAddress = this.ShipToAddress;

		

			instance.Store = this.Store;

		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

				

			instance.ShippingAndHandlingCharge = this.ShippingAndHandlingCharge;

		

			instance.Fee = this.Fee;

		

			instance.DiscountAdjustment = this.DiscountAdjustment;

		

			instance.BillingAccount = this.BillingAccount;

		

			instance.SurchargeAdjustment = this.SurchargeAdjustment;

		
			if(this.InvoiceTerms!=null)
			{
				instance.InvoiceTerms = this.InvoiceTerms.ToArray();
			}
		

			instance.VatRegime = this.VatRegime;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public SalesInvoiceState SalesInvoiceState {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSalesInvoiceState(SalesInvoiceState value)
		        {
		            if(this.SalesInvoiceState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesInvoiceState = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalListPrice {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithTotalListPrice(global::System.Decimal? value)
		        {
				    if(this.TotalListPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalListPrice = value;
		            return this;
		        }	

				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public SalesInvoiceType SalesInvoiceType {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSalesInvoiceType(SalesInvoiceType value)
		        {
		            if(this.SalesInvoiceType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesInvoiceType = value;
		            return this;
		        }		

				
				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public Party PreviousShipToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithPreviousShipToCustomer(Party value)
		        {
		            if(this.PreviousShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousShipToCustomer = value;
		            return this;
		        }		

				
				public Party BillToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithBillToCustomer(Party value)
		        {
		            if(this.BillToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToCustomer = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesInvoiceItem> SalesInvoiceItems {get; set;}	

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSalesInvoiceItem(SalesInvoiceItem value)
		        {
					if(this.SalesInvoiceItems == null)
					{
						this.SalesInvoiceItems = new global::System.Collections.Generic.List<SalesInvoiceItem>(); 
					}
		            this.SalesInvoiceItems.Add(value);
		            return this;
		        }		

				
				public Party ShipToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithShipToCustomer(Party value)
		        {
		            if(this.ShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToCustomer = value;
		            return this;
		        }		

				
				public ContactMechanism BilledFromContactMechanism {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithBilledFromContactMechanism(ContactMechanism value)
		        {
		            if(this.BilledFromContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BilledFromContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalPurchasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithTotalPurchasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalPurchasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalPurchasePrice = value;
		            return this;
		        }	

				public SalesChannel SalesChannel {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSalesChannel(SalesChannel value)
		        {
		            if(this.SalesChannel!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesChannel = value;
		            return this;
		        }		

				
				public PostalAddress ShipToAddress {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithShipToAddress(PostalAddress value)
		        {
		            if(this.ShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToAddress = value;
		            return this;
		        }		

				
				public Store Store {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithStore(Store value)
		        {
		            if(this.Store!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Store = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public global::System.Decimal? TotalShippingAndHandlingCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithTotalShippingAndHandlingCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalShippingAndHandlingCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalShippingAndHandlingCustomerCurrency = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public ShippingAndHandlingCharge ShippingAndHandlingCharge {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithShippingAndHandlingCharge(ShippingAndHandlingCharge value)
		        {
		            if(this.ShippingAndHandlingCharge!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAndHandlingCharge = value;
		            return this;
		        }		

				
				public Fee Fee {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithFee(Fee value)
		        {
		            if(this.Fee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Fee = value;
		            return this;
		        }		

				
				public global::System.String CustomerReference {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithCustomerReference(global::System.String value)
		        {
				    if(this.CustomerReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CustomerReference = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public BillingAccount BillingAccount {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithBillingAccount(BillingAccount value)
		        {
		            if(this.BillingAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingAccount = value;
		            return this;
		        }		

				
				public global::System.DateTime? InvoiceDate {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithInvoiceDate(global::System.DateTime? value)
		        {
				    if(this.InvoiceDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceDate = value;
		            return this;
		        }	

				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InvoiceTerm> InvoiceTerms {get; set;}	

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithInvoiceTerm(InvoiceTerm value)
		        {
					if(this.InvoiceTerms == null)
					{
						this.InvoiceTerms = new global::System.Collections.Generic.List<InvoiceTerm>(); 
					}
		            this.InvoiceTerms.Add(value);
		            return this;
		        }		

				
				public global::System.String InvoiceNumber {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithInvoiceNumber(global::System.String value)
		        {
				    if(this.InvoiceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceNumber = value;
		            return this;
		        }	

				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesInvoiceVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesInvoiceVersions : global::Allors.ObjectsBase<SalesInvoiceVersion>
	{
		public SalesInvoiceVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaSalesInvoiceVersion Meta
		{
			get
			{
				return Allors.Meta.MetaSalesInvoiceVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}