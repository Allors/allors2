// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class GeneralLedgerAccount : Allors.IObject , UniquelyIdentifiable, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public GeneralLedgerAccount(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaGeneralLedgerAccount Meta
		{
			get
			{
				return Allors.Meta.MetaGeneralLedgerAccount.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static GeneralLedgerAccount Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (GeneralLedgerAccount) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Product DefaultCostUnit
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.DefaultCostUnit.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultCostUnit.RelationType, value);
			}
		}

		virtual public bool ExistDefaultCostUnit
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultCostUnit.RelationType);
			}
		}

		virtual public void RemoveDefaultCostUnit()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultCostUnit.RelationType);
		}


		virtual public CostCenter DefaultCostCenter
		{ 
			get
			{
				return (CostCenter) Strategy.GetCompositeRole(Meta.DefaultCostCenter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultCostCenter.RelationType, value);
			}
		}

		virtual public bool ExistDefaultCostCenter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultCostCenter.RelationType);
			}
		}

		virtual public void RemoveDefaultCostCenter()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultCostCenter.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public GeneralLedgerAccountType GeneralLedgerAccountType
		{ 
			get
			{
				return (GeneralLedgerAccountType) Strategy.GetCompositeRole(Meta.GeneralLedgerAccountType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralLedgerAccountType.RelationType, value);
			}
		}

		virtual public bool ExistGeneralLedgerAccountType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralLedgerAccountType.RelationType);
			}
		}

		virtual public void RemoveGeneralLedgerAccountType()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralLedgerAccountType.RelationType);
		}


		virtual public global::System.Boolean CashAccount 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CashAccount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CashAccount.RelationType, value);
			}
		}

		virtual public bool ExistCashAccount{
			get
			{
				return Strategy.ExistUnitRole(Meta.CashAccount.RelationType);
			}
		}

		virtual public void RemoveCashAccount()
		{
			Strategy.RemoveUnitRole(Meta.CashAccount.RelationType);
		}


		virtual public global::System.Boolean CostCenterAccount 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CostCenterAccount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CostCenterAccount.RelationType, value);
			}
		}

		virtual public bool ExistCostCenterAccount{
			get
			{
				return Strategy.ExistUnitRole(Meta.CostCenterAccount.RelationType);
			}
		}

		virtual public void RemoveCostCenterAccount()
		{
			Strategy.RemoveUnitRole(Meta.CostCenterAccount.RelationType);
		}


		virtual public DebitCreditConstant Side
		{ 
			get
			{
				return (DebitCreditConstant) Strategy.GetCompositeRole(Meta.Side.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Side.RelationType, value);
			}
		}

		virtual public bool ExistSide
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Side.RelationType);
			}
		}

		virtual public void RemoveSide()
		{
			Strategy.RemoveCompositeRole(Meta.Side.RelationType);
		}


		virtual public global::System.Boolean BalanceSheetAccount 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.BalanceSheetAccount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BalanceSheetAccount.RelationType, value);
			}
		}

		virtual public bool ExistBalanceSheetAccount{
			get
			{
				return Strategy.ExistUnitRole(Meta.BalanceSheetAccount.RelationType);
			}
		}

		virtual public void RemoveBalanceSheetAccount()
		{
			Strategy.RemoveUnitRole(Meta.BalanceSheetAccount.RelationType);
		}


		virtual public global::System.Boolean ReconciliationAccount 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.ReconciliationAccount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ReconciliationAccount.RelationType, value);
			}
		}

		virtual public bool ExistReconciliationAccount{
			get
			{
				return Strategy.ExistUnitRole(Meta.ReconciliationAccount.RelationType);
			}
		}

		virtual public void RemoveReconciliationAccount()
		{
			Strategy.RemoveUnitRole(Meta.ReconciliationAccount.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.Boolean CostCenterRequired 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CostCenterRequired.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CostCenterRequired.RelationType, value);
			}
		}

		virtual public bool ExistCostCenterRequired{
			get
			{
				return Strategy.ExistUnitRole(Meta.CostCenterRequired.RelationType);
			}
		}

		virtual public void RemoveCostCenterRequired()
		{
			Strategy.RemoveUnitRole(Meta.CostCenterRequired.RelationType);
		}


		virtual public global::System.Boolean CostUnitRequired 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CostUnitRequired.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CostUnitRequired.RelationType, value);
			}
		}

		virtual public bool ExistCostUnitRequired{
			get
			{
				return Strategy.ExistUnitRole(Meta.CostUnitRequired.RelationType);
			}
		}

		virtual public void RemoveCostUnitRequired()
		{
			Strategy.RemoveUnitRole(Meta.CostUnitRequired.RelationType);
		}


		virtual public GeneralLedgerAccountGroup GeneralLedgerAccountGroup
		{ 
			get
			{
				return (GeneralLedgerAccountGroup) Strategy.GetCompositeRole(Meta.GeneralLedgerAccountGroup.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralLedgerAccountGroup.RelationType, value);
			}
		}

		virtual public bool ExistGeneralLedgerAccountGroup
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralLedgerAccountGroup.RelationType);
			}
		}

		virtual public void RemoveGeneralLedgerAccountGroup()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralLedgerAccountGroup.RelationType);
		}


		virtual public global::Allors.Extent<CostCenter> CostCentersAllowed
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CostCentersAllowed.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CostCentersAllowed.RelationType, value);
			}
		}

		virtual public void AddCostCentersAllowed (CostCenter value)
		{
			Strategy.AddCompositeRole(Meta.CostCentersAllowed.RelationType, value);
		}

		virtual public void RemoveCostCentersAllowed (CostCenter value)
		{
			Strategy.RemoveCompositeRole(Meta.CostCentersAllowed.RelationType, value);
		}

		virtual public bool ExistCostCentersAllowed
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CostCentersAllowed.RelationType);
			}
		}

		virtual public void RemoveCostCentersAllowed()
		{
			Strategy.RemoveCompositeRoles(Meta.CostCentersAllowed.RelationType);
		}


		virtual public global::System.Boolean CostUnitAccount 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CostUnitAccount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CostUnitAccount.RelationType, value);
			}
		}

		virtual public bool ExistCostUnitAccount{
			get
			{
				return Strategy.ExistUnitRole(Meta.CostUnitAccount.RelationType);
			}
		}

		virtual public void RemoveCostUnitAccount()
		{
			Strategy.RemoveUnitRole(Meta.CostUnitAccount.RelationType);
		}


		virtual public global::System.String AccountNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AccountNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AccountNumber.RelationType, value);
			}
		}

		virtual public bool ExistAccountNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.AccountNumber.RelationType);
			}
		}

		virtual public void RemoveAccountNumber()
		{
			Strategy.RemoveUnitRole(Meta.AccountNumber.RelationType);
		}


		virtual public global::Allors.Extent<Product> CostUnitsAllowed
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CostUnitsAllowed.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CostUnitsAllowed.RelationType, value);
			}
		}

		virtual public void AddCostUnitsAllowed (Product value)
		{
			Strategy.AddCompositeRole(Meta.CostUnitsAllowed.RelationType, value);
		}

		virtual public void RemoveCostUnitsAllowed (Product value)
		{
			Strategy.RemoveCompositeRole(Meta.CostUnitsAllowed.RelationType, value);
		}

		virtual public bool ExistCostUnitsAllowed
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CostUnitsAllowed.RelationType);
			}
		}

		virtual public void RemoveCostUnitsAllowed()
		{
			Strategy.RemoveCompositeRoles(Meta.CostUnitsAllowed.RelationType);
		}


		virtual public global::System.Boolean Protected 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.Protected.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Protected.RelationType, value);
			}
		}

		virtual public bool ExistProtected{
			get
			{
				return Strategy.ExistUnitRole(Meta.Protected.RelationType);
			}
		}

		virtual public void RemoveProtected()
		{
			Strategy.RemoveUnitRole(Meta.Protected.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public ChartOfAccounts ChartOfAccountsWhereGeneralLedgerAccount
		{ 
			get
			{
				return (ChartOfAccounts) Strategy.GetCompositeAssociation(Meta.ChartOfAccountsWhereGeneralLedgerAccount.RelationType);
			}
		} 

		virtual public bool ExistChartOfAccountsWhereGeneralLedgerAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ChartOfAccountsWhereGeneralLedgerAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<GlBudgetAllocation> GlBudgetAllocationsWhereGeneralLedgerAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GlBudgetAllocationsWhereGeneralLedgerAccount.RelationType);
			}
		}

		virtual public bool ExistGlBudgetAllocationsWhereGeneralLedgerAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GlBudgetAllocationsWhereGeneralLedgerAccount.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereSalesPaymentDifferencesAccount
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereSalesPaymentDifferencesAccount.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereSalesPaymentDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereSalesPaymentDifferencesAccount.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereGeneralLedgerAccount
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereGeneralLedgerAccount.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereGeneralLedgerAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereGeneralLedgerAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereRetainedEarningsAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereRetainedEarningsAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereRetainedEarningsAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereRetainedEarningsAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereSalesPaymentDiscountDifferencesAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereSalesPaymentDiscountDifferencesAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereSalesPaymentDiscountDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereSalesPaymentDiscountDifferencesAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWherePurchasePaymentDifferencesAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWherePurchasePaymentDifferencesAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWherePurchasePaymentDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWherePurchasePaymentDifferencesAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereSuspenceAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereSuspenceAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereSuspenceAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereSuspenceAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereNetIncomeAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereNetIncomeAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereNetIncomeAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereNetIncomeAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWherePurchasePaymentDiscountDifferencesAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWherePurchasePaymentDiscountDifferencesAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWherePurchasePaymentDiscountDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWherePurchasePaymentDiscountDifferencesAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereCalculationDifferencesAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereCalculationDifferencesAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereCalculationDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereCalculationDifferencesAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereGlAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereGlAccount.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereGlAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereGlAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationGlAccount> OrganisationGlAccountsWhereGeneralLedgerAccount
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationGlAccountsWhereGeneralLedgerAccount.RelationType);
			}
		}

		virtual public bool ExistOrganisationGlAccountsWhereGeneralLedgerAccount
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationGlAccountsWhereGeneralLedgerAccount.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new GeneralLedgerAccountOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new GeneralLedgerAccountOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new GeneralLedgerAccountOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new GeneralLedgerAccountOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new GeneralLedgerAccountOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new GeneralLedgerAccountOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new GeneralLedgerAccountOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new GeneralLedgerAccountOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new GeneralLedgerAccountOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new GeneralLedgerAccountOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class GeneralLedgerAccountBuilder : Allors.ObjectBuilder<GeneralLedgerAccount> , UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public GeneralLedgerAccountBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(GeneralLedgerAccount instance)
		{

			instance.Description = this.Description;
		
		
			

			if(this.CashAccount.HasValue)
			{
				instance.CashAccount = this.CashAccount.Value;
			}			
		
		
			

			if(this.CostCenterAccount.HasValue)
			{
				instance.CostCenterAccount = this.CostCenterAccount.Value;
			}			
		
		
			

			if(this.BalanceSheetAccount.HasValue)
			{
				instance.BalanceSheetAccount = this.BalanceSheetAccount.Value;
			}			
		
		
			

			if(this.ReconciliationAccount.HasValue)
			{
				instance.ReconciliationAccount = this.ReconciliationAccount.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.CostCenterRequired.HasValue)
			{
				instance.CostCenterRequired = this.CostCenterRequired.Value;
			}			
		
		
			

			if(this.CostUnitRequired.HasValue)
			{
				instance.CostUnitRequired = this.CostUnitRequired.Value;
			}			
		
		
			

			if(this.CostUnitAccount.HasValue)
			{
				instance.CostUnitAccount = this.CostUnitAccount.Value;
			}			
		
		

			instance.AccountNumber = this.AccountNumber;
		
		
			

			if(this.Protected.HasValue)
			{
				instance.Protected = this.Protected.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.DefaultCostUnit = this.DefaultCostUnit;

		

			instance.DefaultCostCenter = this.DefaultCostCenter;

		

			instance.GeneralLedgerAccountType = this.GeneralLedgerAccountType;

		

			instance.Side = this.Side;

		

			instance.GeneralLedgerAccountGroup = this.GeneralLedgerAccountGroup;

		
			if(this.CostCentersAllowed!=null)
			{
				instance.CostCentersAllowed = this.CostCentersAllowed.ToArray();
			}
		
			if(this.CostUnitsAllowed!=null)
			{
				instance.CostUnitsAllowed = this.CostUnitsAllowed.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Product DefaultCostUnit {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDefaultCostUnit(Product value)
		        {
		            if(this.DefaultCostUnit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultCostUnit = value;
		            return this;
		        }		

				
				public CostCenter DefaultCostCenter {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDefaultCostCenter(CostCenter value)
		        {
		            if(this.DefaultCostCenter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultCostCenter = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public GeneralLedgerAccountType GeneralLedgerAccountType {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithGeneralLedgerAccountType(GeneralLedgerAccountType value)
		        {
		            if(this.GeneralLedgerAccountType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccountType = value;
		            return this;
		        }		

				
				public global::System.Boolean? CashAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCashAccount(global::System.Boolean? value)
		        {
				    if(this.CashAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CashAccount = value;
		            return this;
		        }	

				public global::System.Boolean? CostCenterAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCenterAccount(global::System.Boolean? value)
		        {
				    if(this.CostCenterAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostCenterAccount = value;
		            return this;
		        }	

				public DebitCreditConstant Side {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithSide(DebitCreditConstant value)
		        {
		            if(this.Side!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Side = value;
		            return this;
		        }		

				
				public global::System.Boolean? BalanceSheetAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithBalanceSheetAccount(global::System.Boolean? value)
		        {
				    if(this.BalanceSheetAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BalanceSheetAccount = value;
		            return this;
		        }	

				public global::System.Boolean? ReconciliationAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithReconciliationAccount(global::System.Boolean? value)
		        {
				    if(this.ReconciliationAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationAccount = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Boolean? CostCenterRequired {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCenterRequired(global::System.Boolean? value)
		        {
				    if(this.CostCenterRequired!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostCenterRequired = value;
		            return this;
		        }	

				public global::System.Boolean? CostUnitRequired {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitRequired(global::System.Boolean? value)
		        {
				    if(this.CostUnitRequired!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostUnitRequired = value;
		            return this;
		        }	

				public GeneralLedgerAccountGroup GeneralLedgerAccountGroup {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithGeneralLedgerAccountGroup(GeneralLedgerAccountGroup value)
		        {
		            if(this.GeneralLedgerAccountGroup!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccountGroup = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CostCenter> CostCentersAllowed {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCentersAllowed(CostCenter value)
		        {
					if(this.CostCentersAllowed == null)
					{
						this.CostCentersAllowed = new global::System.Collections.Generic.List<CostCenter>(); 
					}
		            this.CostCentersAllowed.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? CostUnitAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitAccount(global::System.Boolean? value)
		        {
				    if(this.CostUnitAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostUnitAccount = value;
		            return this;
		        }	

				public global::System.String AccountNumber {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithAccountNumber(global::System.String value)
		        {
				    if(this.AccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AccountNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Product> CostUnitsAllowed {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitsAllowed(Product value)
		        {
					if(this.CostUnitsAllowed == null)
					{
						this.CostUnitsAllowed = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.CostUnitsAllowed.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? Protected {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithProtected(global::System.Boolean? value)
		        {
				    if(this.Protected!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Protected = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class GeneralLedgerAccounts : global::Allors.ObjectsBase<GeneralLedgerAccount>
	{
		public GeneralLedgerAccounts(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaGeneralLedgerAccount Meta
		{
			get
			{
				return Allors.Meta.MetaGeneralLedgerAccount.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}