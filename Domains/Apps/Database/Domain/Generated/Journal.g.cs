// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Journal : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public Journal(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaJournal Meta
		{
			get
			{
				return Allors.Meta.MetaJournal.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Journal Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Journal) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Boolean UseAsDefault 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.UseAsDefault.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UseAsDefault.RelationType, value);
			}
		}

		virtual public bool ExistUseAsDefault{
			get
			{
				return Strategy.ExistUnitRole(Meta.UseAsDefault.RelationType);
			}
		}

		virtual public void RemoveUseAsDefault()
		{
			Strategy.RemoveUnitRole(Meta.UseAsDefault.RelationType);
		}


		virtual public OrganisationGlAccount GlPaymentInTransit
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.GlPaymentInTransit.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GlPaymentInTransit.RelationType, value);
			}
		}

		virtual public bool ExistGlPaymentInTransit
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GlPaymentInTransit.RelationType);
			}
		}

		virtual public void RemoveGlPaymentInTransit()
		{
			Strategy.RemoveCompositeRole(Meta.GlPaymentInTransit.RelationType);
		}


		virtual public JournalType JournalType
		{ 
			get
			{
				return (JournalType) Strategy.GetCompositeRole(Meta.JournalType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.JournalType.RelationType, value);
			}
		}

		virtual public bool ExistJournalType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.JournalType.RelationType);
			}
		}

		virtual public void RemoveJournalType()
		{
			Strategy.RemoveCompositeRole(Meta.JournalType.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Boolean BlockUnpaidTransactions 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.BlockUnpaidTransactions.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockUnpaidTransactions.RelationType, value);
			}
		}

		virtual public bool ExistBlockUnpaidTransactions{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockUnpaidTransactions.RelationType);
			}
		}

		virtual public void RemoveBlockUnpaidTransactions()
		{
			Strategy.RemoveUnitRole(Meta.BlockUnpaidTransactions.RelationType);
		}


		virtual public OrganisationGlAccount ContraAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.ContraAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContraAccount.RelationType, value);
			}
		}

		virtual public bool ExistContraAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContraAccount.RelationType);
			}
		}

		virtual public void RemoveContraAccount()
		{
			Strategy.RemoveCompositeRole(Meta.ContraAccount.RelationType);
		}


		virtual public JournalType PreviousJournalType
		{ 
			get
			{
				return (JournalType) Strategy.GetCompositeRole(Meta.PreviousJournalType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousJournalType.RelationType, value);
			}
		}

		virtual public bool ExistPreviousJournalType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousJournalType.RelationType);
			}
		}

		virtual public void RemovePreviousJournalType()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousJournalType.RelationType);
		}


		virtual public OrganisationGlAccount PreviousContraAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.PreviousContraAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousContraAccount.RelationType, value);
			}
		}

		virtual public bool ExistPreviousContraAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousContraAccount.RelationType);
			}
		}

		virtual public void RemovePreviousContraAccount()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousContraAccount.RelationType);
		}


		virtual public global::Allors.Extent<JournalEntry> JournalEntries
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.JournalEntries.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.JournalEntries.RelationType, value);
			}
		}

		virtual public void AddJournalEntry (JournalEntry value)
		{
			Strategy.AddCompositeRole(Meta.JournalEntries.RelationType, value);
		}

		virtual public void RemoveJournalEntry (JournalEntry value)
		{
			Strategy.RemoveCompositeRole(Meta.JournalEntries.RelationType, value);
		}

		virtual public bool ExistJournalEntries
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.JournalEntries.RelationType);
			}
		}

		virtual public void RemoveJournalEntries()
		{
			Strategy.RemoveCompositeRoles(Meta.JournalEntries.RelationType);
		}


		virtual public global::System.Boolean CloseWhenInBalance 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CloseWhenInBalance.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CloseWhenInBalance.RelationType, value);
			}
		}

		virtual public bool ExistCloseWhenInBalance{
			get
			{
				return Strategy.ExistUnitRole(Meta.CloseWhenInBalance.RelationType);
			}
		}

		virtual public void RemoveCloseWhenInBalance()
		{
			Strategy.RemoveUnitRole(Meta.CloseWhenInBalance.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<PaymentMethod> PaymentMethodsWhereJournal
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentMethodsWhereJournal.RelationType);
			}
		}

		virtual public bool ExistPaymentMethodsWhereJournal
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentMethodsWhereJournal.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new JournalOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new JournalOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new JournalOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new JournalOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new JournalOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new JournalOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new JournalOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new JournalOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new JournalOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new JournalOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class JournalBuilder : Allors.ObjectBuilder<Journal> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public JournalBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Journal instance)
		{
			

			if(this.UseAsDefault.HasValue)
			{
				instance.UseAsDefault = this.UseAsDefault.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.BlockUnpaidTransactions.HasValue)
			{
				instance.BlockUnpaidTransactions = this.BlockUnpaidTransactions.Value;
			}			
		
		
			

			if(this.CloseWhenInBalance.HasValue)
			{
				instance.CloseWhenInBalance = this.CloseWhenInBalance.Value;
			}			
		
		

			instance.GlPaymentInTransit = this.GlPaymentInTransit;

		

			instance.JournalType = this.JournalType;

		

			instance.ContraAccount = this.ContraAccount;

						
			if(this.JournalEntries!=null)
			{
				instance.JournalEntries = this.JournalEntries.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Boolean? UseAsDefault {get; set;}

				/// <exclude/>
				public JournalBuilder WithUseAsDefault(global::System.Boolean? value)
		        {
				    if(this.UseAsDefault!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UseAsDefault = value;
		            return this;
		        }	

				public OrganisationGlAccount GlPaymentInTransit {get; set;}

				/// <exclude/>
				public JournalBuilder WithGlPaymentInTransit(OrganisationGlAccount value)
		        {
		            if(this.GlPaymentInTransit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GlPaymentInTransit = value;
		            return this;
		        }		

				
				public JournalType JournalType {get; set;}

				/// <exclude/>
				public JournalBuilder WithJournalType(JournalType value)
		        {
		            if(this.JournalType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.JournalType = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public JournalBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Boolean? BlockUnpaidTransactions {get; set;}

				/// <exclude/>
				public JournalBuilder WithBlockUnpaidTransactions(global::System.Boolean? value)
		        {
				    if(this.BlockUnpaidTransactions!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockUnpaidTransactions = value;
		            return this;
		        }	

				public OrganisationGlAccount ContraAccount {get; set;}

				/// <exclude/>
				public JournalBuilder WithContraAccount(OrganisationGlAccount value)
		        {
		            if(this.ContraAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ContraAccount = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<JournalEntry> JournalEntries {get; set;}	

				/// <exclude/>
				public JournalBuilder WithJournalEntry(JournalEntry value)
		        {
					if(this.JournalEntries == null)
					{
						this.JournalEntries = new global::System.Collections.Generic.List<JournalEntry>(); 
					}
		            this.JournalEntries.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? CloseWhenInBalance {get; set;}

				/// <exclude/>
				public JournalBuilder WithCloseWhenInBalance(global::System.Boolean? value)
		        {
				    if(this.CloseWhenInBalance!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CloseWhenInBalance = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public JournalBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public JournalBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Journals : global::Allors.ObjectsBase<Journal>
	{
		public Journals(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaJournal Meta
		{
			get
			{
				return Allors.Meta.MetaJournal.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}