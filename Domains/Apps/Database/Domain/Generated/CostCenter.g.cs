// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class CostCenter : Allors.IObject , AccessControlledObject, UniquelyIdentifiable
	{
		private readonly IStrategy strategy;

		public CostCenter(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaCostCenter Meta
		{
			get
			{
				return Allors.Meta.MetaCostCenter.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static CostCenter Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (CostCenter) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public OrganisationGlAccount InternalTransferGlAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.InternalTransferGlAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternalTransferGlAccount.RelationType, value);
			}
		}

		virtual public bool ExistInternalTransferGlAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternalTransferGlAccount.RelationType);
			}
		}

		virtual public void RemoveInternalTransferGlAccount()
		{
			Strategy.RemoveCompositeRole(Meta.InternalTransferGlAccount.RelationType);
		}


		virtual public global::Allors.Extent<CostCenterCategory> CostCenterCategories
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CostCenterCategories.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CostCenterCategories.RelationType, value);
			}
		}

		virtual public void AddCostCenterCategory (CostCenterCategory value)
		{
			Strategy.AddCompositeRole(Meta.CostCenterCategories.RelationType, value);
		}

		virtual public void RemoveCostCenterCategory (CostCenterCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.CostCenterCategories.RelationType, value);
		}

		virtual public bool ExistCostCenterCategories
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CostCenterCategories.RelationType);
			}
		}

		virtual public void RemoveCostCenterCategories()
		{
			Strategy.RemoveCompositeRoles(Meta.CostCenterCategories.RelationType);
		}


		virtual public OrganisationGlAccount RedistributedCostsGlAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.RedistributedCostsGlAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RedistributedCostsGlAccount.RelationType, value);
			}
		}

		virtual public bool ExistRedistributedCostsGlAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RedistributedCostsGlAccount.RelationType);
			}
		}

		virtual public void RemoveRedistributedCostsGlAccount()
		{
			Strategy.RemoveCompositeRole(Meta.RedistributedCostsGlAccount.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.Boolean? Active 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.Active.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Active.RelationType, value);
			}
		}

		virtual public bool ExistActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.Active.RelationType);
			}
		}

		virtual public void RemoveActive()
		{
			Strategy.RemoveUnitRole(Meta.Active.RelationType);
		}


		virtual public global::System.Boolean? UseGlAccountOfBooking 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UseGlAccountOfBooking.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UseGlAccountOfBooking.RelationType, value);
			}
		}

		virtual public bool ExistUseGlAccountOfBooking{
			get
			{
				return Strategy.ExistUnitRole(Meta.UseGlAccountOfBooking.RelationType);
			}
		}

		virtual public void RemoveUseGlAccountOfBooking()
		{
			Strategy.RemoveUnitRole(Meta.UseGlAccountOfBooking.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public global::Allors.Extent<GeneralLedgerAccount> GeneralLedgerAccountsWhereDefaultCostCenter
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GeneralLedgerAccountsWhereDefaultCostCenter.RelationType);
			}
		}

		virtual public bool ExistGeneralLedgerAccountsWhereDefaultCostCenter
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GeneralLedgerAccountsWhereDefaultCostCenter.RelationType);
			}
		}


		virtual public global::Allors.Extent<GeneralLedgerAccount> GeneralLedgerAccountsWhereCostCentersAllowed
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GeneralLedgerAccountsWhereCostCentersAllowed.RelationType);
			}
		}

		virtual public bool ExistGeneralLedgerAccountsWhereCostCentersAllowed
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GeneralLedgerAccountsWhereCostCentersAllowed.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CostCenterOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CostCenterOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CostCenterOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CostCenterOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CostCenterOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CostCenterOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CostCenterOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CostCenterOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CostCenterOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CostCenterOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class CostCenterBuilder : Allors.ObjectBuilder<CostCenter> , AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, global::System.IDisposable
	{		
		public CostCenterBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(CostCenter instance)
		{

			instance.Description = this.Description;
		
		

			instance.Name = this.Name;
		
		
			

			if(this.Active.HasValue)
			{
				instance.Active = this.Active.Value;
			}			
		
		
			

			if(this.UseGlAccountOfBooking.HasValue)
			{
				instance.UseGlAccountOfBooking = this.UseGlAccountOfBooking.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.InternalTransferGlAccount = this.InternalTransferGlAccount;

		
			if(this.CostCenterCategories!=null)
			{
				instance.CostCenterCategories = this.CostCenterCategories.ToArray();
			}
		

			instance.RedistributedCostsGlAccount = this.RedistributedCostsGlAccount;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Description {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public OrganisationGlAccount InternalTransferGlAccount {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithInternalTransferGlAccount(OrganisationGlAccount value)
		        {
		            if(this.InternalTransferGlAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalTransferGlAccount = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CostCenterCategory> CostCenterCategories {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithCostCenterCategory(CostCenterCategory value)
		        {
					if(this.CostCenterCategories == null)
					{
						this.CostCenterCategories = new global::System.Collections.Generic.List<CostCenterCategory>(); 
					}
		            this.CostCenterCategories.Add(value);
		            return this;
		        }		

				
				public OrganisationGlAccount RedistributedCostsGlAccount {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithRedistributedCostsGlAccount(OrganisationGlAccount value)
		        {
		            if(this.RedistributedCostsGlAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RedistributedCostsGlAccount = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Boolean? Active {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithActive(global::System.Boolean? value)
		        {
				    if(this.Active!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Active = value;
		            return this;
		        }	

				public global::System.Boolean? UseGlAccountOfBooking {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithUseGlAccountOfBooking(global::System.Boolean? value)
		        {
				    if(this.UseGlAccountOfBooking!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UseGlAccountOfBooking = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class CostCenters : global::Allors.ObjectsBase<CostCenter>
	{
		public CostCenters(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaCostCenter Meta
		{
			get
			{
				return Allors.Meta.MetaCostCenter.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}