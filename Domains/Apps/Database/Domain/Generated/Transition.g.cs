// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Transition : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public Transition(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaTransition Meta
		{
			get
			{
				return Allors.Meta.MetaTransition.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Transition Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Transition) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<ObjectState> FromStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FromStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FromStates.RelationType, value);
			}
		}

		virtual public void AddFromState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.FromStates.RelationType, value);
		}

		virtual public void RemoveFromState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.FromStates.RelationType, value);
		}

		virtual public bool ExistFromStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FromStates.RelationType);
			}
		}

		virtual public void RemoveFromStates()
		{
			Strategy.RemoveCompositeRoles(Meta.FromStates.RelationType);
		}


		virtual public ObjectState ToState
		{ 
			get
			{
				return (ObjectState) Strategy.GetCompositeRole(Meta.ToState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ToState.RelationType, value);
			}
		}

		virtual public bool ExistToState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ToState.RelationType);
			}
		}

		virtual public void RemoveToState()
		{
			Strategy.RemoveCompositeRole(Meta.ToState.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new TransitionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TransitionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TransitionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TransitionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TransitionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TransitionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TransitionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TransitionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TransitionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TransitionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class TransitionBuilder : Allors.ObjectBuilder<Transition> , ObjectBuilder, global::System.IDisposable
	{		
		public TransitionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Transition instance)
		{
			if(this.FromStates!=null)
			{
				instance.FromStates = this.FromStates.ToArray();
			}
		

			instance.ToState = this.ToState;

		
		}


				public global::System.Collections.Generic.List<ObjectState> FromStates {get; set;}	

				/// <exclude/>
				public TransitionBuilder WithFromState(ObjectState value)
		        {
					if(this.FromStates == null)
					{
						this.FromStates = new global::System.Collections.Generic.List<ObjectState>(); 
					}
		            this.FromStates.Add(value);
		            return this;
		        }		

				
				public ObjectState ToState {get; set;}

				/// <exclude/>
				public TransitionBuilder WithToState(ObjectState value)
		        {
		            if(this.ToState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ToState = value;
		            return this;
		        }		

				

	}

	public partial class Transitions : global::Allors.ObjectsBase<Transition>
	{
		public Transitions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaTransition Meta
		{
			get
			{
				return Allors.Meta.MetaTransition.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}