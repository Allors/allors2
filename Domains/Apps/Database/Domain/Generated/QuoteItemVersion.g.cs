// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class QuoteItemVersion : Allors.IObject , Version
	{
		private readonly IStrategy strategy;

		public QuoteItemVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaQuoteItemVersion Meta
		{
			get
			{
				return Allors.Meta.MetaQuoteItemVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static QuoteItemVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (QuoteItemVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public QuoteItemState QuoteItemState
		{ 
			get
			{
				return (QuoteItemState) Strategy.GetCompositeRole(Meta.QuoteItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteItemState.RelationType, value);
			}
		}

		virtual public bool ExistQuoteItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteItemState.RelationType);
			}
		}

		virtual public void RemoveQuoteItemState()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItemState.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public Party Authorizer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Authorizer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer.RelationType, value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer.RelationType);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer.RelationType);
		}


		virtual public Deliverable Deliverable
		{ 
			get
			{
				return (Deliverable) Strategy.GetCompositeRole(Meta.Deliverable.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Deliverable.RelationType, value);
			}
		}

		virtual public bool ExistDeliverable
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Deliverable.RelationType);
			}
		}

		virtual public void RemoveDeliverable()
		{
			Strategy.RemoveCompositeRole(Meta.Deliverable.RelationType);
		}


		virtual public Product Product
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.Product.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Product.RelationType, value);
			}
		}

		virtual public bool ExistProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Product.RelationType);
			}
		}

		virtual public void RemoveProduct()
		{
			Strategy.RemoveCompositeRole(Meta.Product.RelationType);
		}


		virtual public global::System.DateTime? EstimatedDeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EstimatedDeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedDeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedDeliveryDate.RelationType);
			}
		}

		virtual public void RemoveEstimatedDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedDeliveryDate.RelationType);
		}


		virtual public global::System.DateTime? RequiredByDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RequiredByDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredByDate.RelationType, value);
			}
		}

		virtual public bool ExistRequiredByDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredByDate.RelationType);
			}
		}

		virtual public void RemoveRequiredByDate()
		{
			Strategy.RemoveUnitRole(Meta.RequiredByDate.RelationType);
		}


		virtual public UnitOfMeasure UnitOfMeasure
		{ 
			get
			{
				return (UnitOfMeasure) Strategy.GetCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.UnitOfMeasure.RelationType, value);
			}
		}

		virtual public bool ExistUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasure()
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasure.RelationType);
		}


		virtual public ProductFeature ProductFeature
		{ 
			get
			{
				return (ProductFeature) Strategy.GetCompositeRole(Meta.ProductFeature.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductFeature.RelationType, value);
			}
		}

		virtual public bool ExistProductFeature
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductFeature.RelationType);
			}
		}

		virtual public void RemoveProductFeature()
		{
			Strategy.RemoveCompositeRole(Meta.ProductFeature.RelationType);
		}


		virtual public global::System.Decimal? UnitPrice 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.UnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitPrice.RelationType);
			}
		}

		virtual public void RemoveUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.UnitPrice.RelationType);
		}


		virtual public Skill Skill
		{ 
			get
			{
				return (Skill) Strategy.GetCompositeRole(Meta.Skill.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Skill.RelationType, value);
			}
		}

		virtual public bool ExistSkill
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Skill.RelationType);
			}
		}

		virtual public void RemoveSkill()
		{
			Strategy.RemoveCompositeRole(Meta.Skill.RelationType);
		}


		virtual public WorkEffort WorkEffort
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeRole(Meta.WorkEffort.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffort.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffort.RelationType);
			}
		}

		virtual public void RemoveWorkEffort()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffort.RelationType);
		}


		virtual public global::Allors.Extent<QuoteTerm> QuoteTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.QuoteTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.QuoteTerms.RelationType, value);
			}
		}

		virtual public void AddQuoteTerm (QuoteTerm value)
		{
			Strategy.AddCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public void RemoveQuoteTerm (QuoteTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public bool ExistQuoteTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.QuoteTerms.RelationType);
			}
		}

		virtual public void RemoveQuoteTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.QuoteTerms.RelationType);
		}


		virtual public global::System.Int32? Quantity 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public RequestItem RequestItem
		{ 
			get
			{
				return (RequestItem) Strategy.GetCompositeRole(Meta.RequestItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequestItem.RelationType, value);
			}
		}

		virtual public bool ExistRequestItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequestItem.RelationType);
			}
		}

		virtual public void RemoveRequestItem()
		{
			Strategy.RemoveCompositeRole(Meta.RequestItem.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public QuoteItem QuoteItemWhereCurrentVersion
		{ 
			get
			{
				return (QuoteItem) Strategy.GetCompositeAssociation(Meta.QuoteItemWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistQuoteItemWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.QuoteItemWhereCurrentVersion.RelationType);
			}
		}


		virtual public QuoteItem QuoteItemWhereAllVersion
		{ 
			get
			{
				return (QuoteItem) Strategy.GetCompositeAssociation(Meta.QuoteItemWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistQuoteItemWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.QuoteItemWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new QuoteItemVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new QuoteItemVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new QuoteItemVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new QuoteItemVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new QuoteItemVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new QuoteItemVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new QuoteItemVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new QuoteItemVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new QuoteItemVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new QuoteItemVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class QuoteItemVersionBuilder : Allors.ObjectBuilder<QuoteItemVersion> , VersionBuilder, global::System.IDisposable
	{		
		public QuoteItemVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(QuoteItemVersion instance)
		{

			instance.InternalComment = this.InternalComment;
		
		
			

			if(this.EstimatedDeliveryDate.HasValue)
			{
				instance.EstimatedDeliveryDate = this.EstimatedDeliveryDate.Value;
			}			
		
				
			

			if(this.UnitPrice.HasValue)
			{
				instance.UnitPrice = this.UnitPrice.Value;
			}			
		
		
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		
		

			instance.Authorizer = this.Authorizer;

		

			instance.Deliverable = this.Deliverable;

		

			instance.Product = this.Product;

		

			instance.UnitOfMeasure = this.UnitOfMeasure;

		

			instance.ProductFeature = this.ProductFeature;

		

			instance.Skill = this.Skill;

		

			instance.WorkEffort = this.WorkEffort;

		
			if(this.QuoteTerms!=null)
			{
				instance.QuoteTerms = this.QuoteTerms.ToArray();
			}
		

			instance.RequestItem = this.RequestItem;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public Party Authorizer {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithAuthorizer(Party value)
		        {
		            if(this.Authorizer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Authorizer = value;
		            return this;
		        }		

				
				public Deliverable Deliverable {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithDeliverable(Deliverable value)
		        {
		            if(this.Deliverable!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Deliverable = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public global::System.DateTime? EstimatedDeliveryDate {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithEstimatedDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.EstimatedDeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedDeliveryDate = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitPrice {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithUnitPrice(global::System.Decimal? value)
		        {
				    if(this.UnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitPrice = value;
		            return this;
		        }	

				public Skill Skill {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithSkill(Skill value)
		        {
		            if(this.Skill!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Skill = value;
		            return this;
		        }		

				
				public WorkEffort WorkEffort {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithWorkEffort(WorkEffort value)
		        {
		            if(this.WorkEffort!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffort = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<QuoteTerm> QuoteTerms {get; set;}	

				/// <exclude/>
				public QuoteItemVersionBuilder WithQuoteTerm(QuoteTerm value)
		        {
					if(this.QuoteTerms == null)
					{
						this.QuoteTerms = new global::System.Collections.Generic.List<QuoteTerm>(); 
					}
		            this.QuoteTerms.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? Quantity {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithQuantity(global::System.Int32? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public RequestItem RequestItem {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithRequestItem(RequestItem value)
		        {
		            if(this.RequestItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequestItem = value;
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public QuoteItemVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public QuoteItemVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public QuoteItemVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class QuoteItemVersions : global::Allors.ObjectsBase<QuoteItemVersion>
	{
		public QuoteItemVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaQuoteItemVersion Meta
		{
			get
			{
				return Allors.Meta.MetaQuoteItemVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}