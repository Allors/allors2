// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PurchaseOrderItem : Allors.IObject , OrderItem, Versioned
	{
		private readonly IStrategy strategy;

		public PurchaseOrderItem(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPurchaseOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaPurchaseOrderItem.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PurchaseOrderItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PurchaseOrderItem) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public PurchaseOrderItemState PreviousPurchaseOrderItemState
		{ 
			get
			{
				return (PurchaseOrderItemState) Strategy.GetCompositeRole(Meta.PreviousPurchaseOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPurchaseOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPurchaseOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPurchaseOrderItemState.RelationType);
			}
		}

		virtual public void RemovePreviousPurchaseOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPurchaseOrderItemState.RelationType);
		}


		virtual public PurchaseOrderItemState LastPurchaseOrderItemState
		{ 
			get
			{
				return (PurchaseOrderItemState) Strategy.GetCompositeRole(Meta.LastPurchaseOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPurchaseOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistLastPurchaseOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPurchaseOrderItemState.RelationType);
			}
		}

		virtual public void RemoveLastPurchaseOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPurchaseOrderItemState.RelationType);
		}


		virtual public PurchaseOrderItemState PurchaseOrderItemState
		{ 
			get
			{
				return (PurchaseOrderItemState) Strategy.GetCompositeRole(Meta.PurchaseOrderItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderItemState.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderItemState.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderItemState()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderItemState.RelationType);
		}


		virtual public PurchaseOrderItemVersion CurrentVersion
		{ 
			get
			{
				return (PurchaseOrderItemVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PurchaseOrderItemVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PurchaseOrderItemVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PurchaseOrderItemVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::System.Decimal QuantityReceived 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityReceived.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityReceived.RelationType, value);
			}
		}

		virtual public bool ExistQuantityReceived{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityReceived.RelationType);
			}
		}

		virtual public void RemoveQuantityReceived()
		{
			Strategy.RemoveUnitRole(Meta.QuantityReceived.RelationType);
		}


		virtual public Product Product
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.Product.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Product.RelationType, value);
			}
		}

		virtual public bool ExistProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Product.RelationType);
			}
		}

		virtual public void RemoveProduct()
		{
			Strategy.RemoveCompositeRole(Meta.Product.RelationType);
		}


		virtual public Part Part
		{ 
			get
			{
				return (Part) Strategy.GetCompositeRole(Meta.Part.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Part.RelationType, value);
			}
		}

		virtual public bool ExistPart
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Part.RelationType);
			}
		}

		virtual public void RemovePart()
		{
			Strategy.RemoveCompositeRole(Meta.Part.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public BudgetItem BudgetItem
		{ 
			get
			{
				return (BudgetItem) Strategy.GetCompositeRole(Meta.BudgetItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BudgetItem.RelationType, value);
			}
		}

		virtual public bool ExistBudgetItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BudgetItem.RelationType);
			}
		}

		virtual public void RemoveBudgetItem()
		{
			Strategy.RemoveCompositeRole(Meta.BudgetItem.RelationType);
		}


		virtual public global::System.Decimal PreviousQuantity 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.PreviousQuantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PreviousQuantity.RelationType, value);
			}
		}

		virtual public bool ExistPreviousQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.PreviousQuantity.RelationType);
			}
		}

		virtual public void RemovePreviousQuantity()
		{
			Strategy.RemoveUnitRole(Meta.PreviousQuantity.RelationType);
		}


		virtual public global::System.Decimal QuantityOrdered 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityOrdered.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityOrdered.RelationType, value);
			}
		}

		virtual public bool ExistQuantityOrdered{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityOrdered.RelationType);
			}
		}

		virtual public void RemoveQuantityOrdered()
		{
			Strategy.RemoveUnitRole(Meta.QuantityOrdered.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public PurchaseOrder CorrespondingPurchaseOrder
		{ 
			get
			{
				return (PurchaseOrder) Strategy.GetCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType, value);
			}
		}

		virtual public bool ExistCorrespondingPurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
			}
		}

		virtual public void RemoveCorrespondingPurchaseOrder()
		{
			Strategy.RemoveCompositeRole(Meta.CorrespondingPurchaseOrder.RelationType);
		}


		virtual public global::System.Decimal TotalOrderAdjustmentCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalOrderAdjustmentCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalOrderAdjustmentCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalOrderAdjustmentCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalOrderAdjustment 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalOrderAdjustment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalOrderAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistTotalOrderAdjustment{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalOrderAdjustment.RelationType);
			}
		}

		virtual public void RemoveTotalOrderAdjustment()
		{
			Strategy.RemoveUnitRole(Meta.TotalOrderAdjustment.RelationType);
		}


		virtual public QuoteItem QuoteItem
		{ 
			get
			{
				return (QuoteItem) Strategy.GetCompositeRole(Meta.QuoteItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteItem.RelationType, value);
			}
		}

		virtual public bool ExistQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteItem.RelationType);
			}
		}

		virtual public void RemoveQuoteItem()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItem.RelationType);
		}


		virtual public global::System.DateTime? AssignedDeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AssignedDeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AssignedDeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistAssignedDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.AssignedDeliveryDate.RelationType);
			}
		}

		virtual public void RemoveAssignedDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.AssignedDeliveryDate.RelationType);
		}


		virtual public global::System.DateTime? DeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeliveryDate.RelationType);
			}
		}

		virtual public void RemoveDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.DeliveryDate.RelationType);
		}


		virtual public global::Allors.Extent<OrderTerm> OrderTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderTerms.RelationType, value);
			}
		}

		virtual public void AddOrderTerm (OrderTerm value)
		{
			Strategy.AddCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public void RemoveOrderTerm (OrderTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public bool ExistOrderTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderTerms.RelationType);
			}
		}

		virtual public void RemoveOrderTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderTerms.RelationType);
		}


		virtual public global::System.String ShippingInstruction 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ShippingInstruction.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShippingInstruction.RelationType, value);
			}
		}

		virtual public bool ExistShippingInstruction{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShippingInstruction.RelationType);
			}
		}

		virtual public void RemoveShippingInstruction()
		{
			Strategy.RemoveUnitRole(Meta.ShippingInstruction.RelationType);
		}


		virtual public global::Allors.Extent<OrderItem> Associations
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Associations.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Associations.RelationType, value);
			}
		}

		virtual public void AddAssociation (OrderItem value)
		{
			Strategy.AddCompositeRole(Meta.Associations.RelationType, value);
		}

		virtual public void RemoveAssociation (OrderItem value)
		{
			Strategy.RemoveCompositeRole(Meta.Associations.RelationType, value);
		}

		virtual public bool ExistAssociations
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Associations.RelationType);
			}
		}

		virtual public void RemoveAssociations()
		{
			Strategy.RemoveCompositeRoles(Meta.Associations.RelationType);
		}


		virtual public global::System.String Message 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Message.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Message.RelationType, value);
			}
		}

		virtual public bool ExistMessage{
			get
			{
				return Strategy.ExistUnitRole(Meta.Message.RelationType);
			}
		}

		virtual public void RemoveMessage()
		{
			Strategy.RemoveUnitRole(Meta.Message.RelationType);
		}


		virtual public global::System.Decimal? TotalDiscountAsPercentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountAsPercentage.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountAsPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountAsPercentage()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountAsPercentage.RelationType);
		}


		virtual public DiscountAdjustment DiscountAdjustment
		{ 
			get
			{
				return (DiscountAdjustment) Strategy.GetCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DiscountAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistDiscountAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
		}

		virtual public void RemoveDiscountAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.DiscountAdjustment.RelationType);
		}


		virtual public global::System.Decimal UnitVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitVat.RelationType, value);
			}
		}

		virtual public bool ExistUnitVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitVat.RelationType);
			}
		}

		virtual public void RemoveUnitVat()
		{
			Strategy.RemoveUnitRole(Meta.UnitVat.RelationType);
		}


		virtual public global::System.Decimal TotalVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVat.RelationType);
			}
		}

		virtual public void RemoveTotalVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalVat.RelationType);
		}


		virtual public global::System.Decimal UnitSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistUnitSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitSurcharge.RelationType);
			}
		}

		virtual public void RemoveUnitSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.UnitSurcharge.RelationType);
		}


		virtual public global::System.Decimal UnitDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitDiscount.RelationType, value);
			}
		}

		virtual public bool ExistUnitDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitDiscount.RelationType);
			}
		}

		virtual public void RemoveUnitDiscount()
		{
			Strategy.RemoveUnitRole(Meta.UnitDiscount.RelationType);
		}


		virtual public global::System.Decimal TotalExVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalExVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
		}


		virtual public VatRate DerivedVatRate
		{ 
			get
			{
				return (VatRate) Strategy.GetCompositeRole(Meta.DerivedVatRate.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DerivedVatRate.RelationType, value);
			}
		}

		virtual public bool ExistDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DerivedVatRate.RelationType);
			}
		}

		virtual public void RemoveDerivedVatRate()
		{
			Strategy.RemoveCompositeRole(Meta.DerivedVatRate.RelationType);
		}


		virtual public global::System.Decimal? ActualUnitPrice 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ActualUnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualUnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistActualUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualUnitPrice.RelationType);
			}
		}

		virtual public void RemoveActualUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.ActualUnitPrice.RelationType);
		}


		virtual public global::System.Decimal TotalIncVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalIncVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal UnitBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistUnitBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitBasePrice.RelationType);
			}
		}

		virtual public void RemoveUnitBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.UnitBasePrice.RelationType);
		}


		virtual public global::System.Decimal CalculatedUnitPrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.CalculatedUnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CalculatedUnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistCalculatedUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.CalculatedUnitPrice.RelationType);
			}
		}

		virtual public void RemoveCalculatedUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.CalculatedUnitPrice.RelationType);
		}


		virtual public global::System.Decimal TotalSurchargeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalIncVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVat.RelationType);
			}
		}

		virtual public void RemoveTotalIncVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVat.RelationType);
		}


		virtual public global::System.Decimal? TotalSurchargeAsPercentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeAsPercentage.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeAsPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeAsPercentage()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeAsPercentage.RelationType);
		}


		virtual public global::System.Decimal TotalDiscountCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscount.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscount.RelationType);
			}
		}

		virtual public void RemoveTotalDiscount()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscount.RelationType);
		}


		virtual public global::System.Decimal TotalSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurcharge.RelationType);
			}
		}

		virtual public void RemoveTotalSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurcharge.RelationType);
		}


		virtual public VatRegime AssignedVatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.AssignedVatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AssignedVatRegime.RelationType, value);
			}
		}

		virtual public bool ExistAssignedVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AssignedVatRegime.RelationType);
			}
		}

		virtual public void RemoveAssignedVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.AssignedVatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePrice.RelationType);
			}
		}

		virtual public void RemoveTotalBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePrice.RelationType);
		}


		virtual public global::System.Decimal TotalExVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVat.RelationType);
			}
		}

		virtual public void RemoveTotalExVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVat.RelationType);
		}


		virtual public global::System.Decimal TotalBasePriceCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePriceCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalBasePriceCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
		}


		virtual public global::Allors.Extent<PriceComponent> CurrentPriceComponents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentPriceComponents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentPriceComponents.RelationType, value);
			}
		}

		virtual public void AddCurrentPriceComponent (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.CurrentPriceComponents.RelationType, value);
		}

		virtual public void RemoveCurrentPriceComponent (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentPriceComponents.RelationType, value);
		}

		virtual public bool ExistCurrentPriceComponents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentPriceComponents.RelationType);
			}
		}

		virtual public void RemoveCurrentPriceComponents()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentPriceComponents.RelationType);
		}


		virtual public SurchargeAdjustment SurchargeAdjustment
		{ 
			get
			{
				return (SurchargeAdjustment) Strategy.GetCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SurchargeAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistSurchargeAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
		}

		virtual public void RemoveSurchargeAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.SurchargeAdjustment.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWherePurchaseOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWherePurchaseOrderItem.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWherePurchaseOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWherePurchaseOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderShipment> OrderShipmentsWherePurchaseOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderShipmentsWherePurchaseOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderShipmentsWherePurchaseOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderShipmentsWherePurchaseOrderItem.RelationType);
			}
		}


		virtual public PurchaseOrder PurchaseOrderWherePurchaseOrderItem
		{ 
			get
			{
				return (PurchaseOrder) Strategy.GetCompositeAssociation(Meta.PurchaseOrderWherePurchaseOrderItem.RelationType);
			}
		} 

		virtual public bool ExistPurchaseOrderWherePurchaseOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PurchaseOrderWherePurchaseOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereOrderedWithFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereOrderedWithFeature.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereOrderedWithFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereOrderedWithFeature.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemBilling> OrderItemBillingsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemBillingsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderItemBillingsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemBillingsWhereOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderRequirementCommitment> OrderRequirementCommitmentsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderRequirementCommitmentsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderRequirementCommitmentsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderRequirementCommitmentsWhereOrderItem.RelationType);
			}
		}


		virtual public SalesOrderItem SalesOrderItemWhereOrderedWithFeature
		{ 
			get
			{
				return (SalesOrderItem) Strategy.GetCompositeAssociation(Meta.SalesOrderItemWhereOrderedWithFeature.RelationType);
			}
		} 

		virtual public bool ExistSalesOrderItemWhereOrderedWithFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SalesOrderItemWhereOrderedWithFeature.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentReceipt> ShipmentReceiptsWhereOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentReceiptsWhereOrderItem.RelationType);
			}
		}

		virtual public bool ExistShipmentReceiptsWhereOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentReceiptsWhereOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemVersion> OrderItemVersionsWhereAssociation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemVersionsWhereAssociation.RelationType);
			}
		}

		virtual public bool ExistOrderItemVersionsWhereAssociation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemVersionsWhereAssociation.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderVersion> OrderVersionsWhereValidOrderItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderVersionsWhereValidOrderItem.RelationType);
			}
		}

		virtual public bool ExistOrderVersionsWhereValidOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderVersionsWhereValidOrderItem.RelationType);
			}
		}


		virtual public Order OrderWhereValidOrderItem
		{ 
			get
			{
				return (Order) Strategy.GetCompositeAssociation(Meta.OrderWhereValidOrderItem.RelationType);
			}
		} 

		virtual public bool ExistOrderWhereValidOrderItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrderWhereValidOrderItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItem> OrderItemsWhereAssociation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemsWhereAssociation.RelationType);
			}
		}

		virtual public bool ExistOrderItemsWhereAssociation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemsWhereAssociation.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereOrderItemFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereOrderItemFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereOrderItemFulfillment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereOrderItemFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereOrderItemFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereOrderItemFulfillment.RelationType);
			}
		}



		public PurchaseOrderItemComplete Complete()
		{ 
			var method = new PurchaseOrderItemComplete(this);
            method.Execute();
            return method;
		}

		public PurchaseOrderItemComplete Complete(System.Action<PurchaseOrderItemComplete> action)
		{ 
			var method = new PurchaseOrderItemComplete(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemCancel Cancel()
		{ 
			var method = new PurchaseOrderItemCancel(this);
            method.Execute();
            return method;
		}

		public OrderItemCancel Cancel(System.Action<OrderItemCancel> action)
		{ 
			var method = new PurchaseOrderItemCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemReject Reject()
		{ 
			var method = new PurchaseOrderItemReject(this);
            method.Execute();
            return method;
		}

		public OrderItemReject Reject(System.Action<OrderItemReject> action)
		{ 
			var method = new PurchaseOrderItemReject(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemConfirm Confirm()
		{ 
			var method = new PurchaseOrderItemConfirm(this);
            method.Execute();
            return method;
		}

		public OrderItemConfirm Confirm(System.Action<OrderItemConfirm> action)
		{ 
			var method = new PurchaseOrderItemConfirm(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderItemApprove Approve()
		{ 
			var method = new PurchaseOrderItemApprove(this);
            method.Execute();
            return method;
		}

		public OrderItemApprove Approve(System.Action<OrderItemApprove> action)
		{ 
			var method = new PurchaseOrderItemApprove(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PurchaseOrderItemOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PurchaseOrderItemOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PurchaseOrderItemOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PurchaseOrderItemOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PurchaseOrderItemOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PurchaseOrderItemOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PurchaseOrderItemOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PurchaseOrderItemOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PurchaseOrderItemOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PurchaseOrderItemOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PurchaseOrderItemDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PurchaseOrderItemDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PurchaseOrderItemBuilder : Allors.ObjectBuilder<PurchaseOrderItem> , OrderItemBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PurchaseOrderItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PurchaseOrderItem instance)
		{
		

			instance.InternalComment = this.InternalComment;
		
				
			

			if(this.QuantityOrdered.HasValue)
			{
				instance.QuantityOrdered = this.QuantityOrdered.Value;
			}			
		
		

			instance.Description = this.Description;
		
						
			

			if(this.AssignedDeliveryDate.HasValue)
			{
				instance.AssignedDeliveryDate = this.AssignedDeliveryDate.Value;
			}			
		
				

			instance.ShippingInstruction = this.ShippingInstruction;
		
		

			instance.Message = this.Message;
		
																
			

			if(this.ActualUnitPrice.HasValue)
			{
				instance.ActualUnitPrice = this.ActualUnitPrice.Value;
			}			
		
																										

			instance.Comment = this.Comment;
		
		
				

			instance.PurchaseOrderItemState = this.PurchaseOrderItemState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		

			instance.Product = this.Product;

		

			instance.Part = this.Part;

		

			instance.BudgetItem = this.BudgetItem;

		

			instance.CorrespondingPurchaseOrder = this.CorrespondingPurchaseOrder;

		

			instance.QuoteItem = this.QuoteItem;

		
			if(this.OrderTerms!=null)
			{
				instance.OrderTerms = this.OrderTerms.ToArray();
			}
		
			if(this.Associations!=null)
			{
				instance.Associations = this.Associations.ToArray();
			}
		

			instance.DiscountAdjustment = this.DiscountAdjustment;

						

			instance.AssignedVatRegime = this.AssignedVatRegime;

				

			instance.SurchargeAdjustment = this.SurchargeAdjustment;

								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public PurchaseOrderItemState PurchaseOrderItemState {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithPurchaseOrderItemState(PurchaseOrderItemState value)
		        {
		            if(this.PurchaseOrderItemState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseOrderItemState = value;
		            return this;
		        }		

				
				public PurchaseOrderItemVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithCurrentVersion(PurchaseOrderItemVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PurchaseOrderItemVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PurchaseOrderItemBuilder WithAllVersion(PurchaseOrderItemVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PurchaseOrderItemVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public Part Part {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public BudgetItem BudgetItem {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithBudgetItem(BudgetItem value)
		        {
		            if(this.BudgetItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BudgetItem = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityOrdered {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithQuantityOrdered(global::System.Decimal? value)
		        {
				    if(this.QuantityOrdered!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityOrdered = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public PurchaseOrder CorrespondingPurchaseOrder {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithCorrespondingPurchaseOrder(PurchaseOrder value)
		        {
		            if(this.CorrespondingPurchaseOrder!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CorrespondingPurchaseOrder = value;
		            return this;
		        }		

				
				public QuoteItem QuoteItem {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithQuoteItem(QuoteItem value)
		        {
		            if(this.QuoteItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItem = value;
		            return this;
		        }		

				
				public global::System.DateTime? AssignedDeliveryDate {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithAssignedDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.AssignedDeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AssignedDeliveryDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderTerm> OrderTerms {get; set;}	

				/// <exclude/>
				public PurchaseOrderItemBuilder WithOrderTerm(OrderTerm value)
		        {
					if(this.OrderTerms == null)
					{
						this.OrderTerms = new global::System.Collections.Generic.List<OrderTerm>(); 
					}
		            this.OrderTerms.Add(value);
		            return this;
		        }		

				
				public global::System.String ShippingInstruction {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithShippingInstruction(global::System.String value)
		        {
				    if(this.ShippingInstruction!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShippingInstruction = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderItem> Associations {get; set;}	

				/// <exclude/>
				public PurchaseOrderItemBuilder WithAssociation(OrderItem value)
		        {
					if(this.Associations == null)
					{
						this.Associations = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.Associations.Add(value);
		            return this;
		        }		

				
				public global::System.String Message {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? ActualUnitPrice {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithActualUnitPrice(global::System.Decimal? value)
		        {
				    if(this.ActualUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualUnitPrice = value;
		            return this;
		        }	

				public VatRegime AssignedVatRegime {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithAssignedVatRegime(VatRegime value)
		        {
		            if(this.AssignedVatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedVatRegime = value;
		            return this;
		        }		

				
				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PurchaseOrderItemBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PurchaseOrderItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PurchaseOrderItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PurchaseOrderItems : global::Allors.ObjectsBase<PurchaseOrderItem>
	{
		public PurchaseOrderItems(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPurchaseOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaPurchaseOrderItem.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}