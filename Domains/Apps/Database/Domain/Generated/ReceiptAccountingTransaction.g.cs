// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ReceiptAccountingTransaction : Allors.IObject , ExternalAccountingTransaction
	{
		private readonly IStrategy strategy;

		public ReceiptAccountingTransaction(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaReceiptAccountingTransaction Meta
		{
			get
			{
				return Allors.Meta.MetaReceiptAccountingTransaction.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ReceiptAccountingTransaction Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ReceiptAccountingTransaction) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Receipt Receipt
		{ 
			get
			{
				return (Receipt) Strategy.GetCompositeRole(Meta.Receipt.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Receipt.RelationType, value);
			}
		}

		virtual public bool ExistReceipt
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Receipt.RelationType);
			}
		}

		virtual public void RemoveReceipt()
		{
			Strategy.RemoveCompositeRole(Meta.Receipt.RelationType);
		}


		virtual public Party FromParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.FromParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.FromParty.RelationType, value);
			}
		}

		virtual public bool ExistFromParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.FromParty.RelationType);
			}
		}

		virtual public void RemoveFromParty()
		{
			Strategy.RemoveCompositeRole(Meta.FromParty.RelationType);
		}


		virtual public Party ToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ToParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ToParty.RelationType, value);
			}
		}

		virtual public bool ExistToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ToParty.RelationType);
			}
		}

		virtual public void RemoveToParty()
		{
			Strategy.RemoveCompositeRole(Meta.ToParty.RelationType);
		}


		virtual public global::Allors.Extent<AccountingTransactionDetail> AccountingTransactionDetails
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AccountingTransactionDetails.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AccountingTransactionDetails.RelationType, value);
			}
		}

		virtual public void AddAccountingTransactionDetail (AccountingTransactionDetail value)
		{
			Strategy.AddCompositeRole(Meta.AccountingTransactionDetails.RelationType, value);
		}

		virtual public void RemoveAccountingTransactionDetail (AccountingTransactionDetail value)
		{
			Strategy.RemoveCompositeRole(Meta.AccountingTransactionDetails.RelationType, value);
		}

		virtual public bool ExistAccountingTransactionDetails
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AccountingTransactionDetails.RelationType);
			}
		}

		virtual public void RemoveAccountingTransactionDetails()
		{
			Strategy.RemoveCompositeRoles(Meta.AccountingTransactionDetails.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.DateTime TransactionDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.TransactionDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TransactionDate.RelationType, value);
			}
		}

		virtual public bool ExistTransactionDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.TransactionDate.RelationType);
			}
		}

		virtual public void RemoveTransactionDate()
		{
			Strategy.RemoveUnitRole(Meta.TransactionDate.RelationType);
		}


		virtual public global::System.Decimal DerivedTotalAmount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.DerivedTotalAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivedTotalAmount.RelationType, value);
			}
		}

		virtual public bool ExistDerivedTotalAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivedTotalAmount.RelationType);
			}
		}

		virtual public void RemoveDerivedTotalAmount()
		{
			Strategy.RemoveUnitRole(Meta.DerivedTotalAmount.RelationType);
		}


		virtual public AccountingTransactionNumber AccountingTransactionNumber
		{ 
			get
			{
				return (AccountingTransactionNumber) Strategy.GetCompositeRole(Meta.AccountingTransactionNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AccountingTransactionNumber.RelationType, value);
			}
		}

		virtual public bool ExistAccountingTransactionNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AccountingTransactionNumber.RelationType);
			}
		}

		virtual public void RemoveAccountingTransactionNumber()
		{
			Strategy.RemoveCompositeRole(Meta.AccountingTransactionNumber.RelationType);
		}


		virtual public global::System.DateTime EntryDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.EntryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EntryDate.RelationType, value);
			}
		}

		virtual public bool ExistEntryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EntryDate.RelationType);
			}
		}

		virtual public void RemoveEntryDate()
		{
			Strategy.RemoveUnitRole(Meta.EntryDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ReceiptAccountingTransactionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ReceiptAccountingTransactionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ReceiptAccountingTransactionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ReceiptAccountingTransactionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ReceiptAccountingTransactionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ReceiptAccountingTransactionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ReceiptAccountingTransactionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ReceiptAccountingTransactionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ReceiptAccountingTransactionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ReceiptAccountingTransactionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ReceiptAccountingTransactionBuilder : Allors.ObjectBuilder<ReceiptAccountingTransaction> , ExternalAccountingTransactionBuilder, global::System.IDisposable
	{		
		public ReceiptAccountingTransactionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ReceiptAccountingTransaction instance)
		{

			instance.Description = this.Description;
		
		
			

			if(this.TransactionDate.HasValue)
			{
				instance.TransactionDate = this.TransactionDate.Value;
			}			
		
				
			

			if(this.EntryDate.HasValue)
			{
				instance.EntryDate = this.EntryDate.Value;
			}			
		
		

			instance.Receipt = this.Receipt;

		

			instance.FromParty = this.FromParty;

		

			instance.ToParty = this.ToParty;

		
			if(this.AccountingTransactionDetails!=null)
			{
				instance.AccountingTransactionDetails = this.AccountingTransactionDetails.ToArray();
			}
		

			instance.AccountingTransactionNumber = this.AccountingTransactionNumber;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Receipt Receipt {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithReceipt(Receipt value)
		        {
		            if(this.Receipt!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Receipt = value;
		            return this;
		        }		

				
				public Party FromParty {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithFromParty(Party value)
		        {
		            if(this.FromParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.FromParty = value;
		            return this;
		        }		

				
				public Party ToParty {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithToParty(Party value)
		        {
		            if(this.ToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ToParty = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<AccountingTransactionDetail> AccountingTransactionDetails {get; set;}	

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithAccountingTransactionDetail(AccountingTransactionDetail value)
		        {
					if(this.AccountingTransactionDetails == null)
					{
						this.AccountingTransactionDetails = new global::System.Collections.Generic.List<AccountingTransactionDetail>(); 
					}
		            this.AccountingTransactionDetails.Add(value);
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.DateTime? TransactionDate {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithTransactionDate(global::System.DateTime? value)
		        {
				    if(this.TransactionDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionDate = value;
		            return this;
		        }	

				public AccountingTransactionNumber AccountingTransactionNumber {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithAccountingTransactionNumber(AccountingTransactionNumber value)
		        {
		            if(this.AccountingTransactionNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AccountingTransactionNumber = value;
		            return this;
		        }		

				
				public global::System.DateTime? EntryDate {get; set;}

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithEntryDate(global::System.DateTime? value)
		        {
				    if(this.EntryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EntryDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public ReceiptAccountingTransactionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class ReceiptAccountingTransactions : global::Allors.ObjectsBase<ReceiptAccountingTransaction>
	{
		public ReceiptAccountingTransactions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaReceiptAccountingTransaction Meta
		{
			get
			{
				return Allors.Meta.MetaReceiptAccountingTransaction.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}