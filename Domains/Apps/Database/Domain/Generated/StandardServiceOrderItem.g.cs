// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class StandardServiceOrderItem : Allors.IObject , EngagementItem
	{
		private readonly IStrategy strategy;

		public StandardServiceOrderItem(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaStandardServiceOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaStandardServiceOrderItem.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static StandardServiceOrderItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (StandardServiceOrderItem) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public QuoteItem QuoteItem
		{ 
			get
			{
				return (QuoteItem) Strategy.GetCompositeRole(Meta.QuoteItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteItem.RelationType, value);
			}
		}

		virtual public bool ExistQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteItem.RelationType);
			}
		}

		virtual public void RemoveQuoteItem()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItem.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.DateTime? ExpectedStartDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ExpectedStartDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ExpectedStartDate.RelationType, value);
			}
		}

		virtual public bool ExistExpectedStartDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ExpectedStartDate.RelationType);
			}
		}

		virtual public void RemoveExpectedStartDate()
		{
			Strategy.RemoveUnitRole(Meta.ExpectedStartDate.RelationType);
		}


		virtual public global::System.DateTime? ExpectedEndDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ExpectedEndDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ExpectedEndDate.RelationType, value);
			}
		}

		virtual public bool ExistExpectedEndDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ExpectedEndDate.RelationType);
			}
		}

		virtual public void RemoveExpectedEndDate()
		{
			Strategy.RemoveUnitRole(Meta.ExpectedEndDate.RelationType);
		}


		virtual public WorkEffort EngagementWorkFulfillment
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeRole(Meta.EngagementWorkFulfillment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EngagementWorkFulfillment.RelationType, value);
			}
		}

		virtual public bool ExistEngagementWorkFulfillment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EngagementWorkFulfillment.RelationType);
			}
		}

		virtual public void RemoveEngagementWorkFulfillment()
		{
			Strategy.RemoveCompositeRole(Meta.EngagementWorkFulfillment.RelationType);
		}


		virtual public global::Allors.Extent<EngagementRate> EngagementRates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EngagementRates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EngagementRates.RelationType, value);
			}
		}

		virtual public void AddEngagementRate (EngagementRate value)
		{
			Strategy.AddCompositeRole(Meta.EngagementRates.RelationType, value);
		}

		virtual public void RemoveEngagementRate (EngagementRate value)
		{
			Strategy.RemoveCompositeRole(Meta.EngagementRates.RelationType, value);
		}

		virtual public bool ExistEngagementRates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EngagementRates.RelationType);
			}
		}

		virtual public void RemoveEngagementRates()
		{
			Strategy.RemoveCompositeRoles(Meta.EngagementRates.RelationType);
		}


		virtual public EngagementRate CurrentEngagementRate
		{ 
			get
			{
				return (EngagementRate) Strategy.GetCompositeRole(Meta.CurrentEngagementRate.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentEngagementRate.RelationType, value);
			}
		}

		virtual public bool ExistCurrentEngagementRate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentEngagementRate.RelationType);
			}
		}

		virtual public void RemoveCurrentEngagementRate()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentEngagementRate.RelationType);
		}


		virtual public global::Allors.Extent<EngagementItem> OrderedWiths
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderedWiths.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderedWiths.RelationType, value);
			}
		}

		virtual public void AddOrderedWith (EngagementItem value)
		{
			Strategy.AddCompositeRole(Meta.OrderedWiths.RelationType, value);
		}

		virtual public void RemoveOrderedWith (EngagementItem value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderedWiths.RelationType, value);
		}

		virtual public bool ExistOrderedWiths
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderedWiths.RelationType);
			}
		}

		virtual public void RemoveOrderedWiths()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderedWiths.RelationType);
		}


		virtual public Person CurrentAssignedProfessional
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.CurrentAssignedProfessional.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentAssignedProfessional.RelationType, value);
			}
		}

		virtual public bool ExistCurrentAssignedProfessional
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentAssignedProfessional.RelationType);
			}
		}

		virtual public void RemoveCurrentAssignedProfessional()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentAssignedProfessional.RelationType);
		}


		virtual public Product Product
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.Product.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Product.RelationType, value);
			}
		}

		virtual public bool ExistProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Product.RelationType);
			}
		}

		virtual public void RemoveProduct()
		{
			Strategy.RemoveCompositeRole(Meta.Product.RelationType);
		}


		virtual public ProductFeature ProductFeature
		{ 
			get
			{
				return (ProductFeature) Strategy.GetCompositeRole(Meta.ProductFeature.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductFeature.RelationType, value);
			}
		}

		virtual public bool ExistProductFeature
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductFeature.RelationType);
			}
		}

		virtual public void RemoveProductFeature()
		{
			Strategy.RemoveCompositeRole(Meta.ProductFeature.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public Engagement EngagementWhereEngagementItem
		{ 
			get
			{
				return (Engagement) Strategy.GetCompositeAssociation(Meta.EngagementWhereEngagementItem.RelationType);
			}
		} 

		virtual public bool ExistEngagementWhereEngagementItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.EngagementWhereEngagementItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProfessionalAssignment> ProfessionalAssignmentsWhereEngagementItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProfessionalAssignmentsWhereEngagementItem.RelationType);
			}
		}

		virtual public bool ExistProfessionalAssignmentsWhereEngagementItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProfessionalAssignmentsWhereEngagementItem.RelationType);
			}
		}


		virtual public EngagementItem EngagementItemWhereOrderedWith
		{ 
			get
			{
				return (EngagementItem) Strategy.GetCompositeAssociation(Meta.EngagementItemWhereOrderedWith.RelationType);
			}
		} 

		virtual public bool ExistEngagementItemWhereOrderedWith
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.EngagementItemWhereOrderedWith.RelationType);
			}
		}


		virtual public global::Allors.Extent<ServiceEntry> ServiceEntriesWhereEngagementItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ServiceEntriesWhereEngagementItem.RelationType);
			}
		}

		virtual public bool ExistServiceEntriesWhereEngagementItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ServiceEntriesWhereEngagementItem.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new StandardServiceOrderItemOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new StandardServiceOrderItemOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new StandardServiceOrderItemOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new StandardServiceOrderItemOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new StandardServiceOrderItemOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new StandardServiceOrderItemOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new StandardServiceOrderItemOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new StandardServiceOrderItemOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new StandardServiceOrderItemOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new StandardServiceOrderItemOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class StandardServiceOrderItemBuilder : Allors.ObjectBuilder<StandardServiceOrderItem> , EngagementItemBuilder, global::System.IDisposable
	{		
		public StandardServiceOrderItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(StandardServiceOrderItem instance)
		{

			instance.Description = this.Description;
		
		
			

			if(this.ExpectedStartDate.HasValue)
			{
				instance.ExpectedStartDate = this.ExpectedStartDate.Value;
			}			
		
		
			

			if(this.ExpectedEndDate.HasValue)
			{
				instance.ExpectedEndDate = this.ExpectedEndDate.Value;
			}			
		
		

			instance.QuoteItem = this.QuoteItem;

		

			instance.EngagementWorkFulfillment = this.EngagementWorkFulfillment;

		
			if(this.EngagementRates!=null)
			{
				instance.EngagementRates = this.EngagementRates.ToArray();
			}
				
			if(this.OrderedWiths!=null)
			{
				instance.OrderedWiths = this.OrderedWiths.ToArray();
			}
				

			instance.Product = this.Product;

		

			instance.ProductFeature = this.ProductFeature;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public QuoteItem QuoteItem {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithQuoteItem(QuoteItem value)
		        {
		            if(this.QuoteItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItem = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.DateTime? ExpectedStartDate {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithExpectedStartDate(global::System.DateTime? value)
		        {
				    if(this.ExpectedStartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpectedStartDate = value;
		            return this;
		        }	

				public global::System.DateTime? ExpectedEndDate {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithExpectedEndDate(global::System.DateTime? value)
		        {
				    if(this.ExpectedEndDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpectedEndDate = value;
		            return this;
		        }	

				public WorkEffort EngagementWorkFulfillment {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithEngagementWorkFulfillment(WorkEffort value)
		        {
		            if(this.EngagementWorkFulfillment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EngagementWorkFulfillment = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EngagementRate> EngagementRates {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithEngagementRate(EngagementRate value)
		        {
					if(this.EngagementRates == null)
					{
						this.EngagementRates = new global::System.Collections.Generic.List<EngagementRate>(); 
					}
		            this.EngagementRates.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EngagementItem> OrderedWiths {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithOrderedWith(EngagementItem value)
		        {
					if(this.OrderedWiths == null)
					{
						this.OrderedWiths = new global::System.Collections.Generic.List<EngagementItem>(); 
					}
		            this.OrderedWiths.Add(value);
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class StandardServiceOrderItems : global::Allors.ObjectsBase<StandardServiceOrderItem>
	{
		public StandardServiceOrderItems(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaStandardServiceOrderItem Meta
		{
			get
			{
				return Allors.Meta.MetaStandardServiceOrderItem.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}