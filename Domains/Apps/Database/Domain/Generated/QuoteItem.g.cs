// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class QuoteItem : Allors.IObject , Commentable, Transitional, Versioned, Deletable
	{
		private readonly IStrategy strategy;

		public QuoteItem(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaQuoteItem Meta
		{
			get
			{
				return Allors.Meta.MetaQuoteItem.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static QuoteItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (QuoteItem) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public QuoteItemState PreviousQuoteItemState
		{ 
			get
			{
				return (QuoteItemState) Strategy.GetCompositeRole(Meta.PreviousQuoteItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousQuoteItemState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousQuoteItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousQuoteItemState.RelationType);
			}
		}

		virtual public void RemovePreviousQuoteItemState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousQuoteItemState.RelationType);
		}


		virtual public QuoteItemState LastQuoteItemState
		{ 
			get
			{
				return (QuoteItemState) Strategy.GetCompositeRole(Meta.LastQuoteItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastQuoteItemState.RelationType, value);
			}
		}

		virtual public bool ExistLastQuoteItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastQuoteItemState.RelationType);
			}
		}

		virtual public void RemoveLastQuoteItemState()
		{
			Strategy.RemoveCompositeRole(Meta.LastQuoteItemState.RelationType);
		}


		virtual public QuoteItemState QuoteItemState
		{ 
			get
			{
				return (QuoteItemState) Strategy.GetCompositeRole(Meta.QuoteItemState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteItemState.RelationType, value);
			}
		}

		virtual public bool ExistQuoteItemState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteItemState.RelationType);
			}
		}

		virtual public void RemoveQuoteItemState()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteItemState.RelationType);
		}


		virtual public QuoteItemVersion CurrentVersion
		{ 
			get
			{
				return (QuoteItemVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<QuoteItemVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (QuoteItemVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (QuoteItemVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public Party Authorizer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Authorizer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer.RelationType, value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer.RelationType);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer.RelationType);
		}


		virtual public Deliverable Deliverable
		{ 
			get
			{
				return (Deliverable) Strategy.GetCompositeRole(Meta.Deliverable.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Deliverable.RelationType, value);
			}
		}

		virtual public bool ExistDeliverable
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Deliverable.RelationType);
			}
		}

		virtual public void RemoveDeliverable()
		{
			Strategy.RemoveCompositeRole(Meta.Deliverable.RelationType);
		}


		virtual public Product Product
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.Product.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Product.RelationType, value);
			}
		}

		virtual public bool ExistProduct
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Product.RelationType);
			}
		}

		virtual public void RemoveProduct()
		{
			Strategy.RemoveCompositeRole(Meta.Product.RelationType);
		}


		virtual public global::System.DateTime? EstimatedDeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EstimatedDeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedDeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedDeliveryDate.RelationType);
			}
		}

		virtual public void RemoveEstimatedDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedDeliveryDate.RelationType);
		}


		virtual public global::System.DateTime? RequiredByDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RequiredByDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredByDate.RelationType, value);
			}
		}

		virtual public bool ExistRequiredByDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredByDate.RelationType);
			}
		}

		virtual public void RemoveRequiredByDate()
		{
			Strategy.RemoveUnitRole(Meta.RequiredByDate.RelationType);
		}


		virtual public UnitOfMeasure UnitOfMeasure
		{ 
			get
			{
				return (UnitOfMeasure) Strategy.GetCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.UnitOfMeasure.RelationType, value);
			}
		}

		virtual public bool ExistUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasure()
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasure.RelationType);
		}


		virtual public ProductFeature ProductFeature
		{ 
			get
			{
				return (ProductFeature) Strategy.GetCompositeRole(Meta.ProductFeature.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductFeature.RelationType, value);
			}
		}

		virtual public bool ExistProductFeature
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductFeature.RelationType);
			}
		}

		virtual public void RemoveProductFeature()
		{
			Strategy.RemoveCompositeRole(Meta.ProductFeature.RelationType);
		}


		virtual public global::System.Decimal UnitPrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.UnitPrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UnitPrice.RelationType, value);
			}
		}

		virtual public bool ExistUnitPrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.UnitPrice.RelationType);
			}
		}

		virtual public void RemoveUnitPrice()
		{
			Strategy.RemoveUnitRole(Meta.UnitPrice.RelationType);
		}


		virtual public Skill Skill
		{ 
			get
			{
				return (Skill) Strategy.GetCompositeRole(Meta.Skill.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Skill.RelationType, value);
			}
		}

		virtual public bool ExistSkill
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Skill.RelationType);
			}
		}

		virtual public void RemoveSkill()
		{
			Strategy.RemoveCompositeRole(Meta.Skill.RelationType);
		}


		virtual public WorkEffort WorkEffort
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeRole(Meta.WorkEffort.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffort.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffort.RelationType);
			}
		}

		virtual public void RemoveWorkEffort()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffort.RelationType);
		}


		virtual public global::Allors.Extent<QuoteTerm> QuoteTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.QuoteTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.QuoteTerms.RelationType, value);
			}
		}

		virtual public void AddQuoteTerm (QuoteTerm value)
		{
			Strategy.AddCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public void RemoveQuoteTerm (QuoteTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.QuoteTerms.RelationType, value);
		}

		virtual public bool ExistQuoteTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.QuoteTerms.RelationType);
			}
		}

		virtual public void RemoveQuoteTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.QuoteTerms.RelationType);
		}


		virtual public global::System.Int32 Quantity 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public RequestItem RequestItem
		{ 
			get
			{
				return (RequestItem) Strategy.GetCompositeRole(Meta.RequestItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequestItem.RelationType, value);
			}
		}

		virtual public bool ExistRequestItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequestItem.RelationType);
			}
		}

		virtual public void RemoveRequestItem()
		{
			Strategy.RemoveCompositeRole(Meta.RequestItem.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereQuoteItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereQuoteItem.RelationType);
			}
		}

		virtual public bool ExistEngagementItemsWhereQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereQuoteItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemVersion> OrderItemVersionsWhereQuoteItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemVersionsWhereQuoteItem.RelationType);
			}
		}

		virtual public bool ExistOrderItemVersionsWhereQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemVersionsWhereQuoteItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteVersion> QuoteVersionsWhereQuoteItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteVersionsWhereQuoteItem.RelationType);
			}
		}

		virtual public bool ExistQuoteVersionsWhereQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteVersionsWhereQuoteItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItem> OrderItemsWhereQuoteItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemsWhereQuoteItem.RelationType);
			}
		}

		virtual public bool ExistOrderItemsWhereQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemsWhereQuoteItem.RelationType);
			}
		}


		virtual public Quote QuoteWhereQuoteItem
		{ 
			get
			{
				return (Quote) Strategy.GetCompositeAssociation(Meta.QuoteWhereQuoteItem.RelationType);
			}
		} 

		virtual public bool ExistQuoteWhereQuoteItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.QuoteWhereQuoteItem.RelationType);
			}
		}



		public QuoteItemCancel Cancel()
		{ 
			var method = new QuoteItemCancel(this);
            method.Execute();
            return method;
		}

		public QuoteItemCancel Cancel(System.Action<QuoteItemCancel> action)
		{ 
			var method = new QuoteItemCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public QuoteItemSubmit Submit()
		{ 
			var method = new QuoteItemSubmit(this);
            method.Execute();
            return method;
		}

		public QuoteItemSubmit Submit(System.Action<QuoteItemSubmit> action)
		{ 
			var method = new QuoteItemSubmit(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new QuoteItemOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new QuoteItemOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new QuoteItemOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new QuoteItemOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new QuoteItemOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new QuoteItemOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new QuoteItemOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new QuoteItemOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new QuoteItemOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new QuoteItemOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new QuoteItemDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new QuoteItemDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class QuoteItemBuilder : Allors.ObjectBuilder<QuoteItem> , CommentableBuilder, TransitionalBuilder, VersionedBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public QuoteItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(QuoteItem instance)
		{

			instance.InternalComment = this.InternalComment;
		
		
			

			if(this.EstimatedDeliveryDate.HasValue)
			{
				instance.EstimatedDeliveryDate = this.EstimatedDeliveryDate.Value;
			}			
		
				
			

			if(this.UnitPrice.HasValue)
			{
				instance.UnitPrice = this.UnitPrice.Value;
			}			
		
		
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
				

			instance.QuoteItemState = this.QuoteItemState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		

			instance.Authorizer = this.Authorizer;

		

			instance.Deliverable = this.Deliverable;

		

			instance.Product = this.Product;

		

			instance.UnitOfMeasure = this.UnitOfMeasure;

		

			instance.ProductFeature = this.ProductFeature;

		

			instance.Skill = this.Skill;

		

			instance.WorkEffort = this.WorkEffort;

		
			if(this.QuoteTerms!=null)
			{
				instance.QuoteTerms = this.QuoteTerms.ToArray();
			}
		

			instance.RequestItem = this.RequestItem;

								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public QuoteItemState QuoteItemState {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithQuoteItemState(QuoteItemState value)
		        {
		            if(this.QuoteItemState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItemState = value;
		            return this;
		        }		

				
				public QuoteItemVersion CurrentVersion {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithCurrentVersion(QuoteItemVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<QuoteItemVersion> AllVersions {get; set;}	

				/// <exclude/>
				public QuoteItemBuilder WithAllVersion(QuoteItemVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<QuoteItemVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public Party Authorizer {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithAuthorizer(Party value)
		        {
		            if(this.Authorizer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Authorizer = value;
		            return this;
		        }		

				
				public Deliverable Deliverable {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithDeliverable(Deliverable value)
		        {
		            if(this.Deliverable!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Deliverable = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public global::System.DateTime? EstimatedDeliveryDate {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithEstimatedDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.EstimatedDeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedDeliveryDate = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitPrice {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithUnitPrice(global::System.Decimal? value)
		        {
				    if(this.UnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitPrice = value;
		            return this;
		        }	

				public Skill Skill {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithSkill(Skill value)
		        {
		            if(this.Skill!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Skill = value;
		            return this;
		        }		

				
				public WorkEffort WorkEffort {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithWorkEffort(WorkEffort value)
		        {
		            if(this.WorkEffort!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffort = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<QuoteTerm> QuoteTerms {get; set;}	

				/// <exclude/>
				public QuoteItemBuilder WithQuoteTerm(QuoteTerm value)
		        {
					if(this.QuoteTerms == null)
					{
						this.QuoteTerms = new global::System.Collections.Generic.List<QuoteTerm>(); 
					}
		            this.QuoteTerms.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? Quantity {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithQuantity(global::System.Int32? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public RequestItem RequestItem {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithRequestItem(RequestItem value)
		        {
		            if(this.RequestItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequestItem = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public QuoteItemBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public QuoteItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public QuoteItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class QuoteItems : global::Allors.ObjectsBase<QuoteItem>
	{
		public QuoteItems(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaQuoteItem Meta
		{
			get
			{
				return Allors.Meta.MetaQuoteItem.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}