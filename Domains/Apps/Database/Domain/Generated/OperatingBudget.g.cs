// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class OperatingBudget : Allors.IObject , Budget, Versioned
	{
		private readonly IStrategy strategy;

		public OperatingBudget(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaOperatingBudget Meta
		{
			get
			{
				return Allors.Meta.MetaOperatingBudget.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static OperatingBudget Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (OperatingBudget) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public OperatingBudgetVersion CurrentVersion
		{ 
			get
			{
				return (OperatingBudgetVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<OperatingBudgetVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (OperatingBudgetVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (OperatingBudgetVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public BudgetState PreviousBudgetState
		{ 
			get
			{
				return (BudgetState) Strategy.GetCompositeRole(Meta.PreviousBudgetState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousBudgetState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousBudgetState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousBudgetState.RelationType);
			}
		}

		virtual public void RemovePreviousBudgetState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousBudgetState.RelationType);
		}


		virtual public BudgetState LastBudgetState
		{ 
			get
			{
				return (BudgetState) Strategy.GetCompositeRole(Meta.LastBudgetState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastBudgetState.RelationType, value);
			}
		}

		virtual public bool ExistLastBudgetState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastBudgetState.RelationType);
			}
		}

		virtual public void RemoveLastBudgetState()
		{
			Strategy.RemoveCompositeRole(Meta.LastBudgetState.RelationType);
		}


		virtual public BudgetState BudgetState
		{ 
			get
			{
				return (BudgetState) Strategy.GetCompositeRole(Meta.BudgetState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BudgetState.RelationType, value);
			}
		}

		virtual public bool ExistBudgetState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BudgetState.RelationType);
			}
		}

		virtual public void RemoveBudgetState()
		{
			Strategy.RemoveCompositeRole(Meta.BudgetState.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::Allors.Extent<BudgetRevision> BudgetRevisions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BudgetRevisions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BudgetRevisions.RelationType, value);
			}
		}

		virtual public void AddBudgetRevision (BudgetRevision value)
		{
			Strategy.AddCompositeRole(Meta.BudgetRevisions.RelationType, value);
		}

		virtual public void RemoveBudgetRevision (BudgetRevision value)
		{
			Strategy.RemoveCompositeRole(Meta.BudgetRevisions.RelationType, value);
		}

		virtual public bool ExistBudgetRevisions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BudgetRevisions.RelationType);
			}
		}

		virtual public void RemoveBudgetRevisions()
		{
			Strategy.RemoveCompositeRoles(Meta.BudgetRevisions.RelationType);
		}


		virtual public global::System.String BudgetNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.BudgetNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BudgetNumber.RelationType, value);
			}
		}

		virtual public bool ExistBudgetNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.BudgetNumber.RelationType);
			}
		}

		virtual public void RemoveBudgetNumber()
		{
			Strategy.RemoveUnitRole(Meta.BudgetNumber.RelationType);
		}


		virtual public global::Allors.Extent<BudgetReview> BudgetReviews
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BudgetReviews.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BudgetReviews.RelationType, value);
			}
		}

		virtual public void AddBudgetReview (BudgetReview value)
		{
			Strategy.AddCompositeRole(Meta.BudgetReviews.RelationType, value);
		}

		virtual public void RemoveBudgetReview (BudgetReview value)
		{
			Strategy.RemoveCompositeRole(Meta.BudgetReviews.RelationType, value);
		}

		virtual public bool ExistBudgetReviews
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BudgetReviews.RelationType);
			}
		}

		virtual public void RemoveBudgetReviews()
		{
			Strategy.RemoveCompositeRoles(Meta.BudgetReviews.RelationType);
		}


		virtual public global::Allors.Extent<BudgetItem> BudgetItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BudgetItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BudgetItems.RelationType, value);
			}
		}

		virtual public void AddBudgetItem (BudgetItem value)
		{
			Strategy.AddCompositeRole(Meta.BudgetItems.RelationType, value);
		}

		virtual public void RemoveBudgetItem (BudgetItem value)
		{
			Strategy.RemoveCompositeRole(Meta.BudgetItems.RelationType, value);
		}

		virtual public bool ExistBudgetItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BudgetItems.RelationType);
			}
		}

		virtual public void RemoveBudgetItems()
		{
			Strategy.RemoveCompositeRoles(Meta.BudgetItems.RelationType);
		}


		virtual public global::System.DateTime FromDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.FromDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FromDate.RelationType, value);
			}
		}

		virtual public bool ExistFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.FromDate.RelationType);
			}
		}

		virtual public void RemoveFromDate()
		{
			Strategy.RemoveUnitRole(Meta.FromDate.RelationType);
		}


		virtual public global::System.DateTime? ThroughDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ThroughDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ThroughDate.RelationType, value);
			}
		}

		virtual public bool ExistThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ThroughDate.RelationType);
			}
		}

		virtual public void RemoveThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ThroughDate.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public BudgetClose Close()
		{ 
			var method = new OperatingBudgetClose(this);
            method.Execute();
            return method;
		}

		public BudgetClose Close(System.Action<BudgetClose> action)
		{ 
			var method = new OperatingBudgetClose(this);
            action(method);
            method.Execute();
            return method;
		}

		public BudgetReopen Reopen()
		{ 
			var method = new OperatingBudgetReopen(this);
            method.Execute();
            return method;
		}

		public BudgetReopen Reopen(System.Action<BudgetReopen> action)
		{ 
			var method = new OperatingBudgetReopen(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new OperatingBudgetOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OperatingBudgetOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OperatingBudgetOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OperatingBudgetOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OperatingBudgetOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OperatingBudgetOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OperatingBudgetOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OperatingBudgetOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OperatingBudgetOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OperatingBudgetOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class OperatingBudgetBuilder : Allors.ObjectBuilder<OperatingBudget> , BudgetBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public OperatingBudgetBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(OperatingBudget instance)
		{

			instance.Description = this.Description;
		
		

			instance.BudgetNumber = this.BudgetNumber;
		
		
			

			if(this.FromDate.HasValue)
			{
				instance.FromDate = this.FromDate.Value;
			}			
		
		
			

			if(this.ThroughDate.HasValue)
			{
				instance.ThroughDate = this.ThroughDate.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
						

			instance.BudgetState = this.BudgetState;

		
			if(this.BudgetRevisions!=null)
			{
				instance.BudgetRevisions = this.BudgetRevisions.ToArray();
			}
		
			if(this.BudgetReviews!=null)
			{
				instance.BudgetReviews = this.BudgetReviews.ToArray();
			}
		
			if(this.BudgetItems!=null)
			{
				instance.BudgetItems = this.BudgetItems.ToArray();
			}
								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public OperatingBudgetVersion CurrentVersion {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithCurrentVersion(OperatingBudgetVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OperatingBudgetVersion> AllVersions {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithAllVersion(OperatingBudgetVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<OperatingBudgetVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public BudgetState BudgetState {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithBudgetState(BudgetState value)
		        {
		            if(this.BudgetState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BudgetState = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BudgetRevision> BudgetRevisions {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithBudgetRevision(BudgetRevision value)
		        {
					if(this.BudgetRevisions == null)
					{
						this.BudgetRevisions = new global::System.Collections.Generic.List<BudgetRevision>(); 
					}
		            this.BudgetRevisions.Add(value);
		            return this;
		        }		

				
				public global::System.String BudgetNumber {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithBudgetNumber(global::System.String value)
		        {
				    if(this.BudgetNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BudgetNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BudgetReview> BudgetReviews {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithBudgetReview(BudgetReview value)
		        {
					if(this.BudgetReviews == null)
					{
						this.BudgetReviews = new global::System.Collections.Generic.List<BudgetReview>(); 
					}
		            this.BudgetReviews.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BudgetItem> BudgetItems {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithBudgetItem(BudgetItem value)
		        {
					if(this.BudgetItems == null)
					{
						this.BudgetItems = new global::System.Collections.Generic.List<BudgetItem>(); 
					}
		            this.BudgetItems.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OperatingBudgetBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OperatingBudgetBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class OperatingBudgets : global::Allors.ObjectsBase<OperatingBudget>
	{
		public OperatingBudgets(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaOperatingBudget Meta
		{
			get
			{
				return Allors.Meta.MetaOperatingBudget.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}