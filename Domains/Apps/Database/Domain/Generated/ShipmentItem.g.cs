// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ShipmentItem : Allors.IObject , Deletable, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public ShipmentItem(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaShipmentItem Meta
		{
			get
			{
				return Allors.Meta.MetaShipmentItem.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ShipmentItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ShipmentItem) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal Quantity 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public Part Part
		{ 
			get
			{
				return (Part) Strategy.GetCompositeRole(Meta.Part.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Part.RelationType, value);
			}
		}

		virtual public bool ExistPart
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Part.RelationType);
			}
		}

		virtual public void RemovePart()
		{
			Strategy.RemoveCompositeRole(Meta.Part.RelationType);
		}


		virtual public global::System.String ContentsDescription 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ContentsDescription.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ContentsDescription.RelationType, value);
			}
		}

		virtual public bool ExistContentsDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.ContentsDescription.RelationType);
			}
		}

		virtual public void RemoveContentsDescription()
		{
			Strategy.RemoveUnitRole(Meta.ContentsDescription.RelationType);
		}


		virtual public global::Allors.Extent<Document> Documents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Documents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Documents.RelationType, value);
			}
		}

		virtual public void AddDocument (Document value)
		{
			Strategy.AddCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public void RemoveDocument (Document value)
		{
			Strategy.RemoveCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public bool ExistDocuments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Documents.RelationType);
			}
		}

		virtual public void RemoveDocuments()
		{
			Strategy.RemoveCompositeRoles(Meta.Documents.RelationType);
		}


		virtual public global::System.Decimal QuantityShipped 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.QuantityShipped.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuantityShipped.RelationType, value);
			}
		}

		virtual public bool ExistQuantityShipped{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuantityShipped.RelationType);
			}
		}

		virtual public void RemoveQuantityShipped()
		{
			Strategy.RemoveUnitRole(Meta.QuantityShipped.RelationType);
		}


		virtual public global::Allors.Extent<ShipmentItem> InResponseToShipmentItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InResponseToShipmentItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InResponseToShipmentItems.RelationType, value);
			}
		}

		virtual public void AddInResponseToShipmentItem (ShipmentItem value)
		{
			Strategy.AddCompositeRole(Meta.InResponseToShipmentItems.RelationType, value);
		}

		virtual public void RemoveInResponseToShipmentItem (ShipmentItem value)
		{
			Strategy.RemoveCompositeRole(Meta.InResponseToShipmentItems.RelationType, value);
		}

		virtual public bool ExistInResponseToShipmentItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InResponseToShipmentItems.RelationType);
			}
		}

		virtual public void RemoveInResponseToShipmentItems()
		{
			Strategy.RemoveCompositeRoles(Meta.InResponseToShipmentItems.RelationType);
		}


		virtual public global::Allors.Extent<InventoryItem> InventoryItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItems.RelationType, value);
			}
		}

		virtual public void AddInventoryItem (InventoryItem value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItems.RelationType, value);
		}

		virtual public void RemoveInventoryItem (InventoryItem value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItems.RelationType, value);
		}

		virtual public bool ExistInventoryItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItems.RelationType);
			}
		}

		virtual public void RemoveInventoryItems()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItems.RelationType);
		}


		virtual public global::Allors.Extent<ProductFeature> ProductFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ProductFeatures.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ProductFeatures.RelationType, value);
			}
		}

		virtual public void AddProductFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.ProductFeatures.RelationType, value);
		}

		virtual public void RemoveProductFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.ProductFeatures.RelationType, value);
		}

		virtual public bool ExistProductFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ProductFeatures.RelationType);
			}
		}

		virtual public void RemoveProductFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.ProductFeatures.RelationType);
		}


		virtual public global::Allors.Extent<InvoiceItem> InvoiceItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InvoiceItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InvoiceItems.RelationType, value);
			}
		}

		virtual public void AddInvoiceItem (InvoiceItem value)
		{
			Strategy.AddCompositeRole(Meta.InvoiceItems.RelationType, value);
		}

		virtual public void RemoveInvoiceItem (InvoiceItem value)
		{
			Strategy.RemoveCompositeRole(Meta.InvoiceItems.RelationType, value);
		}

		virtual public bool ExistInvoiceItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InvoiceItems.RelationType);
			}
		}

		virtual public void RemoveInvoiceItems()
		{
			Strategy.RemoveCompositeRoles(Meta.InvoiceItems.RelationType);
		}


		virtual public Good Good
		{ 
			get
			{
				return (Good) Strategy.GetCompositeRole(Meta.Good.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Good.RelationType, value);
			}
		}

		virtual public bool ExistGood
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Good.RelationType);
			}
		}

		virtual public void RemoveGood()
		{
			Strategy.RemoveCompositeRole(Meta.Good.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<ItemIssuance> ItemIssuancesWhereShipmentItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ItemIssuancesWhereShipmentItem.RelationType);
			}
		}

		virtual public bool ExistItemIssuancesWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ItemIssuancesWhereShipmentItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderShipment> OrderShipmentsWhereShipmentItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderShipmentsWhereShipmentItem.RelationType);
			}
		}

		virtual public bool ExistOrderShipmentsWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderShipmentsWhereShipmentItem.RelationType);
			}
		}


		virtual public global::Allors.Extent<PackagingContent> PackagingContentsWhereShipmentItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PackagingContentsWhereShipmentItem.RelationType);
			}
		}

		virtual public bool ExistPackagingContentsWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PackagingContentsWhereShipmentItem.RelationType);
			}
		}


		virtual public ShipmentItem ShipmentItemWhereInResponseToShipmentItem
		{ 
			get
			{
				return (ShipmentItem) Strategy.GetCompositeAssociation(Meta.ShipmentItemWhereInResponseToShipmentItem.RelationType);
			}
		} 

		virtual public bool ExistShipmentItemWhereInResponseToShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentItemWhereInResponseToShipmentItem.RelationType);
			}
		}


		virtual public ShipmentReceipt ShipmentReceiptWhereShipmentItem
		{ 
			get
			{
				return (ShipmentReceipt) Strategy.GetCompositeAssociation(Meta.ShipmentReceiptWhereShipmentItem.RelationType);
			}
		} 

		virtual public bool ExistShipmentReceiptWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentReceiptWhereShipmentItem.RelationType);
			}
		}


		virtual public ShipmentVersion ShipmentVersionWhereShipmentItem
		{ 
			get
			{
				return (ShipmentVersion) Strategy.GetCompositeAssociation(Meta.ShipmentVersionWhereShipmentItem.RelationType);
			}
		} 

		virtual public bool ExistShipmentVersionWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentVersionWhereShipmentItem.RelationType);
			}
		}


		virtual public Shipment ShipmentWhereShipmentItem
		{ 
			get
			{
				return (Shipment) Strategy.GetCompositeAssociation(Meta.ShipmentWhereShipmentItem.RelationType);
			}
		} 

		virtual public bool ExistShipmentWhereShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ShipmentWhereShipmentItem.RelationType);
			}
		}



		public DeletableDelete Delete()
		{ 
			var method = new ShipmentItemDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new ShipmentItemDelete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new ShipmentItemOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ShipmentItemOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ShipmentItemOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ShipmentItemOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ShipmentItemOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ShipmentItemOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ShipmentItemOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ShipmentItemOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ShipmentItemOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ShipmentItemOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class ShipmentItemBuilder : Allors.ObjectBuilder<ShipmentItem> , DeletableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public ShipmentItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ShipmentItem instance)
		{
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		

			instance.ContentsDescription = this.ContentsDescription;
		
				

			instance.Part = this.Part;

		
			if(this.Documents!=null)
			{
				instance.Documents = this.Documents.ToArray();
			}
		
			if(this.InResponseToShipmentItems!=null)
			{
				instance.InResponseToShipmentItems = this.InResponseToShipmentItems.ToArray();
			}
		
			if(this.InventoryItems!=null)
			{
				instance.InventoryItems = this.InventoryItems.ToArray();
			}
		
			if(this.ProductFeatures!=null)
			{
				instance.ProductFeatures = this.ProductFeatures.ToArray();
			}
		
			if(this.InvoiceItems!=null)
			{
				instance.InvoiceItems = this.InvoiceItems.ToArray();
			}
		

			instance.Good = this.Good;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Decimal? Quantity {get; set;}

				/// <exclude/>
				public ShipmentItemBuilder WithQuantity(global::System.Decimal? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public Part Part {get; set;}

				/// <exclude/>
				public ShipmentItemBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public global::System.String ContentsDescription {get; set;}

				/// <exclude/>
				public ShipmentItemBuilder WithContentsDescription(global::System.String value)
		        {
				    if(this.ContentsDescription!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ContentsDescription = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Document> Documents {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithDocument(Document value)
		        {
					if(this.Documents == null)
					{
						this.Documents = new global::System.Collections.Generic.List<Document>(); 
					}
		            this.Documents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ShipmentItem> InResponseToShipmentItems {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithInResponseToShipmentItem(ShipmentItem value)
		        {
					if(this.InResponseToShipmentItems == null)
					{
						this.InResponseToShipmentItems = new global::System.Collections.Generic.List<ShipmentItem>(); 
					}
		            this.InResponseToShipmentItems.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InventoryItem> InventoryItems {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithInventoryItem(InventoryItem value)
		        {
					if(this.InventoryItems == null)
					{
						this.InventoryItems = new global::System.Collections.Generic.List<InventoryItem>(); 
					}
		            this.InventoryItems.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> ProductFeatures {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithProductFeature(ProductFeature value)
		        {
					if(this.ProductFeatures == null)
					{
						this.ProductFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.ProductFeatures.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InvoiceItem> InvoiceItems {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithInvoiceItem(InvoiceItem value)
		        {
					if(this.InvoiceItems == null)
					{
						this.InvoiceItems = new global::System.Collections.Generic.List<InvoiceItem>(); 
					}
		            this.InvoiceItems.Add(value);
		            return this;
		        }		

				
				public Good Good {get; set;}

				/// <exclude/>
				public ShipmentItemBuilder WithGood(Good value)
		        {
		            if(this.Good!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Good = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public ShipmentItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class ShipmentItems : global::Allors.ObjectsBase<ShipmentItem>
	{
		public ShipmentItems(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaShipmentItem Meta
		{
			get
			{
				return Allors.Meta.MetaShipmentItem.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}