// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class TimeAndMaterialsService : Allors.IObject , Service
	{
		private readonly IStrategy strategy;

		public TimeAndMaterialsService(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaTimeAndMaterialsService Meta
		{
			get
			{
				return Allors.Meta.MetaTimeAndMaterialsService.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static TimeAndMaterialsService Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (TimeAndMaterialsService) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public ProductCategory PrimaryProductCategory
		{ 
			get
			{
				return (ProductCategory) Strategy.GetCompositeRole(Meta.PrimaryProductCategory.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PrimaryProductCategory.RelationType, value);
			}
		}

		virtual public bool ExistPrimaryProductCategory
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PrimaryProductCategory.RelationType);
			}
		}

		virtual public void RemovePrimaryProductCategory()
		{
			Strategy.RemoveCompositeRole(Meta.PrimaryProductCategory.RelationType);
		}


		virtual public global::System.DateTime? SupportDiscontinuationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.SupportDiscontinuationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SupportDiscontinuationDate.RelationType, value);
			}
		}

		virtual public bool ExistSupportDiscontinuationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.SupportDiscontinuationDate.RelationType);
			}
		}

		virtual public void RemoveSupportDiscontinuationDate()
		{
			Strategy.RemoveUnitRole(Meta.SupportDiscontinuationDate.RelationType);
		}


		virtual public global::System.DateTime? SalesDiscontinuationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.SalesDiscontinuationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SalesDiscontinuationDate.RelationType, value);
			}
		}

		virtual public bool ExistSalesDiscontinuationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.SalesDiscontinuationDate.RelationType);
			}
		}

		virtual public void RemoveSalesDiscontinuationDate()
		{
			Strategy.RemoveUnitRole(Meta.SalesDiscontinuationDate.RelationType);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames.RelationType, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames.RelationType, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames.RelationType, value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames.RelationType);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames.RelationType);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedDescriptions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedDescriptions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedDescriptions.RelationType, value);
			}
		}

		virtual public void AddLocalisedDescription (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedDescriptions.RelationType, value);
		}

		virtual public void RemoveLocalisedDescription (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedDescriptions.RelationType, value);
		}

		virtual public bool ExistLocalisedDescriptions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedDescriptions.RelationType);
			}
		}

		virtual public void RemoveLocalisedDescriptions()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedDescriptions.RelationType);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedComments
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedComments.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedComments.RelationType, value);
			}
		}

		virtual public void AddLocalisedComment (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedComments.RelationType, value);
		}

		virtual public void RemoveLocalisedComment (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedComments.RelationType, value);
		}

		virtual public bool ExistLocalisedComments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedComments.RelationType);
			}
		}

		virtual public void RemoveLocalisedComments()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedComments.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::Allors.Extent<PriceComponent> VirtualProductPriceComponents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.VirtualProductPriceComponents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.VirtualProductPriceComponents.RelationType, value);
			}
		}

		virtual public void AddVirtualProductPriceComponent (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.VirtualProductPriceComponents.RelationType, value);
		}

		virtual public void RemoveVirtualProductPriceComponent (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.VirtualProductPriceComponents.RelationType, value);
		}

		virtual public bool ExistVirtualProductPriceComponents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.VirtualProductPriceComponents.RelationType);
			}
		}

		virtual public void RemoveVirtualProductPriceComponents()
		{
			Strategy.RemoveCompositeRoles(Meta.VirtualProductPriceComponents.RelationType);
		}


		virtual public global::System.String IntrastatCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IntrastatCode.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IntrastatCode.RelationType, value);
			}
		}

		virtual public bool ExistIntrastatCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.IntrastatCode.RelationType);
			}
		}

		virtual public void RemoveIntrastatCode()
		{
			Strategy.RemoveUnitRole(Meta.IntrastatCode.RelationType);
		}


		virtual public global::Allors.Extent<ProductCategory> ProductCategoriesExpanded
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ProductCategoriesExpanded.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ProductCategoriesExpanded.RelationType, value);
			}
		}

		virtual public void AddProductCategoriesExpanded (ProductCategory value)
		{
			Strategy.AddCompositeRole(Meta.ProductCategoriesExpanded.RelationType, value);
		}

		virtual public void RemoveProductCategoriesExpanded (ProductCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.ProductCategoriesExpanded.RelationType, value);
		}

		virtual public bool ExistProductCategoriesExpanded
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ProductCategoriesExpanded.RelationType);
			}
		}

		virtual public void RemoveProductCategoriesExpanded()
		{
			Strategy.RemoveCompositeRoles(Meta.ProductCategoriesExpanded.RelationType);
		}


		virtual public Product ProductComplement
		{ 
			get
			{
				return (Product) Strategy.GetCompositeRole(Meta.ProductComplement.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProductComplement.RelationType, value);
			}
		}

		virtual public bool ExistProductComplement
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProductComplement.RelationType);
			}
		}

		virtual public void RemoveProductComplement()
		{
			Strategy.RemoveCompositeRole(Meta.ProductComplement.RelationType);
		}


		virtual public global::Allors.Extent<ProductFeature> OptionalFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OptionalFeatures.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OptionalFeatures.RelationType, value);
			}
		}

		virtual public void AddOptionalFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.OptionalFeatures.RelationType, value);
		}

		virtual public void RemoveOptionalFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.OptionalFeatures.RelationType, value);
		}

		virtual public bool ExistOptionalFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OptionalFeatures.RelationType);
			}
		}

		virtual public void RemoveOptionalFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.OptionalFeatures.RelationType);
		}


		virtual public global::Allors.Extent<Product> Variants
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Variants.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Variants.RelationType, value);
			}
		}

		virtual public void AddVariant (Product value)
		{
			Strategy.AddCompositeRole(Meta.Variants.RelationType, value);
		}

		virtual public void RemoveVariant (Product value)
		{
			Strategy.RemoveCompositeRole(Meta.Variants.RelationType, value);
		}

		virtual public bool ExistVariants
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Variants.RelationType);
			}
		}

		virtual public void RemoveVariants()
		{
			Strategy.RemoveCompositeRoles(Meta.Variants.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.DateTime? IntroductionDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.IntroductionDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IntroductionDate.RelationType, value);
			}
		}

		virtual public bool ExistIntroductionDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.IntroductionDate.RelationType);
			}
		}

		virtual public void RemoveIntroductionDate()
		{
			Strategy.RemoveUnitRole(Meta.IntroductionDate.RelationType);
		}


		virtual public global::Allors.Extent<Document> Documents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Documents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Documents.RelationType, value);
			}
		}

		virtual public void AddDocument (Document value)
		{
			Strategy.AddCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public void RemoveDocument (Document value)
		{
			Strategy.RemoveCompositeRole(Meta.Documents.RelationType, value);
		}

		virtual public bool ExistDocuments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Documents.RelationType);
			}
		}

		virtual public void RemoveDocuments()
		{
			Strategy.RemoveCompositeRoles(Meta.Documents.RelationType);
		}


		virtual public global::Allors.Extent<ProductFeature> StandardFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.StandardFeatures.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.StandardFeatures.RelationType, value);
			}
		}

		virtual public void AddStandardFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.StandardFeatures.RelationType, value);
		}

		virtual public void RemoveStandardFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.StandardFeatures.RelationType, value);
		}

		virtual public bool ExistStandardFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.StandardFeatures.RelationType);
			}
		}

		virtual public void RemoveStandardFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.StandardFeatures.RelationType);
		}


		virtual public UnitOfMeasure UnitOfMeasure
		{ 
			get
			{
				return (UnitOfMeasure) Strategy.GetCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.UnitOfMeasure.RelationType, value);
			}
		}

		virtual public bool ExistUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.UnitOfMeasure.RelationType);
			}
		}

		virtual public void RemoveUnitOfMeasure()
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasure.RelationType);
		}


		virtual public global::Allors.Extent<EstimatedProductCost> EstimatedProductCosts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EstimatedProductCosts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EstimatedProductCosts.RelationType, value);
			}
		}

		virtual public void AddEstimatedProductCost (EstimatedProductCost value)
		{
			Strategy.AddCompositeRole(Meta.EstimatedProductCosts.RelationType, value);
		}

		virtual public void RemoveEstimatedProductCost (EstimatedProductCost value)
		{
			Strategy.RemoveCompositeRole(Meta.EstimatedProductCosts.RelationType, value);
		}

		virtual public bool ExistEstimatedProductCosts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EstimatedProductCosts.RelationType);
			}
		}

		virtual public void RemoveEstimatedProductCosts()
		{
			Strategy.RemoveCompositeRoles(Meta.EstimatedProductCosts.RelationType);
		}


		virtual public global::Allors.Extent<Product> ProductObsolescences
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ProductObsolescences.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ProductObsolescences.RelationType, value);
			}
		}

		virtual public void AddProductObsolescence (Product value)
		{
			Strategy.AddCompositeRole(Meta.ProductObsolescences.RelationType, value);
		}

		virtual public void RemoveProductObsolescence (Product value)
		{
			Strategy.RemoveCompositeRole(Meta.ProductObsolescences.RelationType, value);
		}

		virtual public bool ExistProductObsolescences
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ProductObsolescences.RelationType);
			}
		}

		virtual public void RemoveProductObsolescences()
		{
			Strategy.RemoveCompositeRoles(Meta.ProductObsolescences.RelationType);
		}


		virtual public global::Allors.Extent<ProductFeature> SelectableFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SelectableFeatures.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SelectableFeatures.RelationType, value);
			}
		}

		virtual public void AddSelectableFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.SelectableFeatures.RelationType, value);
		}

		virtual public void RemoveSelectableFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.SelectableFeatures.RelationType, value);
		}

		virtual public bool ExistSelectableFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SelectableFeatures.RelationType);
			}
		}

		virtual public void RemoveSelectableFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.SelectableFeatures.RelationType);
		}


		virtual public VatRate VatRate
		{ 
			get
			{
				return (VatRate) Strategy.GetCompositeRole(Meta.VatRate.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRate.RelationType, value);
			}
		}

		virtual public bool ExistVatRate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRate.RelationType);
			}
		}

		virtual public void RemoveVatRate()
		{
			Strategy.RemoveCompositeRole(Meta.VatRate.RelationType);
		}


		virtual public global::Allors.Extent<PriceComponent> BasePrices
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BasePrices.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BasePrices.RelationType, value);
			}
		}

		virtual public void AddBasePrice (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.BasePrices.RelationType, value);
		}

		virtual public void RemoveBasePrice (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.BasePrices.RelationType, value);
		}

		virtual public bool ExistBasePrices
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BasePrices.RelationType);
			}
		}

		virtual public void RemoveBasePrices()
		{
			Strategy.RemoveCompositeRoles(Meta.BasePrices.RelationType);
		}


		virtual public global::Allors.Extent<ProductCategory> ProductCategories
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ProductCategories.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ProductCategories.RelationType, value);
			}
		}

		virtual public void AddProductCategory (ProductCategory value)
		{
			Strategy.AddCompositeRole(Meta.ProductCategories.RelationType, value);
		}

		virtual public void RemoveProductCategory (ProductCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.ProductCategories.RelationType, value);
		}

		virtual public bool ExistProductCategories
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ProductCategories.RelationType);
			}
		}

		virtual public void RemoveProductCategories()
		{
			Strategy.RemoveCompositeRoles(Meta.ProductCategories.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<ProductDeliverySkillRequirement> ProductDeliverySkillRequirementsWhereService
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductDeliverySkillRequirementsWhereService.RelationType);
			}
		}

		virtual public bool ExistProductDeliverySkillRequirementsWhereService
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductDeliverySkillRequirementsWhereService.RelationType);
			}
		}


		virtual public global::Allors.Extent<GeneralLedgerAccount> GeneralLedgerAccountsWhereDefaultCostUnit
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GeneralLedgerAccountsWhereDefaultCostUnit.RelationType);
			}
		}

		virtual public bool ExistGeneralLedgerAccountsWhereDefaultCostUnit
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GeneralLedgerAccountsWhereDefaultCostUnit.RelationType);
			}
		}


		virtual public global::Allors.Extent<GeneralLedgerAccount> GeneralLedgerAccountsWhereCostUnitsAllowed
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GeneralLedgerAccountsWhereCostUnitsAllowed.RelationType);
			}
		}

		virtual public bool ExistGeneralLedgerAccountsWhereCostUnitsAllowed
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GeneralLedgerAccountsWhereCostUnitsAllowed.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereProductSubstitution
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereProductSubstitution.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereProductSubstitution
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereProductSubstitution.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereProductIncompatibility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereProductIncompatibility.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereProductIncompatibility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereProductIncompatibility.RelationType);
			}
		}


		virtual public MarketingPackage MarketingPackageWhereProductsUsedIn
		{ 
			get
			{
				return (MarketingPackage) Strategy.GetCompositeAssociation(Meta.MarketingPackageWhereProductsUsedIn.RelationType);
			}
		} 

		virtual public bool ExistMarketingPackageWhereProductsUsedIn
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.MarketingPackageWhereProductsUsedIn.RelationType);
			}
		}


		virtual public global::Allors.Extent<MarketingPackage> MarketingPackagesWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.MarketingPackagesWhereProduct.RelationType);
			}
		}

		virtual public bool ExistMarketingPackagesWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.MarketingPackagesWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderItemVersion> PurchaseOrderItemVersionsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderItemVersionsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderItemVersionsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderItemVersionsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItemVersion> QuoteItemVersionsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemVersionsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistQuoteItemVersionsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemVersionsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestItemVersion> RequestItemVersionsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemVersionsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistRequestItemVersionsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemVersionsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItemVersion> SalesInvoiceItemVersionsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemVersionsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWherePreviousProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWherePreviousProduct.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWherePreviousProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWherePreviousProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationGlAccount> OrganisationGlAccountsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationGlAccountsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistOrganisationGlAccountsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationGlAccountsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductRevenue> PartyProductRevenuesWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductRevenuesWhereProduct.RelationType);
			}
		}

		virtual public bool ExistPartyProductRevenuesWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductRevenuesWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductCategory> ProductCategoriesWhereAllProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductCategoriesWhereAllProduct.RelationType);
			}
		}

		virtual public bool ExistProductCategoriesWhereAllProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductCategoriesWhereAllProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductConfiguration> ProductConfigurationsWhereProductsUsedIn
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductConfigurationsWhereProductsUsedIn.RelationType);
			}
		}

		virtual public bool ExistProductConfigurationsWhereProductsUsedIn
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductConfigurationsWhereProductsUsedIn.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductConfiguration> ProductConfigurationsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductConfigurationsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistProductConfigurationsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductConfigurationsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductFeatureApplicabilityRelationship> ProductFeatureApplicabilityRelationshipsWhereAvailableFor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeatureApplicabilityRelationshipsWhereAvailableFor.RelationType);
			}
		}

		virtual public bool ExistProductFeatureApplicabilityRelationshipsWhereAvailableFor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeatureApplicabilityRelationshipsWhereAvailableFor.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductRevenue> ProductRevenuesWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductRevenuesWhereProduct.RelationType);
			}
		}

		virtual public bool ExistProductRevenuesWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductRevenuesWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderItem> PurchaseOrderItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistQuoteItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestItem> RequestItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistRequestItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItem> SalesInvoiceItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWherePreviousProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWherePreviousProduct.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWherePreviousProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWherePreviousProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<SupplierOffering> SupplierOfferingsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SupplierOfferingsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistSupplierOfferingsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SupplierOfferingsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortType> WorkEffortTypesWhereProductToProduce
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortTypesWhereProductToProduce.RelationType);
			}
		}

		virtual public bool ExistWorkEffortTypesWhereProductToProduce
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortTypesWhereProductToProduce.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistEngagementItemsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<PriceComponent> PriceComponentsWhereProduct
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PriceComponentsWhereProduct.RelationType);
			}
		}

		virtual public bool ExistPriceComponentsWhereProduct
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PriceComponentsWhereProduct.RelationType);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereProductComplement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereProductComplement.RelationType);
			}
		}

		virtual public bool ExistProductsWhereProductComplement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereProductComplement.RelationType);
			}
		}


		virtual public Product ProductWhereVariant
		{ 
			get
			{
				return (Product) Strategy.GetCompositeAssociation(Meta.ProductWhereVariant.RelationType);
			}
		} 

		virtual public bool ExistProductWhereVariant
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ProductWhereVariant.RelationType);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereProductObsolescence
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereProductObsolescence.RelationType);
			}
		}

		virtual public bool ExistProductsWhereProductObsolescence
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereProductObsolescence.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new TimeAndMaterialsServiceOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TimeAndMaterialsServiceOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TimeAndMaterialsServiceOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TimeAndMaterialsServiceOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TimeAndMaterialsServiceOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TimeAndMaterialsServiceOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TimeAndMaterialsServiceOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TimeAndMaterialsServiceOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TimeAndMaterialsServiceOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TimeAndMaterialsServiceOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new TimeAndMaterialsServiceDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new TimeAndMaterialsServiceDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class TimeAndMaterialsServiceBuilder : Allors.ObjectBuilder<TimeAndMaterialsService> , ServiceBuilder, global::System.IDisposable
	{		
		public TimeAndMaterialsServiceBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(TimeAndMaterialsService instance)
		{

			instance.InternalComment = this.InternalComment;
		
		
			

			if(this.SupportDiscontinuationDate.HasValue)
			{
				instance.SupportDiscontinuationDate = this.SupportDiscontinuationDate.Value;
			}			
		
		
			

			if(this.SalesDiscontinuationDate.HasValue)
			{
				instance.SalesDiscontinuationDate = this.SalesDiscontinuationDate.Value;
			}			
		
				

			instance.IntrastatCode = this.IntrastatCode;
		
				
			

			if(this.IntroductionDate.HasValue)
			{
				instance.IntroductionDate = this.IntroductionDate.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.PrimaryProductCategory = this.PrimaryProductCategory;

		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.LocalisedDescriptions!=null)
			{
				instance.LocalisedDescriptions = this.LocalisedDescriptions.ToArray();
			}
		
			if(this.LocalisedComments!=null)
			{
				instance.LocalisedComments = this.LocalisedComments.ToArray();
			}
						

			instance.ProductComplement = this.ProductComplement;

		
			if(this.OptionalFeatures!=null)
			{
				instance.OptionalFeatures = this.OptionalFeatures.ToArray();
			}
		
			if(this.Variants!=null)
			{
				instance.Variants = this.Variants.ToArray();
			}
		
			if(this.Documents!=null)
			{
				instance.Documents = this.Documents.ToArray();
			}
		
			if(this.StandardFeatures!=null)
			{
				instance.StandardFeatures = this.StandardFeatures.ToArray();
			}
		

			instance.UnitOfMeasure = this.UnitOfMeasure;

		
			if(this.EstimatedProductCosts!=null)
			{
				instance.EstimatedProductCosts = this.EstimatedProductCosts.ToArray();
			}
		
			if(this.ProductObsolescences!=null)
			{
				instance.ProductObsolescences = this.ProductObsolescences.ToArray();
			}
		
			if(this.SelectableFeatures!=null)
			{
				instance.SelectableFeatures = this.SelectableFeatures.ToArray();
			}
		

			instance.VatRate = this.VatRate;

				
			if(this.ProductCategories!=null)
			{
				instance.ProductCategories = this.ProductCategories.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public ProductCategory PrimaryProductCategory {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithPrimaryProductCategory(ProductCategory value)
		        {
		            if(this.PrimaryProductCategory!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PrimaryProductCategory = value;
		            return this;
		        }		

				
				public global::System.DateTime? SupportDiscontinuationDate {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithSupportDiscontinuationDate(global::System.DateTime? value)
		        {
				    if(this.SupportDiscontinuationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SupportDiscontinuationDate = value;
		            return this;
		        }	

				public global::System.DateTime? SalesDiscontinuationDate {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithSalesDiscontinuationDate(global::System.DateTime? value)
		        {
				    if(this.SalesDiscontinuationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesDiscontinuationDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<LocalisedText> LocalisedDescriptions {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithLocalisedDescription(LocalisedText value)
		        {
					if(this.LocalisedDescriptions == null)
					{
						this.LocalisedDescriptions = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedDescriptions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<LocalisedText> LocalisedComments {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithLocalisedComment(LocalisedText value)
		        {
					if(this.LocalisedComments == null)
					{
						this.LocalisedComments = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedComments.Add(value);
		            return this;
		        }		

				
				public global::System.String IntrastatCode {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithIntrastatCode(global::System.String value)
		        {
				    if(this.IntrastatCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IntrastatCode = value;
		            return this;
		        }	

				public Product ProductComplement {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithProductComplement(Product value)
		        {
		            if(this.ProductComplement!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductComplement = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> OptionalFeatures {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithOptionalFeature(ProductFeature value)
		        {
					if(this.OptionalFeatures == null)
					{
						this.OptionalFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.OptionalFeatures.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Product> Variants {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithVariant(Product value)
		        {
					if(this.Variants == null)
					{
						this.Variants = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.Variants.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? IntroductionDate {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithIntroductionDate(global::System.DateTime? value)
		        {
				    if(this.IntroductionDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IntroductionDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Document> Documents {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithDocument(Document value)
		        {
					if(this.Documents == null)
					{
						this.Documents = new global::System.Collections.Generic.List<Document>(); 
					}
		            this.Documents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> StandardFeatures {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithStandardFeature(ProductFeature value)
		        {
					if(this.StandardFeatures == null)
					{
						this.StandardFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.StandardFeatures.Add(value);
		            return this;
		        }		

				
				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EstimatedProductCost> EstimatedProductCosts {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithEstimatedProductCost(EstimatedProductCost value)
		        {
					if(this.EstimatedProductCosts == null)
					{
						this.EstimatedProductCosts = new global::System.Collections.Generic.List<EstimatedProductCost>(); 
					}
		            this.EstimatedProductCosts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Product> ProductObsolescences {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithProductObsolescence(Product value)
		        {
					if(this.ProductObsolescences == null)
					{
						this.ProductObsolescences = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.ProductObsolescences.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> SelectableFeatures {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithSelectableFeature(ProductFeature value)
		        {
					if(this.SelectableFeatures == null)
					{
						this.SelectableFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.SelectableFeatures.Add(value);
		            return this;
		        }		

				
				public VatRate VatRate {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithVatRate(VatRate value)
		        {
		            if(this.VatRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRate = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductCategory> ProductCategories {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithProductCategory(ProductCategory value)
		        {
					if(this.ProductCategories == null)
					{
						this.ProductCategories = new global::System.Collections.Generic.List<ProductCategory>(); 
					}
		            this.ProductCategories.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public TimeAndMaterialsServiceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class TimeAndMaterialsServices : global::Allors.ObjectsBase<TimeAndMaterialsService>
	{
		public TimeAndMaterialsServices(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaTimeAndMaterialsService Meta
		{
			get
			{
				return Allors.Meta.MetaTimeAndMaterialsService.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}