// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Person : Allors.IObject , User, Party, Deletable, Versioned
	{
		private readonly IStrategy strategy;

		public Person(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPerson Meta
		{
			get
			{
				return Allors.Meta.MetaPerson.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Person Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Person) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String FirstName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FirstName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FirstName.RelationType, value);
			}
		}

		virtual public bool ExistFirstName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FirstName.RelationType);
			}
		}

		virtual public void RemoveFirstName()
		{
			Strategy.RemoveUnitRole(Meta.FirstName.RelationType);
		}


		virtual public global::System.String LastName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.LastName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastName.RelationType, value);
			}
		}

		virtual public bool ExistLastName{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastName.RelationType);
			}
		}

		virtual public void RemoveLastName()
		{
			Strategy.RemoveUnitRole(Meta.LastName.RelationType);
		}


		virtual public global::System.String MiddleName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.MiddleName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MiddleName.RelationType, value);
			}
		}

		virtual public bool ExistMiddleName{
			get
			{
				return Strategy.ExistUnitRole(Meta.MiddleName.RelationType);
			}
		}

		virtual public void RemoveMiddleName()
		{
			Strategy.RemoveUnitRole(Meta.MiddleName.RelationType);
		}


		virtual public PersonVersion CurrentVersion
		{ 
			get
			{
				return (PersonVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PersonVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PersonVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PersonVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::Allors.Extent<PersonRole> PersonRoles
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PersonRoles.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PersonRoles.RelationType, value);
			}
		}

		virtual public void AddPersonRole (PersonRole value)
		{
			Strategy.AddCompositeRole(Meta.PersonRoles.RelationType, value);
		}

		virtual public void RemovePersonRole (PersonRole value)
		{
			Strategy.RemoveCompositeRole(Meta.PersonRoles.RelationType, value);
		}

		virtual public bool ExistPersonRoles
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PersonRoles.RelationType);
			}
		}

		virtual public void RemovePersonRoles()
		{
			Strategy.RemoveCompositeRoles(Meta.PersonRoles.RelationType);
		}


		virtual public Salutation Salutation
		{ 
			get
			{
				return (Salutation) Strategy.GetCompositeRole(Meta.Salutation.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Salutation.RelationType, value);
			}
		}

		virtual public bool ExistSalutation
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Salutation.RelationType);
			}
		}

		virtual public void RemoveSalutation()
		{
			Strategy.RemoveCompositeRole(Meta.Salutation.RelationType);
		}


		virtual public global::System.Decimal? YTDCommission 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.YTDCommission.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.YTDCommission.RelationType, value);
			}
		}

		virtual public bool ExistYTDCommission{
			get
			{
				return Strategy.ExistUnitRole(Meta.YTDCommission.RelationType);
			}
		}

		virtual public void RemoveYTDCommission()
		{
			Strategy.RemoveUnitRole(Meta.YTDCommission.RelationType);
		}


		virtual public global::Allors.Extent<PersonClassification> PersonClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PersonClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PersonClassifications.RelationType, value);
			}
		}

		virtual public void AddPersonClassification (PersonClassification value)
		{
			Strategy.AddCompositeRole(Meta.PersonClassifications.RelationType, value);
		}

		virtual public void RemovePersonClassification (PersonClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.PersonClassifications.RelationType, value);
		}

		virtual public bool ExistPersonClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PersonClassifications.RelationType);
			}
		}

		virtual public void RemovePersonClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PersonClassifications.RelationType);
		}


		virtual public Citizenship Citizenship
		{ 
			get
			{
				return (Citizenship) Strategy.GetCompositeRole(Meta.Citizenship.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Citizenship.RelationType, value);
			}
		}

		virtual public bool ExistCitizenship
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Citizenship.RelationType);
			}
		}

		virtual public void RemoveCitizenship()
		{
			Strategy.RemoveCompositeRole(Meta.Citizenship.RelationType);
		}


		virtual public global::System.Decimal? LastYearsCommission 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.LastYearsCommission.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastYearsCommission.RelationType, value);
			}
		}

		virtual public bool ExistLastYearsCommission{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastYearsCommission.RelationType);
			}
		}

		virtual public void RemoveLastYearsCommission()
		{
			Strategy.RemoveUnitRole(Meta.LastYearsCommission.RelationType);
		}


		virtual public global::System.String GivenName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.GivenName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.GivenName.RelationType, value);
			}
		}

		virtual public bool ExistGivenName{
			get
			{
				return Strategy.ExistUnitRole(Meta.GivenName.RelationType);
			}
		}

		virtual public void RemoveGivenName()
		{
			Strategy.RemoveUnitRole(Meta.GivenName.RelationType);
		}


		virtual public global::Allors.Extent<PersonalTitle> Titles
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Titles.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Titles.RelationType, value);
			}
		}

		virtual public void AddTitle (PersonalTitle value)
		{
			Strategy.AddCompositeRole(Meta.Titles.RelationType, value);
		}

		virtual public void RemoveTitle (PersonalTitle value)
		{
			Strategy.RemoveCompositeRole(Meta.Titles.RelationType, value);
		}

		virtual public bool ExistTitles
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Titles.RelationType);
			}
		}

		virtual public void RemoveTitles()
		{
			Strategy.RemoveCompositeRoles(Meta.Titles.RelationType);
		}


		virtual public global::System.String MothersMaidenName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.MothersMaidenName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MothersMaidenName.RelationType, value);
			}
		}

		virtual public bool ExistMothersMaidenName{
			get
			{
				return Strategy.ExistUnitRole(Meta.MothersMaidenName.RelationType);
			}
		}

		virtual public void RemoveMothersMaidenName()
		{
			Strategy.RemoveUnitRole(Meta.MothersMaidenName.RelationType);
		}


		virtual public global::System.DateTime? BirthDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BirthDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BirthDate.RelationType, value);
			}
		}

		virtual public bool ExistBirthDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.BirthDate.RelationType);
			}
		}

		virtual public void RemoveBirthDate()
		{
			Strategy.RemoveUnitRole(Meta.BirthDate.RelationType);
		}


		virtual public global::System.Decimal? Height 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Height.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Height.RelationType, value);
			}
		}

		virtual public bool ExistHeight{
			get
			{
				return Strategy.ExistUnitRole(Meta.Height.RelationType);
			}
		}

		virtual public void RemoveHeight()
		{
			Strategy.RemoveUnitRole(Meta.Height.RelationType);
		}


		virtual public global::Allors.Extent<PersonTraining> PersonTrainings
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PersonTrainings.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PersonTrainings.RelationType, value);
			}
		}

		virtual public void AddPersonTraining (PersonTraining value)
		{
			Strategy.AddCompositeRole(Meta.PersonTrainings.RelationType, value);
		}

		virtual public void RemovePersonTraining (PersonTraining value)
		{
			Strategy.RemoveCompositeRole(Meta.PersonTrainings.RelationType, value);
		}

		virtual public bool ExistPersonTrainings
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PersonTrainings.RelationType);
			}
		}

		virtual public void RemovePersonTrainings()
		{
			Strategy.RemoveCompositeRoles(Meta.PersonTrainings.RelationType);
		}


		virtual public GenderType Gender
		{ 
			get
			{
				return (GenderType) Strategy.GetCompositeRole(Meta.Gender.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Gender.RelationType, value);
			}
		}

		virtual public bool ExistGender
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Gender.RelationType);
			}
		}

		virtual public void RemoveGender()
		{
			Strategy.RemoveCompositeRole(Meta.Gender.RelationType);
		}


		virtual public global::System.Int32? Weight 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Weight.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Weight.RelationType, value);
			}
		}

		virtual public bool ExistWeight{
			get
			{
				return Strategy.ExistUnitRole(Meta.Weight.RelationType);
			}
		}

		virtual public void RemoveWeight()
		{
			Strategy.RemoveUnitRole(Meta.Weight.RelationType);
		}


		virtual public global::Allors.Extent<Hobby> Hobbies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Hobbies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Hobbies.RelationType, value);
			}
		}

		virtual public void AddHobby (Hobby value)
		{
			Strategy.AddCompositeRole(Meta.Hobbies.RelationType, value);
		}

		virtual public void RemoveHobby (Hobby value)
		{
			Strategy.RemoveCompositeRole(Meta.Hobbies.RelationType, value);
		}

		virtual public bool ExistHobbies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Hobbies.RelationType);
			}
		}

		virtual public void RemoveHobbies()
		{
			Strategy.RemoveCompositeRoles(Meta.Hobbies.RelationType);
		}


		virtual public global::System.Int32? TotalYearsWorkExperience 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.TotalYearsWorkExperience.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalYearsWorkExperience.RelationType, value);
			}
		}

		virtual public bool ExistTotalYearsWorkExperience{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalYearsWorkExperience.RelationType);
			}
		}

		virtual public void RemoveTotalYearsWorkExperience()
		{
			Strategy.RemoveUnitRole(Meta.TotalYearsWorkExperience.RelationType);
		}


		virtual public global::Allors.Extent<Passport> Passports
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Passports.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Passports.RelationType, value);
			}
		}

		virtual public void AddPassport (Passport value)
		{
			Strategy.AddCompositeRole(Meta.Passports.RelationType, value);
		}

		virtual public void RemovePassport (Passport value)
		{
			Strategy.RemoveCompositeRole(Meta.Passports.RelationType, value);
		}

		virtual public bool ExistPassports
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Passports.RelationType);
			}
		}

		virtual public void RemovePassports()
		{
			Strategy.RemoveCompositeRoles(Meta.Passports.RelationType);
		}


		virtual public MaritalStatus MaritalStatus
		{ 
			get
			{
				return (MaritalStatus) Strategy.GetCompositeRole(Meta.MaritalStatus.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MaritalStatus.RelationType, value);
			}
		}

		virtual public bool ExistMaritalStatus
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MaritalStatus.RelationType);
			}
		}

		virtual public void RemoveMaritalStatus()
		{
			Strategy.RemoveCompositeRole(Meta.MaritalStatus.RelationType);
		}


		virtual public Media Picture
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Picture.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Picture.RelationType, value);
			}
		}

		virtual public bool ExistPicture
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Picture.RelationType);
			}
		}

		virtual public void RemovePicture()
		{
			Strategy.RemoveCompositeRole(Meta.Picture.RelationType);
		}


		virtual public global::System.String SocialSecurityNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SocialSecurityNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SocialSecurityNumber.RelationType, value);
			}
		}

		virtual public bool ExistSocialSecurityNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.SocialSecurityNumber.RelationType);
			}
		}

		virtual public void RemoveSocialSecurityNumber()
		{
			Strategy.RemoveUnitRole(Meta.SocialSecurityNumber.RelationType);
		}


		virtual public global::System.DateTime? DeceasedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DeceasedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeceasedDate.RelationType, value);
			}
		}

		virtual public bool ExistDeceasedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeceasedDate.RelationType);
			}
		}

		virtual public void RemoveDeceasedDate()
		{
			Strategy.RemoveUnitRole(Meta.DeceasedDate.RelationType);
		}


		virtual public global::System.String Function 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Function.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Function.RelationType, value);
			}
		}

		virtual public bool ExistFunction{
			get
			{
				return Strategy.ExistUnitRole(Meta.Function.RelationType);
			}
		}

		virtual public void RemoveFunction()
		{
			Strategy.RemoveUnitRole(Meta.Function.RelationType);
		}


		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserName.RelationType, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserName.RelationType);
			}
		}

		virtual public void RemoveUserName()
		{
			Strategy.RemoveUnitRole(Meta.UserName.RelationType);
		}


		virtual public global::System.String NormalizedUserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.NormalizedUserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NormalizedUserName.RelationType, value);
			}
		}

		virtual public bool ExistNormalizedUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.NormalizedUserName.RelationType);
			}
		}

		virtual public void RemoveNormalizedUserName()
		{
			Strategy.RemoveUnitRole(Meta.NormalizedUserName.RelationType);
		}


		virtual public global::System.String UserPasswordHash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserPasswordHash.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserPasswordHash.RelationType, value);
			}
		}

		virtual public bool ExistUserPasswordHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserPasswordHash.RelationType);
			}
		}

		virtual public void RemoveUserPasswordHash()
		{
			Strategy.RemoveUnitRole(Meta.UserPasswordHash.RelationType);
		}


		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserEmail.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmail.RelationType, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmail.RelationType);
			}
		}

		virtual public void RemoveUserEmail()
		{
			Strategy.RemoveUnitRole(Meta.UserEmail.RelationType);
		}


		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmailConfirmed.RelationType, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			Strategy.RemoveUnitRole(Meta.UserEmailConfirmed.RelationType);
		}


		virtual public TaskList TaskList
		{ 
			get
			{
				return (TaskList) Strategy.GetCompositeRole(Meta.TaskList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TaskList.RelationType, value);
			}
		}

		virtual public bool ExistTaskList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TaskList.RelationType);
			}
		}

		virtual public void RemoveTaskList()
		{
			Strategy.RemoveCompositeRole(Meta.TaskList.RelationType);
		}


		virtual public NotificationList NotificationList
		{ 
			get
			{
				return (NotificationList) Strategy.GetCompositeRole(Meta.NotificationList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NotificationList.RelationType, value);
			}
		}

		virtual public bool ExistNotificationList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NotificationList.RelationType);
			}
		}

		virtual public void RemoveNotificationList()
		{
			Strategy.RemoveCompositeRole(Meta.NotificationList.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale.RelationType, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale.RelationType);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale.RelationType);
		}


		virtual public global::System.String PartyName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PartyName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PartyName.RelationType, value);
			}
		}

		virtual public bool ExistPartyName{
			get
			{
				return Strategy.ExistUnitRole(Meta.PartyName.RelationType);
			}
		}

		virtual public void RemovePartyName()
		{
			Strategy.RemoveUnitRole(Meta.PartyName.RelationType);
		}


		virtual public PostalAddress GeneralCorrespondence
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralCorrespondence.RelationType, value);
			}
		}

		virtual public bool ExistGeneralCorrespondence
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
		}

		virtual public void RemoveGeneralCorrespondence()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralCorrespondence.RelationType);
		}


		virtual public global::System.Decimal YTDRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.YTDRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.YTDRevenue.RelationType, value);
			}
		}

		virtual public bool ExistYTDRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.YTDRevenue.RelationType);
			}
		}

		virtual public void RemoveYTDRevenue()
		{
			Strategy.RemoveUnitRole(Meta.YTDRevenue.RelationType);
		}


		virtual public global::System.Decimal LastYearsRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.LastYearsRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastYearsRevenue.RelationType, value);
			}
		}

		virtual public bool ExistLastYearsRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastYearsRevenue.RelationType);
			}
		}

		virtual public void RemoveLastYearsRevenue()
		{
			Strategy.RemoveUnitRole(Meta.LastYearsRevenue.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Qualification> Qualifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Qualifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Qualifications.RelationType, value);
			}
		}

		virtual public void AddQualification (Qualification value)
		{
			Strategy.AddCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public void RemoveQualification (Qualification value)
		{
			Strategy.RemoveCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public bool ExistQualifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Qualifications.RelationType);
			}
		}

		virtual public void RemoveQualifications()
		{
			Strategy.RemoveCompositeRoles(Meta.Qualifications.RelationType);
		}


		virtual public ContactMechanism HomeAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HomeAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HomeAddress.RelationType, value);
			}
		}

		virtual public bool ExistHomeAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HomeAddress.RelationType);
			}
		}

		virtual public void RemoveHomeAddress()
		{
			Strategy.RemoveCompositeRole(Meta.HomeAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> InactiveOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistInactiveOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveInactiveOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
		}


		virtual public ContactMechanism SalesOffice
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.SalesOffice.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOffice.RelationType, value);
			}
		}

		virtual public bool ExistSalesOffice
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOffice.RelationType);
			}
		}

		virtual public void RemoveSalesOffice()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOffice.RelationType);
		}


		virtual public global::Allors.Extent<Person> InactiveContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveContacts.RelationType, value);
			}
		}

		virtual public void AddInactiveContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public void RemoveInactiveContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public bool ExistInactiveContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveContacts.RelationType);
			}
		}

		virtual public void RemoveInactiveContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveContacts.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> InactivePartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistInactivePartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveInactivePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentSalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentSalesReps.RelationType, value);
			}
		}

		virtual public void AddCurrentSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public void RemoveCurrentSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public bool ExistCurrentSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
		}

		virtual public void RemoveCurrentSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentSalesReps.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> PartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public void RemovePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemovePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesFax.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<BillingAccount> BillingAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BillingAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BillingAccounts.RelationType, value);
			}
		}

		virtual public void AddBillingAccount (BillingAccount value)
		{
			Strategy.AddCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public void RemoveBillingAccount (BillingAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public bool ExistBillingAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BillingAccounts.RelationType);
			}
		}

		virtual public void RemoveBillingAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BillingAccounts.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<PartySkill> PartySkills
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartySkills.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartySkills.RelationType, value);
			}
		}

		virtual public void AddPartySkill (PartySkill value)
		{
			Strategy.AddCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public void RemovePartySkill (PartySkill value)
		{
			Strategy.RemoveCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public bool ExistPartySkills
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartySkills.RelationType);
			}
		}

		virtual public void RemovePartySkills()
		{
			Strategy.RemoveCompositeRoles(Meta.PartySkills.RelationType);
		}


		virtual public global::Allors.Extent<PartyClassification> PartyClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyClassifications.RelationType, value);
			}
		}

		virtual public void AddPartyClassification (PartyClassification value)
		{
			Strategy.AddCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public void RemovePartyClassification (PartyClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public bool ExistPartyClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyClassifications.RelationType);
			}
		}

		virtual public void RemovePartyClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyClassifications.RelationType);
		}


		virtual public global::System.Boolean? ExcludeFromDunning 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ExcludeFromDunning.RelationType, value);
			}
		}

		virtual public bool ExistExcludeFromDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
		}

		virtual public void RemoveExcludeFromDunning()
		{
			Strategy.RemoveUnitRole(Meta.ExcludeFromDunning.RelationType);
		}


		virtual public global::Allors.Extent<BankAccount> BankAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BankAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BankAccounts.RelationType, value);
			}
		}

		virtual public void AddBankAccount (BankAccount value)
		{
			Strategy.AddCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public void RemoveBankAccount (BankAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public bool ExistBankAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BankAccounts.RelationType);
			}
		}

		virtual public void RemoveBankAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BankAccounts.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentContacts.RelationType, value);
			}
		}

		virtual public void AddCurrentContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public void RemoveCurrentContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public bool ExistCurrentContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentContacts.RelationType);
			}
		}

		virtual public void RemoveCurrentContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentContacts.RelationType);
		}


		virtual public ContactMechanism BillingAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingAddress.RelationType, value);
			}
		}

		virtual public bool ExistBillingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingAddress.RelationType);
			}
		}

		virtual public void RemoveBillingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.BillingAddress.RelationType);
		}


		virtual public EmailAddress GeneralEmail
		{ 
			get
			{
				return (EmailAddress) Strategy.GetCompositeRole(Meta.GeneralEmail.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralEmail.RelationType, value);
			}
		}

		virtual public bool ExistGeneralEmail
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralEmail.RelationType);
			}
		}

		virtual public void RemoveGeneralEmail()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralEmail.RelationType);
		}


		virtual public ShipmentMethod DefaultShipmentMethod
		{ 
			get
			{
				return (ShipmentMethod) Strategy.GetCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultShipmentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultShipmentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultShipmentMethod.RelationType);
		}


		virtual public global::Allors.Extent<Resume> Resumes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Resumes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Resumes.RelationType, value);
			}
		}

		virtual public void AddResume (Resume value)
		{
			Strategy.AddCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public void RemoveResume (Resume value)
		{
			Strategy.RemoveCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public bool ExistResumes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Resumes.RelationType);
			}
		}

		virtual public void RemoveResumes()
		{
			Strategy.RemoveCompositeRoles(Meta.Resumes.RelationType);
		}


		virtual public ContactMechanism HeadQuarter
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HeadQuarter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HeadQuarter.RelationType, value);
			}
		}

		virtual public bool ExistHeadQuarter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HeadQuarter.RelationType);
			}
		}

		virtual public void RemoveHeadQuarter()
		{
			Strategy.RemoveCompositeRole(Meta.HeadQuarter.RelationType);
		}


		virtual public EmailAddress PersonalEmailAddress
		{ 
			get
			{
				return (EmailAddress) Strategy.GetCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonalEmailAddress.RelationType, value);
			}
		}

		virtual public bool ExistPersonalEmailAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
		}

		virtual public void RemovePersonalEmailAddress()
		{
			Strategy.RemoveCompositeRole(Meta.PersonalEmailAddress.RelationType);
		}


		virtual public TelecommunicationsNumber CellPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CellPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistCellPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveCellPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.CellPhoneNumber.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesPhone.RelationType);
		}


		virtual public ContactMechanism OrderAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderAddress.RelationType, value);
			}
		}

		virtual public bool ExistOrderAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderAddress.RelationType);
			}
		}

		virtual public void RemoveOrderAddress()
		{
			Strategy.RemoveCompositeRole(Meta.OrderAddress.RelationType);
		}


		virtual public ElectronicAddress InternetAddress
		{ 
			get
			{
				return (ElectronicAddress) Strategy.GetCompositeRole(Meta.InternetAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternetAddress.RelationType, value);
			}
		}

		virtual public bool ExistInternetAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternetAddress.RelationType);
			}
		}

		virtual public void RemoveInternetAddress()
		{
			Strategy.RemoveCompositeRole(Meta.InternetAddress.RelationType);
		}


		virtual public global::Allors.Extent<Media> Contents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Contents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Contents.RelationType, value);
			}
		}

		virtual public void AddContent (Media value)
		{
			Strategy.AddCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public void RemoveContent (Media value)
		{
			Strategy.RemoveCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public bool ExistContents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Contents.RelationType);
			}
		}

		virtual public void RemoveContents()
		{
			Strategy.RemoveCompositeRoles(Meta.Contents.RelationType);
		}


		virtual public global::Allors.Extent<CreditCard> CreditCards
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CreditCards.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CreditCards.RelationType, value);
			}
		}

		virtual public void AddCreditCard (CreditCard value)
		{
			Strategy.AddCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public void RemoveCreditCard (CreditCard value)
		{
			Strategy.RemoveCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public bool ExistCreditCards
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CreditCards.RelationType);
			}
		}

		virtual public void RemoveCreditCards()
		{
			Strategy.RemoveCompositeRoles(Meta.CreditCards.RelationType);
		}


		virtual public PostalAddress ShippingAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShippingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAddress.RelationType, value);
			}
		}

		virtual public bool ExistShippingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAddress.RelationType);
			}
		}

		virtual public void RemoveShippingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> CurrentOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistCurrentOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveCurrentOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
		}


		virtual public global::System.Decimal OpenOrderAmount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.OpenOrderAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OpenOrderAmount.RelationType, value);
			}
		}

		virtual public bool ExistOpenOrderAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.OpenOrderAmount.RelationType);
			}
		}

		virtual public void RemoveOpenOrderAmount()
		{
			Strategy.RemoveUnitRole(Meta.OpenOrderAmount.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralFaxNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralFaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralFaxNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralFaxNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralFaxNumber.RelationType);
		}


		virtual public PaymentMethod DefaultPaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultPaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPaymentMethod.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> CurrentPartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistCurrentPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveCurrentPartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralPhoneNumber.RelationType);
		}


		virtual public Currency PreferredCurrency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.PreferredCurrency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreferredCurrency.RelationType, value);
			}
		}

		virtual public bool ExistPreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreferredCurrency.RelationType);
			}
		}

		virtual public void RemovePreferredCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.PreferredCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal? SimpleMovingAverage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SimpleMovingAverage.RelationType, value);
			}
		}

		virtual public bool ExistSimpleMovingAverage{
			get
			{
				return Strategy.ExistUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
		}

		virtual public void RemoveSimpleMovingAverage()
		{
			Strategy.RemoveUnitRole(Meta.SimpleMovingAverage.RelationType);
		}


		virtual public global::System.Decimal AmountOverDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountOverDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountOverDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountOverDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountOverDue.RelationType);
			}
		}

		virtual public void RemoveAmountOverDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountOverDue.RelationType);
		}


		virtual public DunningType DunningType
		{ 
			get
			{
				return (DunningType) Strategy.GetCompositeRole(Meta.DunningType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DunningType.RelationType, value);
			}
		}

		virtual public bool ExistDunningType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DunningType.RelationType);
			}
		}

		virtual public void RemoveDunningType()
		{
			Strategy.RemoveCompositeRole(Meta.DunningType.RelationType);
		}


		virtual public global::System.Decimal AmountDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountDue.RelationType);
			}
		}

		virtual public void RemoveAmountDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountDue.RelationType);
		}


		virtual public global::System.DateTime? LastReminderDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastReminderDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastReminderDate.RelationType, value);
			}
		}

		virtual public bool ExistLastReminderDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastReminderDate.RelationType);
			}
		}

		virtual public void RemoveLastReminderDate()
		{
			Strategy.RemoveUnitRole(Meta.LastReminderDate.RelationType);
		}


		virtual public global::System.Decimal? CreditLimit 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.CreditLimit.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreditLimit.RelationType, value);
			}
		}

		virtual public bool ExistCreditLimit{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreditLimit.RelationType);
			}
		}

		virtual public void RemoveCreditLimit()
		{
			Strategy.RemoveUnitRole(Meta.CreditLimit.RelationType);
		}


		virtual public global::System.Int32 SubAccountNumber 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.SubAccountNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SubAccountNumber.RelationType, value);
			}
		}

		virtual public bool ExistSubAccountNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.SubAccountNumber.RelationType);
			}
		}

		virtual public void RemoveSubAccountNumber()
		{
			Strategy.RemoveUnitRole(Meta.SubAccountNumber.RelationType);
		}


		virtual public global::System.DateTime? BlockedForDunning 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BlockedForDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockedForDunning.RelationType, value);
			}
		}

		virtual public bool ExistBlockedForDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockedForDunning.RelationType);
			}
		}

		virtual public void RemoveBlockedForDunning()
		{
			Strategy.RemoveUnitRole(Meta.BlockedForDunning.RelationType);
		}


		virtual public global::Allors.Extent<Agreement> Agreements
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Agreements.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Agreements.RelationType, value);
			}
		}

		virtual public void AddAgreement (Agreement value)
		{
			Strategy.AddCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public void RemoveAgreement (Agreement value)
		{
			Strategy.RemoveCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public bool ExistAgreements
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Agreements.RelationType);
			}
		}

		virtual public void RemoveAgreements()
		{
			Strategy.RemoveCompositeRoles(Meta.Agreements.RelationType);
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEvents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CommunicationEvents.RelationType, value);
			}
		}

		virtual public void AddCommunicationEvent (CommunicationEvent value)
		{
			Strategy.AddCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public void RemoveCommunicationEvent (CommunicationEvent value)
		{
			Strategy.RemoveCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public bool ExistCommunicationEvents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
		}

		virtual public void RemoveCommunicationEvents()
		{
			Strategy.RemoveCompositeRoles(Meta.CommunicationEvents.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}



		virtual public BankAccount BankAccountWhereContactPerson
		{ 
			get
			{
				return (BankAccount) Strategy.GetCompositeAssociation(Meta.BankAccountWhereContactPerson.RelationType);
			}
		} 

		virtual public bool ExistBankAccountWhereContactPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.BankAccountWhereContactPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<Cash> CashesWherePersonResponsible
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CashesWherePersonResponsible.RelationType);
			}
		}

		virtual public bool ExistCashesWherePersonResponsible
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CashesWherePersonResponsible.RelationType);
			}
		}


		virtual public global::Allors.Extent<Employment> EmploymentsWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmploymentsWhereEmployee.RelationType);
			}
		}

		virtual public bool ExistEmploymentsWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmploymentsWhereEmployee.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmploymentApplication> EmploymentApplicationsWherePerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmploymentApplicationsWherePerson.RelationType);
			}
		}

		virtual public bool ExistEmploymentApplicationsWherePerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmploymentApplicationsWherePerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngineeringChange> EngineeringChangesWhereRequestor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngineeringChangesWhereRequestor.RelationType);
			}
		}

		virtual public bool ExistEngineeringChangesWhereRequestor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngineeringChangesWhereRequestor.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngineeringChange> EngineeringChangesWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngineeringChangesWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistEngineeringChangesWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngineeringChangesWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngineeringChange> EngineeringChangesWhereDesigner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngineeringChangesWhereDesigner.RelationType);
			}
		}

		virtual public bool ExistEngineeringChangesWhereDesigner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngineeringChangesWhereDesigner.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngineeringChange> EngineeringChangesWhereTester
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngineeringChangesWhereTester.RelationType);
			}
		}

		virtual public bool ExistEngineeringChangesWhereTester
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngineeringChangesWhereTester.RelationType);
			}
		}


		virtual public global::Allors.Extent<EventRegistration> EventRegistrationsWherePerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EventRegistrationsWherePerson.RelationType);
			}
		}

		virtual public bool ExistEventRegistrationsWherePerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EventRegistrationsWherePerson.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereCurrentSalesRep
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereCurrentSalesRep.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereCurrentSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereCurrentSalesRep.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereSalesRep
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereSalesRep.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereSalesRep.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActiveEmployee
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActiveEmployee.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActiveEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActiveEmployee.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickListVersion> PickListVersionsWherePicker
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListVersionsWherePicker.RelationType);
			}
		}

		virtual public bool ExistPickListVersionsWherePicker
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListVersionsWherePicker.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItemVersion> SalesInvoiceItemVersionsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemVersionsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemVersionsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> OrganisationContactRelationshipsWhereContact
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationContactRelationshipsWhereContact.RelationType);
			}
		}

		virtual public bool ExistOrganisationContactRelationshipsWhereContact
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationContactRelationshipsWhereContact.RelationType);
			}
		}


		virtual public global::Allors.Extent<OwnCreditCard> OwnCreditCardsWhereOwner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OwnCreditCardsWhereOwner.RelationType);
			}
		}

		virtual public bool ExistOwnCreditCardsWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OwnCreditCardsWhereOwner.RelationType);
			}
		}


		virtual public global::Allors.Extent<PerformanceNote> PerformanceNotesWhereGivenByManager
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PerformanceNotesWhereGivenByManager.RelationType);
			}
		}

		virtual public bool ExistPerformanceNotesWhereGivenByManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PerformanceNotesWhereGivenByManager.RelationType);
			}
		}


		virtual public global::Allors.Extent<PerformanceNote> PerformanceNotesWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PerformanceNotesWhereEmployee.RelationType);
			}
		}

		virtual public bool ExistPerformanceNotesWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PerformanceNotesWhereEmployee.RelationType);
			}
		}


		virtual public global::Allors.Extent<PerformanceReview> PerformanceReviewsWhereManager
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PerformanceReviewsWhereManager.RelationType);
			}
		}

		virtual public bool ExistPerformanceReviewsWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PerformanceReviewsWhereManager.RelationType);
			}
		}


		virtual public global::Allors.Extent<PerformanceReview> PerformanceReviewsWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PerformanceReviewsWhereEmployee.RelationType);
			}
		}

		virtual public bool ExistPerformanceReviewsWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PerformanceReviewsWhereEmployee.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickList> PickListsWherePicker
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListsWherePicker.RelationType);
			}
		}

		virtual public bool ExistPickListsWherePicker
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListsWherePicker.RelationType);
			}
		}


		virtual public global::Allors.Extent<PositionFulfillment> PositionFulfillmentsWherePerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PositionFulfillmentsWherePerson.RelationType);
			}
		}

		virtual public bool ExistPositionFulfillmentsWherePerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PositionFulfillmentsWherePerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProfessionalAssignment> ProfessionalAssignmentsWhereProfessional
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProfessionalAssignmentsWhereProfessional.RelationType);
			}
		}

		virtual public bool ExistProfessionalAssignmentsWhereProfessional
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProfessionalAssignmentsWhereProfessional.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProfessionalServicesRelationship> ProfessionalServicesRelationshipsWhereProfessional
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProfessionalServicesRelationshipsWhereProfessional.RelationType);
			}
		}

		virtual public bool ExistProfessionalServicesRelationshipsWhereProfessional
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProfessionalServicesRelationshipsWhereProfessional.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementCommunication> RequirementCommunicationsWhereAssociatedProfessional
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementCommunicationsWhereAssociatedProfessional.RelationType);
			}
		}

		virtual public bool ExistRequirementCommunicationsWhereAssociatedProfessional
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementCommunicationsWhereAssociatedProfessional.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItem> SalesInvoiceItemsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceItemsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepCommission> SalesRepCommissionsWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepCommissionsWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesRepCommissionsWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepCommissionsWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyProductCategoryRevenue> SalesRepPartyProductCategoryRevenuesWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyProductCategoryRevenuesWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyRevenue> SalesRepPartyRevenuesWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyRevenuesWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyRevenuesWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyRevenuesWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepProductCategoryRevenue> SalesRepProductCategoryRevenuesWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepProductCategoryRevenuesWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesRepProductCategoryRevenuesWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepProductCategoryRevenuesWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepRelationship> SalesRepRelationshipsWhereSalesRepresentative
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepRelationshipsWhereSalesRepresentative.RelationType);
			}
		}

		virtual public bool ExistSalesRepRelationshipsWhereSalesRepresentative
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepRelationshipsWhereSalesRepresentative.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepRevenue> SalesRepRevenuesWhereSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepRevenuesWhereSalesRep.RelationType);
			}
		}

		virtual public bool ExistSalesRepRevenuesWhereSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepRevenuesWhereSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<ServiceEntryHeader> ServiceEntryHeadersWhereSubmittedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ServiceEntryHeadersWhereSubmittedBy.RelationType);
			}
		}

		virtual public bool ExistServiceEntryHeadersWhereSubmittedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ServiceEntryHeadersWhereSubmittedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortAssignment> WorkEffortAssignmentsWhereProfessional
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortAssignmentsWhereProfessional.RelationType);
			}
		}

		virtual public bool ExistWorkEffortAssignmentsWhereProfessional
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortAssignmentsWhereProfessional.RelationType);
			}
		}


		virtual public global::Allors.Extent<Task> TasksWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TasksWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistTasksWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TasksWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<Task> TasksWherePerformer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TasksWherePerformer.RelationType);
			}
		}

		virtual public bool ExistTasksWherePerformer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TasksWherePerformer.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereOwner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereOwner.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereOwner.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereOwner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereOwner.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereOwner.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereCurrentAssignedProfessional
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereCurrentAssignedProfessional.RelationType);
			}
		}

		virtual public bool ExistEngagementItemsWhereCurrentAssignedProfessional
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereCurrentAssignedProfessional.RelationType);
			}
		}


		virtual public global::Allors.Extent<Invoice> InvoicesWhereContactPerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoicesWhereContactPerson.RelationType);
			}
		}

		virtual public bool ExistInvoicesWhereContactPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoicesWhereContactPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereInactiveContact
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereInactiveContact.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereInactiveContact
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereInactiveContact.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereCurrentSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereCurrentSalesRep.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereCurrentSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereCurrentSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereCurrentContact
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereCurrentContact.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereCurrentContact
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereCurrentContact.RelationType);
			}
		}


		virtual public global::Allors.Extent<Order> OrdersWhereContactPerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrdersWhereContactPerson.RelationType);
			}
		}

		virtual public bool ExistOrdersWhereContactPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrdersWhereContactPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereInactiveContact
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereInactiveContact.RelationType);
			}
		}

		virtual public bool ExistPartiesWhereInactiveContact
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereInactiveContact.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereCurrentSalesRep
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereCurrentSalesRep.RelationType);
			}
		}

		virtual public bool ExistPartiesWhereCurrentSalesRep
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereCurrentSalesRep.RelationType);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereCurrentContact
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereCurrentContact.RelationType);
			}
		}

		virtual public bool ExistPartiesWhereCurrentContact
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereCurrentContact.RelationType);
			}
		}


		virtual public global::Allors.Extent<Quote> QuotesWhereContactPerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuotesWhereContactPerson.RelationType);
			}
		}

		virtual public bool ExistQuotesWhereContactPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuotesWhereContactPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<Request> RequestsWhereContactPerson
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestsWhereContactPerson.RelationType);
			}
		}

		virtual public bool ExistRequestsWhereContactPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestsWhereContactPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereOwner
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereOwner.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereOwner.RelationType);
			}
		}


		virtual public Singleton SingletonWhereGuest
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		} 

		virtual public bool ExistSingletonWhereGuest
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereSubject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereEffectiveUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereEffectiveUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<Login> LoginsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}

		virtual public bool ExistLoginsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereSender
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereSender
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereRecipient
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereRecipient
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}


		virtual public global::Allors.Extent<TaskAssignment> TaskAssignmentsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}

		virtual public bool ExistTaskAssignmentsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereMember
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}

		virtual public bool ExistUserGroupsWhereMember
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}


		virtual public global::Allors.Extent<Auditable> AuditablesWhereCreatedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AuditablesWhereCreatedBy.RelationType);
			}
		}

		virtual public bool ExistAuditablesWhereCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AuditablesWhereCreatedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<Auditable> AuditablesWhereLastModifiedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AuditablesWhereLastModifiedBy.RelationType);
			}
		}

		virtual public bool ExistAuditablesWhereLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AuditablesWhereLastModifiedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereCreatedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereCreatedBy.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereCreatedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereLastModifiedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereLastModifiedBy.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereLastModifiedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<InvoiceVersion> InvoiceVersionsWhereCreatedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceVersionsWhereCreatedBy.RelationType);
			}
		}

		virtual public bool ExistInvoiceVersionsWhereCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceVersionsWhereCreatedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<InvoiceVersion> InvoiceVersionsWhereLastModifiedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceVersionsWhereLastModifiedBy.RelationType);
			}
		}

		virtual public bool ExistInvoiceVersionsWhereLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceVersionsWhereLastModifiedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderVersion> OrderVersionsWhereCreatedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderVersionsWhereCreatedBy.RelationType);
			}
		}

		virtual public bool ExistOrderVersionsWhereCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderVersionsWhereCreatedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderVersion> OrderVersionsWhereLastModifiedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderVersionsWhereLastModifiedBy.RelationType);
			}
		}

		virtual public bool ExistOrderVersionsWhereLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderVersionsWhereLastModifiedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereCreatedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereCreatedBy.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereCreatedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyVersion> PartyVersionsWhereLastModifiedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyVersionsWhereLastModifiedBy.RelationType);
			}
		}

		virtual public bool ExistPartyVersionsWhereLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyVersionsWhereLastModifiedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<CustomerRelationship> CustomerRelationshipsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CustomerRelationshipsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistCustomerRelationshipsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CustomerRelationshipsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Engagement> EngagementsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistEngagementsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Engagement> EngagementsWherePlacingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementsWherePlacingParty.RelationType);
			}
		}

		virtual public bool ExistEngagementsWherePlacingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementsWherePlacingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaceToFaceCommunication> FaceToFaceCommunicationsWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaceToFaceCommunicationsWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistFaceToFaceCommunicationsWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaceToFaceCommunicationsWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaceToFaceCommunicationVersion> FaceToFaceCommunicationVersionsWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaceToFaceCommunicationVersionsWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistFaceToFaceCommunicationVersionsWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaceToFaceCommunicationVersionsWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunication> FaxCommunicationsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunication> FaxCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunicationVersion> FaxCommunicationVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunicationVersion> FaxCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereManufacturedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereManufacturedBy.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereManufacturedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereManufacturedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereSuppliedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereSuppliedBy.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereSuppliedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereSuppliedBy.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereCurrentCustomer
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereCurrentCustomer.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereCurrentCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereCurrentCustomer.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActiveCustomer
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActiveCustomer.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActiveCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActiveCustomer.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActiveSupplier
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActiveSupplier.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActiveSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActiveSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondence> LetterCorrespondencesWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondencesWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondencesWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondencesWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondence> LetterCorrespondencesWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondencesWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondencesWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondencesWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondenceVersion> LetterCorrespondenceVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondenceVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondenceVersion> LetterCorrespondenceVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondenceVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunicationVersion> PhoneCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunicationVersion> PhoneCommunicationVersionsWhereCaller
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationVersionsWhereCaller.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationVersionsWhereCaller
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationVersionsWhereCaller.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickListVersion> PickListVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistPickListVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseInvoiceVersion> PurchaseInvoiceVersionsWhereBilledFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseInvoiceVersionsWhereBilledFromParty.RelationType);
			}
		}

		virtual public bool ExistPurchaseInvoiceVersionsWhereBilledFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseInvoiceVersionsWhereBilledFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWherePreviousTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWherePreviousTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWherePreviousTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWherePreviousTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWhereTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWhereTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWhereTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWhereTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItemVersion> QuoteItemVersionsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemVersionsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistQuoteItemVersionsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemVersionsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereNeededFor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereNeededFor.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereNeededFor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereNeededFor.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereServicedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereServicedBy.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereServicedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereServicedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereAssignedShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereAssignedShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereAssignedShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereAssignedShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePlacingCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePlacingCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePlacingCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePlacingCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationGlAccount> OrganisationGlAccountsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationGlAccountsWhereParty.RelationType);
			}
		}

		virtual public bool ExistOrganisationGlAccountsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationGlAccountsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyFixedAssetAssignment> PartyFixedAssetAssignmentsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyFixedAssetAssignmentsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyPackageRevenue> PartyPackageRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyPackageRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyPackageRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyPackageRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductCategoryRevenue> PartyProductCategoryRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyProductCategoryRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductRevenue> PartyProductRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyProductRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyRevenue> PartyRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunication> PhoneCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunication> PhoneCommunicationsWhereCaller
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationsWhereCaller.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationsWhereCaller
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationsWhereCaller.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickList> PickListsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistPickListsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseInvoice> PurchaseInvoicesWhereBilledFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseInvoicesWhereBilledFromParty.RelationType);
			}
		}

		virtual public bool ExistPurchaseInvoicesWhereBilledFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseInvoicesWhereBilledFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrder> PurchaseOrdersWherePreviousTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrdersWherePreviousTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrdersWherePreviousTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrdersWherePreviousTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrder> PurchaseOrdersWhereTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrdersWhereTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrdersWhereTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrdersWhereTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistQuoteItemsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereNeededFor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereNeededFor.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereNeededFor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereNeededFor.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereServicedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereServicedBy.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereServicedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereServicedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<RespondingParty> RespondingPartiesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RespondingPartiesWhereParty.RelationType);
			}
		}

		virtual public bool ExistRespondingPartiesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RespondingPartiesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePlacingCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePlacingCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePlacingCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePlacingCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereAssignedShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereAssignedShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereAssignedShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereAssignedShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyProductCategoryRevenue> SalesRepPartyProductCategoryRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyProductCategoryRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyRevenue> SalesRepPartyRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepRelationship> SalesRepRelationshipsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepRelationshipsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesRepRelationshipsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepRelationshipsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SubContractorRelationship> SubContractorRelationshipsWhereContractor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SubContractorRelationshipsWhereContractor.RelationType);
			}
		}

		virtual public bool ExistSubContractorRelationshipsWhereContractor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SubContractorRelationshipsWhereContractor.RelationType);
			}
		}


		virtual public global::Allors.Extent<SubContractorRelationship> SubContractorRelationshipsWhereSubContractor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SubContractorRelationshipsWhereSubContractor.RelationType);
			}
		}

		virtual public bool ExistSubContractorRelationshipsWhereSubContractor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SubContractorRelationshipsWhereSubContractor.RelationType);
			}
		}


		virtual public global::Allors.Extent<SupplierOffering> SupplierOfferingsWhereSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SupplierOfferingsWhereSupplier.RelationType);
			}
		}

		virtual public bool ExistSupplierOfferingsWhereSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SupplierOfferingsWhereSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunicationVersion> WebSiteCommunicationVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunicationVersion> WebSiteCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunication> WebSiteCommunicationsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunication> WebSiteCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortPartyAssignment> WorkEffortPartyAssignmentsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereParty.RelationType);
			}
		}

		virtual public bool ExistWorkEffortPartyAssignmentsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereInvolvedParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereInvolvedParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereInvolvedParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereInvolvedParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereInvolvedParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereInvolvedParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereInvolvedParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereInvolvedParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ExternalAccountingTransaction> ExternalAccountingTransactionsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ExternalAccountingTransactionsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistExternalAccountingTransactionsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ExternalAccountingTransactionsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ExternalAccountingTransaction> ExternalAccountingTransactionsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ExternalAccountingTransactionsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistExternalAccountingTransactionsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ExternalAccountingTransactionsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyRelationship> PartyRelationshipsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyRelationshipsWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyRelationshipsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyRelationshipsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteVersion> QuoteVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistQuoteVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestVersion> RequestVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequestVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<Payment> PaymentsWhereSendingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentsWhereSendingParty.RelationType);
			}
		}

		virtual public bool ExistPaymentsWhereSendingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentsWhereSendingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Payment> PaymentsWhereReceivingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentsWhereReceivingParty.RelationType);
			}
		}

		virtual public bool ExistPaymentsWhereReceivingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentsWhereReceivingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Quote> QuotesWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuotesWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistQuotesWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuotesWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<Request> RequestsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequestsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereShipFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereShipFromParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereShipFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereShipFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereShipFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereShipFromParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereShipFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereShipFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PersonOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PersonOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PersonOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PersonOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PersonOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PersonOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PersonOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PersonOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PersonOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PersonOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PersonDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PersonDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , UserBuilder, PartyBuilder, DeletableBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Person instance)
		{

			instance.FirstName = this.FirstName;
		
		

			instance.LastName = this.LastName;
		
		

			instance.MiddleName = this.MiddleName;
		
						

			instance.GivenName = this.GivenName;
		
		

			instance.MothersMaidenName = this.MothersMaidenName;
		
		
			

			if(this.BirthDate.HasValue)
			{
				instance.BirthDate = this.BirthDate.Value;
			}			
		
		
			

			if(this.Height.HasValue)
			{
				instance.Height = this.Height.Value;
			}			
		
		
			

			if(this.Weight.HasValue)
			{
				instance.Weight = this.Weight.Value;
			}			
		
		
			

			if(this.TotalYearsWorkExperience.HasValue)
			{
				instance.TotalYearsWorkExperience = this.TotalYearsWorkExperience.Value;
			}			
		
		

			instance.SocialSecurityNumber = this.SocialSecurityNumber;
		
		
			

			if(this.DeceasedDate.HasValue)
			{
				instance.DeceasedDate = this.DeceasedDate.Value;
			}			
		
		

			instance.Function = this.Function;
		
		

			instance.UserName = this.UserName;
		
		

			instance.NormalizedUserName = this.NormalizedUserName;
		
		

			instance.UserPasswordHash = this.UserPasswordHash;
		
		

			instance.UserEmail = this.UserEmail;
		
		
			

			if(this.UserEmailConfirmed.HasValue)
			{
				instance.UserEmailConfirmed = this.UserEmailConfirmed.Value;
			}			
		
		

			instance.PartyName = this.PartyName;
		
						
			

			if(this.ExcludeFromDunning.HasValue)
			{
				instance.ExcludeFromDunning = this.ExcludeFromDunning.Value;
			}			
		
				
			

			if(this.SimpleMovingAverage.HasValue)
			{
				instance.SimpleMovingAverage = this.SimpleMovingAverage.Value;
			}			
		
		
			

			if(this.AmountOverDue.HasValue)
			{
				instance.AmountOverDue = this.AmountOverDue.Value;
			}			
		
				
			

			if(this.LastReminderDate.HasValue)
			{
				instance.LastReminderDate = this.LastReminderDate.Value;
			}			
		
		
			

			if(this.CreditLimit.HasValue)
			{
				instance.CreditLimit = this.CreditLimit.Value;
			}			
		
		
			

			if(this.SubAccountNumber.HasValue)
			{
				instance.SubAccountNumber = this.SubAccountNumber.Value;
			}			
		
		
			

			if(this.BlockedForDunning.HasValue)
			{
				instance.BlockedForDunning = this.BlockedForDunning.Value;
			}			
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		
			if(this.PersonRoles!=null)
			{
				instance.PersonRoles = this.PersonRoles.ToArray();
			}
		

			instance.Salutation = this.Salutation;

				

			instance.Citizenship = this.Citizenship;

		
			if(this.Titles!=null)
			{
				instance.Titles = this.Titles.ToArray();
			}
		
			if(this.PersonTrainings!=null)
			{
				instance.PersonTrainings = this.PersonTrainings.ToArray();
			}
		

			instance.Gender = this.Gender;

		
			if(this.Hobbies!=null)
			{
				instance.Hobbies = this.Hobbies.ToArray();
			}
		
			if(this.Passports!=null)
			{
				instance.Passports = this.Passports.ToArray();
			}
		

			instance.MaritalStatus = this.MaritalStatus;

		

			instance.Picture = this.Picture;

				

			instance.NotificationList = this.NotificationList;

						
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		

			instance.Locale = this.Locale;

						
			if(this.Qualifications!=null)
			{
				instance.Qualifications = this.Qualifications.ToArray();
			}
																
			if(this.PartyContactMechanisms!=null)
			{
				instance.PartyContactMechanisms = this.PartyContactMechanisms.ToArray();
			}
						
			if(this.BillingAccounts!=null)
			{
				instance.BillingAccounts = this.BillingAccounts.ToArray();
			}
				
			if(this.PartySkills!=null)
			{
				instance.PartySkills = this.PartySkills.ToArray();
			}
				
			if(this.BankAccounts!=null)
			{
				instance.BankAccounts = this.BankAccounts.ToArray();
			}
								

			instance.DefaultShipmentMethod = this.DefaultShipmentMethod;

		
			if(this.Resumes!=null)
			{
				instance.Resumes = this.Resumes.ToArray();
			}
														
			if(this.Contents!=null)
			{
				instance.Contents = this.Contents.ToArray();
			}
		
			if(this.CreditCards!=null)
			{
				instance.CreditCards = this.CreditCards.ToArray();
			}
								

			instance.DefaultPaymentMethod = this.DefaultPaymentMethod;

						

			instance.PreferredCurrency = this.PreferredCurrency;

		

			instance.VatRegime = this.VatRegime;

		

			instance.DunningType = this.DunningType;

		
			if(this.Agreements!=null)
			{
				instance.Agreements = this.Agreements.ToArray();
			}
		
			if(this.CommunicationEvents!=null)
			{
				instance.CommunicationEvents = this.CommunicationEvents.ToArray();
			}
		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
		}


				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public global::System.String LastName {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public PersonVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PersonBuilder WithCurrentVersion(PersonVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PersonVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithAllVersion(PersonVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PersonVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PersonRole> PersonRoles {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPersonRole(PersonRole value)
		        {
					if(this.PersonRoles == null)
					{
						this.PersonRoles = new global::System.Collections.Generic.List<PersonRole>(); 
					}
		            this.PersonRoles.Add(value);
		            return this;
		        }		

				
				public Salutation Salutation {get; set;}

				/// <exclude/>
				public PersonBuilder WithSalutation(Salutation value)
		        {
		            if(this.Salutation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Salutation = value;
		            return this;
		        }		

				
				public Citizenship Citizenship {get; set;}

				/// <exclude/>
				public PersonBuilder WithCitizenship(Citizenship value)
		        {
		            if(this.Citizenship!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Citizenship = value;
		            return this;
		        }		

				
				public global::System.String GivenName {get; set;}

				/// <exclude/>
				public PersonBuilder WithGivenName(global::System.String value)
		        {
				    if(this.GivenName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.GivenName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PersonalTitle> Titles {get; set;}	

				/// <exclude/>
				public PersonBuilder WithTitle(PersonalTitle value)
		        {
					if(this.Titles == null)
					{
						this.Titles = new global::System.Collections.Generic.List<PersonalTitle>(); 
					}
		            this.Titles.Add(value);
		            return this;
		        }		

				
				public global::System.String MothersMaidenName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMothersMaidenName(global::System.String value)
		        {
				    if(this.MothersMaidenName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MothersMaidenName = value;
		            return this;
		        }	

				public global::System.DateTime? BirthDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithBirthDate(global::System.DateTime? value)
		        {
				    if(this.BirthDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BirthDate = value;
		            return this;
		        }	

				public global::System.Decimal? Height {get; set;}

				/// <exclude/>
				public PersonBuilder WithHeight(global::System.Decimal? value)
		        {
				    if(this.Height!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Height = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PersonTraining> PersonTrainings {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPersonTraining(PersonTraining value)
		        {
					if(this.PersonTrainings == null)
					{
						this.PersonTrainings = new global::System.Collections.Generic.List<PersonTraining>(); 
					}
		            this.PersonTrainings.Add(value);
		            return this;
		        }		

				
				public GenderType Gender {get; set;}

				/// <exclude/>
				public PersonBuilder WithGender(GenderType value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.Int32? Weight {get; set;}

				/// <exclude/>
				public PersonBuilder WithWeight(global::System.Int32? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Hobby> Hobbies {get; set;}	

				/// <exclude/>
				public PersonBuilder WithHobby(Hobby value)
		        {
					if(this.Hobbies == null)
					{
						this.Hobbies = new global::System.Collections.Generic.List<Hobby>(); 
					}
		            this.Hobbies.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? TotalYearsWorkExperience {get; set;}

				/// <exclude/>
				public PersonBuilder WithTotalYearsWorkExperience(global::System.Int32? value)
		        {
				    if(this.TotalYearsWorkExperience!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalYearsWorkExperience = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Passport> Passports {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPassport(Passport value)
		        {
					if(this.Passports == null)
					{
						this.Passports = new global::System.Collections.Generic.List<Passport>(); 
					}
		            this.Passports.Add(value);
		            return this;
		        }		

				
				public MaritalStatus MaritalStatus {get; set;}

				/// <exclude/>
				public PersonBuilder WithMaritalStatus(MaritalStatus value)
		        {
		            if(this.MaritalStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MaritalStatus = value;
		            return this;
		        }		

				
				public Media Picture {get; set;}

				/// <exclude/>
				public PersonBuilder WithPicture(Media value)
		        {
		            if(this.Picture!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Picture = value;
		            return this;
		        }		

				
				public global::System.String SocialSecurityNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithSocialSecurityNumber(global::System.String value)
		        {
				    if(this.SocialSecurityNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SocialSecurityNumber = value;
		            return this;
		        }	

				public global::System.DateTime? DeceasedDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithDeceasedDate(global::System.DateTime? value)
		        {
				    if(this.DeceasedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeceasedDate = value;
		            return this;
		        }	

				public global::System.String Function {get; set;}

				/// <exclude/>
				public PersonBuilder WithFunction(global::System.String value)
		        {
				    if(this.Function!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Function = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String NormalizedUserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithNormalizedUserName(global::System.String value)
		        {
				    if(this.NormalizedUserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NormalizedUserName = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public NotificationList NotificationList {get; set;}

				/// <exclude/>
				public PersonBuilder WithNotificationList(NotificationList value)
		        {
		            if(this.NotificationList!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NotificationList = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PersonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public PersonBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.String PartyName {get; set;}

				/// <exclude/>
				public PersonBuilder WithPartyName(global::System.String value)
		        {
				    if(this.PartyName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PartyName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Qualification> Qualifications {get; set;}	

				/// <exclude/>
				public PersonBuilder WithQualification(Qualification value)
		        {
					if(this.Qualifications == null)
					{
						this.Qualifications = new global::System.Collections.Generic.List<Qualification>(); 
					}
		            this.Qualifications.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartyContactMechanism> PartyContactMechanisms {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPartyContactMechanism(PartyContactMechanism value)
		        {
					if(this.PartyContactMechanisms == null)
					{
						this.PartyContactMechanisms = new global::System.Collections.Generic.List<PartyContactMechanism>(); 
					}
		            this.PartyContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BillingAccount> BillingAccounts {get; set;}	

				/// <exclude/>
				public PersonBuilder WithBillingAccount(BillingAccount value)
		        {
					if(this.BillingAccounts == null)
					{
						this.BillingAccounts = new global::System.Collections.Generic.List<BillingAccount>(); 
					}
		            this.BillingAccounts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartySkill> PartySkills {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPartySkill(PartySkill value)
		        {
					if(this.PartySkills == null)
					{
						this.PartySkills = new global::System.Collections.Generic.List<PartySkill>(); 
					}
		            this.PartySkills.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? ExcludeFromDunning {get; set;}

				/// <exclude/>
				public PersonBuilder WithExcludeFromDunning(global::System.Boolean? value)
		        {
				    if(this.ExcludeFromDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExcludeFromDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BankAccount> BankAccounts {get; set;}	

				/// <exclude/>
				public PersonBuilder WithBankAccount(BankAccount value)
		        {
					if(this.BankAccounts == null)
					{
						this.BankAccounts = new global::System.Collections.Generic.List<BankAccount>(); 
					}
		            this.BankAccounts.Add(value);
		            return this;
		        }		

				
				public ShipmentMethod DefaultShipmentMethod {get; set;}

				/// <exclude/>
				public PersonBuilder WithDefaultShipmentMethod(ShipmentMethod value)
		        {
		            if(this.DefaultShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Resume> Resumes {get; set;}	

				/// <exclude/>
				public PersonBuilder WithResume(Resume value)
		        {
					if(this.Resumes == null)
					{
						this.Resumes = new global::System.Collections.Generic.List<Resume>(); 
					}
		            this.Resumes.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Media> Contents {get; set;}	

				/// <exclude/>
				public PersonBuilder WithContent(Media value)
		        {
					if(this.Contents == null)
					{
						this.Contents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Contents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CreditCard> CreditCards {get; set;}	

				/// <exclude/>
				public PersonBuilder WithCreditCard(CreditCard value)
		        {
					if(this.CreditCards == null)
					{
						this.CreditCards = new global::System.Collections.Generic.List<CreditCard>(); 
					}
		            this.CreditCards.Add(value);
		            return this;
		        }		

				
				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public PersonBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public Currency PreferredCurrency {get; set;}

				/// <exclude/>
				public PersonBuilder WithPreferredCurrency(Currency value)
		        {
		            if(this.PreferredCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreferredCurrency = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public PersonBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? SimpleMovingAverage {get; set;}

				/// <exclude/>
				public PersonBuilder WithSimpleMovingAverage(global::System.Decimal? value)
		        {
				    if(this.SimpleMovingAverage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SimpleMovingAverage = value;
		            return this;
		        }	

				public global::System.Decimal? AmountOverDue {get; set;}

				/// <exclude/>
				public PersonBuilder WithAmountOverDue(global::System.Decimal? value)
		        {
				    if(this.AmountOverDue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountOverDue = value;
		            return this;
		        }	

				public DunningType DunningType {get; set;}

				/// <exclude/>
				public PersonBuilder WithDunningType(DunningType value)
		        {
		            if(this.DunningType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DunningType = value;
		            return this;
		        }		

				
				public global::System.DateTime? LastReminderDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastReminderDate(global::System.DateTime? value)
		        {
				    if(this.LastReminderDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastReminderDate = value;
		            return this;
		        }	

				public global::System.Decimal? CreditLimit {get; set;}

				/// <exclude/>
				public PersonBuilder WithCreditLimit(global::System.Decimal? value)
		        {
				    if(this.CreditLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreditLimit = value;
		            return this;
		        }	

				public global::System.Int32? SubAccountNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithSubAccountNumber(global::System.Int32? value)
		        {
				    if(this.SubAccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SubAccountNumber = value;
		            return this;
		        }	

				public global::System.DateTime? BlockedForDunning {get; set;}

				/// <exclude/>
				public PersonBuilder WithBlockedForDunning(global::System.DateTime? value)
		        {
				    if(this.BlockedForDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Agreement> Agreements {get; set;}	

				/// <exclude/>
				public PersonBuilder WithAgreement(Agreement value)
		        {
					if(this.Agreements == null)
					{
						this.Agreements = new global::System.Collections.Generic.List<Agreement>(); 
					}
		            this.Agreements.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CommunicationEvent> CommunicationEvents {get; set;}	

				/// <exclude/>
				public PersonBuilder WithCommunicationEvent(CommunicationEvent value)
		        {
					if(this.CommunicationEvents == null)
					{
						this.CommunicationEvents = new global::System.Collections.Generic.List<CommunicationEvent>(); 
					}
		            this.CommunicationEvents.Add(value);
		            return this;
		        }		

				
				public User CreatedBy {get; set;}

				/// <exclude/>
				public PersonBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PersonBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PersonBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	


	}

	public partial class People : global::Allors.ObjectsBase<Person>
	{
		public People(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPerson Meta
		{
			get
			{
				return Allors.Meta.MetaPerson.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}