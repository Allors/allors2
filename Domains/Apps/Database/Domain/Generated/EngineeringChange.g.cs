// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class EngineeringChange : Allors.IObject , Transitional
	{
		private readonly IStrategy strategy;

		public EngineeringChange(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaEngineeringChange Meta
		{
			get
			{
				return Allors.Meta.MetaEngineeringChange.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static EngineeringChange Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (EngineeringChange) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Person Requestor
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Requestor.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Requestor.RelationType, value);
			}
		}

		virtual public bool ExistRequestor
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Requestor.RelationType);
			}
		}

		virtual public void RemoveRequestor()
		{
			Strategy.RemoveCompositeRole(Meta.Requestor.RelationType);
		}


		virtual public Person Authorizer
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Authorizer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer.RelationType, value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer.RelationType);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public Person Designer
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Designer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Designer.RelationType, value);
			}
		}

		virtual public bool ExistDesigner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Designer.RelationType);
			}
		}

		virtual public void RemoveDesigner()
		{
			Strategy.RemoveCompositeRole(Meta.Designer.RelationType);
		}


		virtual public global::Allors.Extent<PartSpecification> PartSpecifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartSpecifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartSpecifications.RelationType, value);
			}
		}

		virtual public void AddPartSpecification (PartSpecification value)
		{
			Strategy.AddCompositeRole(Meta.PartSpecifications.RelationType, value);
		}

		virtual public void RemovePartSpecification (PartSpecification value)
		{
			Strategy.RemoveCompositeRole(Meta.PartSpecifications.RelationType, value);
		}

		virtual public bool ExistPartSpecifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartSpecifications.RelationType);
			}
		}

		virtual public void RemovePartSpecifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PartSpecifications.RelationType);
		}


		virtual public global::Allors.Extent<PartBillOfMaterial> PartBillOfMaterials
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartBillOfMaterials.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartBillOfMaterials.RelationType, value);
			}
		}

		virtual public void AddPartBillOfMaterial (PartBillOfMaterial value)
		{
			Strategy.AddCompositeRole(Meta.PartBillOfMaterials.RelationType, value);
		}

		virtual public void RemovePartBillOfMaterial (PartBillOfMaterial value)
		{
			Strategy.RemoveCompositeRole(Meta.PartBillOfMaterials.RelationType, value);
		}

		virtual public bool ExistPartBillOfMaterials
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartBillOfMaterials.RelationType);
			}
		}

		virtual public void RemovePartBillOfMaterials()
		{
			Strategy.RemoveCompositeRoles(Meta.PartBillOfMaterials.RelationType);
		}


		virtual public EngineeringChangeObjectState CurrentObjectState
		{ 
			get
			{
				return (EngineeringChangeObjectState) Strategy.GetCompositeRole(Meta.CurrentObjectState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentObjectState.RelationType, value);
			}
		}

		virtual public bool ExistCurrentObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentObjectState.RelationType);
			}
		}

		virtual public void RemoveCurrentObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentObjectState.RelationType);
		}


		virtual public global::Allors.Extent<EngineeringChangeStatus> EngineeringChangeStatuses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EngineeringChangeStatuses.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EngineeringChangeStatuses.RelationType, value);
			}
		}

		virtual public void AddEngineeringChangeStatus (EngineeringChangeStatus value)
		{
			Strategy.AddCompositeRole(Meta.EngineeringChangeStatuses.RelationType, value);
		}

		virtual public void RemoveEngineeringChangeStatus (EngineeringChangeStatus value)
		{
			Strategy.RemoveCompositeRole(Meta.EngineeringChangeStatuses.RelationType, value);
		}

		virtual public bool ExistEngineeringChangeStatuses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EngineeringChangeStatuses.RelationType);
			}
		}

		virtual public void RemoveEngineeringChangeStatuses()
		{
			Strategy.RemoveCompositeRoles(Meta.EngineeringChangeStatuses.RelationType);
		}


		virtual public Person Tester
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Tester.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Tester.RelationType, value);
			}
		}

		virtual public bool ExistTester
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Tester.RelationType);
			}
		}

		virtual public void RemoveTester()
		{
			Strategy.RemoveCompositeRole(Meta.Tester.RelationType);
		}


		virtual public EngineeringChangeStatus CurrentEngineeringChangeStatus
		{ 
			get
			{
				return (EngineeringChangeStatus) Strategy.GetCompositeRole(Meta.CurrentEngineeringChangeStatus.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentEngineeringChangeStatus.RelationType, value);
			}
		}

		virtual public bool ExistCurrentEngineeringChangeStatus
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentEngineeringChangeStatus.RelationType);
			}
		}

		virtual public void RemoveCurrentEngineeringChangeStatus()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentEngineeringChangeStatus.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new EngineeringChangeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new EngineeringChangeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new EngineeringChangeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new EngineeringChangeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new EngineeringChangeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new EngineeringChangeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new EngineeringChangeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new EngineeringChangeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new EngineeringChangeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new EngineeringChangeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class EngineeringChangeBuilder : Allors.ObjectBuilder<EngineeringChange> , TransitionalBuilder, global::System.IDisposable
	{		
		public EngineeringChangeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(EngineeringChange instance)
		{

			instance.Description = this.Description;
		
		

			instance.Requestor = this.Requestor;

		

			instance.Authorizer = this.Authorizer;

		

			instance.Designer = this.Designer;

		
			if(this.PartSpecifications!=null)
			{
				instance.PartSpecifications = this.PartSpecifications.ToArray();
			}
		
			if(this.PartBillOfMaterials!=null)
			{
				instance.PartBillOfMaterials = this.PartBillOfMaterials.ToArray();
			}
				
			if(this.EngineeringChangeStatuses!=null)
			{
				instance.EngineeringChangeStatuses = this.EngineeringChangeStatuses.ToArray();
			}
		

			instance.Tester = this.Tester;

										
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Person Requestor {get; set;}

				/// <exclude/>
				public EngineeringChangeBuilder WithRequestor(Person value)
		        {
		            if(this.Requestor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Requestor = value;
		            return this;
		        }		

				
				public Person Authorizer {get; set;}

				/// <exclude/>
				public EngineeringChangeBuilder WithAuthorizer(Person value)
		        {
		            if(this.Authorizer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Authorizer = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public EngineeringChangeBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Person Designer {get; set;}

				/// <exclude/>
				public EngineeringChangeBuilder WithDesigner(Person value)
		        {
		            if(this.Designer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Designer = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartSpecification> PartSpecifications {get; set;}	

				/// <exclude/>
				public EngineeringChangeBuilder WithPartSpecification(PartSpecification value)
		        {
					if(this.PartSpecifications == null)
					{
						this.PartSpecifications = new global::System.Collections.Generic.List<PartSpecification>(); 
					}
		            this.PartSpecifications.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartBillOfMaterial> PartBillOfMaterials {get; set;}	

				/// <exclude/>
				public EngineeringChangeBuilder WithPartBillOfMaterial(PartBillOfMaterial value)
		        {
					if(this.PartBillOfMaterials == null)
					{
						this.PartBillOfMaterials = new global::System.Collections.Generic.List<PartBillOfMaterial>(); 
					}
		            this.PartBillOfMaterials.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EngineeringChangeStatus> EngineeringChangeStatuses {get; set;}	

				/// <exclude/>
				public EngineeringChangeBuilder WithEngineeringChangeStatus(EngineeringChangeStatus value)
		        {
					if(this.EngineeringChangeStatuses == null)
					{
						this.EngineeringChangeStatuses = new global::System.Collections.Generic.List<EngineeringChangeStatus>(); 
					}
		            this.EngineeringChangeStatuses.Add(value);
		            return this;
		        }		

				
				public Person Tester {get; set;}

				/// <exclude/>
				public EngineeringChangeBuilder WithTester(Person value)
		        {
		            if(this.Tester!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Tester = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngineeringChangeBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngineeringChangeBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class EngineeringChanges : global::Allors.ObjectsBase<EngineeringChange>
	{
		public EngineeringChanges(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaEngineeringChange Meta
		{
			get
			{
				return Allors.Meta.MetaEngineeringChange.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}