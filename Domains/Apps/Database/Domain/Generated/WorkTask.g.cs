// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class WorkTask : Allors.IObject , WorkEffort, Versioned
	{
		private readonly IStrategy strategy;

		public WorkTask(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaWorkTask Meta
		{
			get
			{
				return Allors.Meta.MetaWorkTask.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static WorkTask Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (WorkTask) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Boolean? SendNotification 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendNotification.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendNotification.RelationType, value);
			}
		}

		virtual public bool ExistSendNotification{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendNotification.RelationType);
			}
		}

		virtual public void RemoveSendNotification()
		{
			Strategy.RemoveUnitRole(Meta.SendNotification.RelationType);
		}


		virtual public global::System.Boolean? SendReminder 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendReminder.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendReminder.RelationType, value);
			}
		}

		virtual public bool ExistSendReminder{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendReminder.RelationType);
			}
		}

		virtual public void RemoveSendReminder()
		{
			Strategy.RemoveUnitRole(Meta.SendReminder.RelationType);
		}


		virtual public global::System.DateTime? RemindAt 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RemindAt.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RemindAt.RelationType, value);
			}
		}

		virtual public bool ExistRemindAt{
			get
			{
				return Strategy.ExistUnitRole(Meta.RemindAt.RelationType);
			}
		}

		virtual public void RemoveRemindAt()
		{
			Strategy.RemoveUnitRole(Meta.RemindAt.RelationType);
		}


		virtual public WorkTaskVersion CurrentVersion
		{ 
			get
			{
				return (WorkTaskVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<WorkTaskVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (WorkTaskVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (WorkTaskVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public WorkEffortState PreviousWorkEffortState
		{ 
			get
			{
				return (WorkEffortState) Strategy.GetCompositeRole(Meta.PreviousWorkEffortState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousWorkEffortState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousWorkEffortState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousWorkEffortState.RelationType);
			}
		}

		virtual public void RemovePreviousWorkEffortState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousWorkEffortState.RelationType);
		}


		virtual public WorkEffortState LastWorkEffortState
		{ 
			get
			{
				return (WorkEffortState) Strategy.GetCompositeRole(Meta.LastWorkEffortState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastWorkEffortState.RelationType, value);
			}
		}

		virtual public bool ExistLastWorkEffortState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastWorkEffortState.RelationType);
			}
		}

		virtual public void RemoveLastWorkEffortState()
		{
			Strategy.RemoveCompositeRole(Meta.LastWorkEffortState.RelationType);
		}


		virtual public WorkEffortState WorkEffortState
		{ 
			get
			{
				return (WorkEffortState) Strategy.GetCompositeRole(Meta.WorkEffortState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffortState.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffortState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffortState.RelationType);
			}
		}

		virtual public void RemoveWorkEffortState()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortState.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner.RelationType, value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner.RelationType);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public Priority Priority
		{ 
			get
			{
				return (Priority) Strategy.GetCompositeRole(Meta.Priority.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Priority.RelationType, value);
			}
		}

		virtual public bool ExistPriority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Priority.RelationType);
			}
		}

		virtual public void RemovePriority()
		{
			Strategy.RemoveCompositeRole(Meta.Priority.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffortPurpose> WorkEffortPurposes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.WorkEffortPurposes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.WorkEffortPurposes.RelationType, value);
			}
		}

		virtual public void AddWorkEffortPurpose (WorkEffortPurpose value)
		{
			Strategy.AddCompositeRole(Meta.WorkEffortPurposes.RelationType, value);
		}

		virtual public void RemoveWorkEffortPurpose (WorkEffortPurpose value)
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortPurposes.RelationType, value);
		}

		virtual public bool ExistWorkEffortPurposes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.WorkEffortPurposes.RelationType);
			}
		}

		virtual public void RemoveWorkEffortPurposes()
		{
			Strategy.RemoveCompositeRoles(Meta.WorkEffortPurposes.RelationType);
		}


		virtual public global::System.DateTime? ActualCompletion 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualCompletion.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualCompletion.RelationType, value);
			}
		}

		virtual public bool ExistActualCompletion{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualCompletion.RelationType);
			}
		}

		virtual public void RemoveActualCompletion()
		{
			Strategy.RemoveUnitRole(Meta.ActualCompletion.RelationType);
		}


		virtual public global::System.DateTime? ScheduledStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledStart.RelationType, value);
			}
		}

		virtual public bool ExistScheduledStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledStart.RelationType);
			}
		}

		virtual public void RemoveScheduledStart()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledStart.RelationType);
		}


		virtual public global::System.DateTime? ScheduledCompletion 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledCompletion.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledCompletion.RelationType, value);
			}
		}

		virtual public bool ExistScheduledCompletion{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledCompletion.RelationType);
			}
		}

		virtual public void RemoveScheduledCompletion()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledCompletion.RelationType);
		}


		virtual public global::System.Decimal? ActualHours 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ActualHours.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualHours.RelationType, value);
			}
		}

		virtual public bool ExistActualHours{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualHours.RelationType);
			}
		}

		virtual public void RemoveActualHours()
		{
			Strategy.RemoveUnitRole(Meta.ActualHours.RelationType);
		}


		virtual public global::System.Decimal? EstimatedHours 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedHours.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedHours.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedHours{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedHours.RelationType);
			}
		}

		virtual public void RemoveEstimatedHours()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedHours.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Precendencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Precendencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Precendencies.RelationType, value);
			}
		}

		virtual public void AddPrecendency (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Precendencies.RelationType, value);
		}

		virtual public void RemovePrecendency (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Precendencies.RelationType, value);
		}

		virtual public bool ExistPrecendencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Precendencies.RelationType);
			}
		}

		virtual public void RemovePrecendencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Precendencies.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public global::Allors.Extent<Deliverable> DeliverablesProduced
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeliverablesProduced.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeliverablesProduced.RelationType, value);
			}
		}

		virtual public void AddDeliverablesProduced (Deliverable value)
		{
			Strategy.AddCompositeRole(Meta.DeliverablesProduced.RelationType, value);
		}

		virtual public void RemoveDeliverablesProduced (Deliverable value)
		{
			Strategy.RemoveCompositeRole(Meta.DeliverablesProduced.RelationType, value);
		}

		virtual public bool ExistDeliverablesProduced
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeliverablesProduced.RelationType);
			}
		}

		virtual public void RemoveDeliverablesProduced()
		{
			Strategy.RemoveCompositeRoles(Meta.DeliverablesProduced.RelationType);
		}


		virtual public global::System.DateTime? ActualStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualStart.RelationType, value);
			}
		}

		virtual public bool ExistActualStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualStart.RelationType);
			}
		}

		virtual public void RemoveActualStart()
		{
			Strategy.RemoveUnitRole(Meta.ActualStart.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffortInventoryAssignment> InventoryItemsNeeded
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItemsNeeded.RelationType, value);
			}
		}

		virtual public void AddInventoryItemsNeeded (WorkEffortInventoryAssignment value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItemsNeeded.RelationType, value);
		}

		virtual public void RemoveInventoryItemsNeeded (WorkEffortInventoryAssignment value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItemsNeeded.RelationType, value);
		}

		virtual public bool ExistInventoryItemsNeeded
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
			}
		}

		virtual public void RemoveInventoryItemsNeeded()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Children.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Children.RelationType, value);
			}
		}

		virtual public void AddChild (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public void RemoveChild (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Children.RelationType);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(Meta.Children.RelationType);
		}


		virtual public OrderItem OrderItemFulfillment
		{ 
			get
			{
				return (OrderItem) Strategy.GetCompositeRole(Meta.OrderItemFulfillment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderItemFulfillment.RelationType, value);
			}
		}

		virtual public bool ExistOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderItemFulfillment.RelationType);
			}
		}

		virtual public void RemoveOrderItemFulfillment()
		{
			Strategy.RemoveCompositeRole(Meta.OrderItemFulfillment.RelationType);
		}


		virtual public WorkEffortType WorkEffortType
		{ 
			get
			{
				return (WorkEffortType) Strategy.GetCompositeRole(Meta.WorkEffortType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffortType.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffortType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffortType.RelationType);
			}
		}

		virtual public void RemoveWorkEffortType()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortType.RelationType);
		}


		virtual public global::Allors.Extent<InventoryItem> InventoryItemsProduced
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItemsProduced.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItemsProduced.RelationType, value);
			}
		}

		virtual public void AddInventoryItemsProduced (InventoryItem value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItemsProduced.RelationType, value);
		}

		virtual public void RemoveInventoryItemsProduced (InventoryItem value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItemsProduced.RelationType, value);
		}

		virtual public bool ExistInventoryItemsProduced
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItemsProduced.RelationType);
			}
		}

		virtual public void RemoveInventoryItemsProduced()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItemsProduced.RelationType);
		}


		virtual public global::Allors.Extent<Requirement> RequirementFulfillments
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.RequirementFulfillments.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.RequirementFulfillments.RelationType, value);
			}
		}

		virtual public void AddRequirementFulfillment (Requirement value)
		{
			Strategy.AddCompositeRole(Meta.RequirementFulfillments.RelationType, value);
		}

		virtual public void RemoveRequirementFulfillment (Requirement value)
		{
			Strategy.RemoveCompositeRole(Meta.RequirementFulfillments.RelationType, value);
		}

		virtual public bool ExistRequirementFulfillments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.RequirementFulfillments.RelationType);
			}
		}

		virtual public void RemoveRequirementFulfillments()
		{
			Strategy.RemoveCompositeRoles(Meta.RequirementFulfillments.RelationType);
		}


		virtual public global::System.String SpecialTerms 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SpecialTerms.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SpecialTerms.RelationType, value);
			}
		}

		virtual public bool ExistSpecialTerms{
			get
			{
				return Strategy.ExistUnitRole(Meta.SpecialTerms.RelationType);
			}
		}

		virtual public void RemoveSpecialTerms()
		{
			Strategy.RemoveUnitRole(Meta.SpecialTerms.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Concurrencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Concurrencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Concurrencies.RelationType, value);
			}
		}

		virtual public void AddConcurrency (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Concurrencies.RelationType, value);
		}

		virtual public void RemoveConcurrency (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Concurrencies.RelationType, value);
		}

		virtual public bool ExistConcurrencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Concurrencies.RelationType);
			}
		}

		virtual public void RemoveConcurrencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Concurrencies.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}



		virtual public global::Allors.Extent<QuoteItemVersion> QuoteItemVersionsWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemVersionsWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistQuoteItemVersionsWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemVersionsWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistQuoteItemsWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortAssignment> WorkEffortAssignmentsWhereAssignment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortAssignmentsWhereAssignment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortAssignmentsWhereAssignment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortAssignmentsWhereAssignment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortBilling> WorkEffortBillingsWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortBillingsWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistWorkEffortBillingsWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortBillingsWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortFixedAssetAssignment> WorkEffortFixedAssetAssignmentsWhereAssignment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereAssignment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortFixedAssetAssignmentsWhereAssignment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereAssignment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortInventoryAssignment> WorkEffortInventoryAssignmentsWhereAssignment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortInventoryAssignmentsWhereAssignment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortInventoryAssignmentsWhereAssignment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortInventoryAssignmentsWhereAssignment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortPartyAssignment> WorkEffortPartyAssignmentsWhereAssignment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereAssignment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortPartyAssignmentsWhereAssignment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereAssignment.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereEngagementWorkFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereEngagementWorkFulfillment.RelationType);
			}
		}

		virtual public bool ExistEngagementItemsWhereEngagementWorkFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereEngagementWorkFulfillment.RelationType);
			}
		}


		virtual public global::Allors.Extent<ServiceEntry> ServiceEntriesWhereWorkEffort
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ServiceEntriesWhereWorkEffort.RelationType);
			}
		}

		virtual public bool ExistServiceEntriesWhereWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ServiceEntriesWhereWorkEffort.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWherePrecendency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWherePrecendency.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWherePrecendency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWherePrecendency.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereChild
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereChild.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereConcurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereConcurrency.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereConcurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereConcurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWherePrecendency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWherePrecendency.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWherePrecendency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWherePrecendency.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereChild
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereChild.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereConcurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereConcurrency.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereConcurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereConcurrency.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public WorkEffortConfirm Confirm()
		{ 
			var method = new WorkTaskConfirm(this);
            method.Execute();
            return method;
		}

		public WorkEffortConfirm Confirm(System.Action<WorkEffortConfirm> action)
		{ 
			var method = new WorkTaskConfirm(this);
            action(method);
            method.Execute();
            return method;
		}

		public WorkEffortFinish Finish()
		{ 
			var method = new WorkTaskFinish(this);
            method.Execute();
            return method;
		}

		public WorkEffortFinish Finish(System.Action<WorkEffortFinish> action)
		{ 
			var method = new WorkTaskFinish(this);
            action(method);
            method.Execute();
            return method;
		}

		public WorkEffortCancel Cancel()
		{ 
			var method = new WorkTaskCancel(this);
            method.Execute();
            return method;
		}

		public WorkEffortCancel Cancel(System.Action<WorkEffortCancel> action)
		{ 
			var method = new WorkTaskCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public WorkEffortReopen Reopen()
		{ 
			var method = new WorkTaskReopen(this);
            method.Execute();
            return method;
		}

		public WorkEffortReopen Reopen(System.Action<WorkEffortReopen> action)
		{ 
			var method = new WorkTaskReopen(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new WorkTaskOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new WorkTaskOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new WorkTaskOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new WorkTaskOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new WorkTaskOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new WorkTaskOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new WorkTaskOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new WorkTaskOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new WorkTaskOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new WorkTaskOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new WorkTaskDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new WorkTaskDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class WorkTaskBuilder : Allors.ObjectBuilder<WorkTask> , WorkEffortBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public WorkTaskBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(WorkTask instance)
		{
			

			if(this.SendNotification.HasValue)
			{
				instance.SendNotification = this.SendNotification.Value;
			}			
		
		
			

			if(this.SendReminder.HasValue)
			{
				instance.SendReminder = this.SendReminder.Value;
			}			
		
		
			

			if(this.RemindAt.HasValue)
			{
				instance.RemindAt = this.RemindAt.Value;
			}			
		
		

			instance.Name = this.Name;
		
		

			instance.Description = this.Description;
		
		
			

			if(this.ActualCompletion.HasValue)
			{
				instance.ActualCompletion = this.ActualCompletion.Value;
			}			
		
		
			

			if(this.ScheduledStart.HasValue)
			{
				instance.ScheduledStart = this.ScheduledStart.Value;
			}			
		
		
			

			if(this.ScheduledCompletion.HasValue)
			{
				instance.ScheduledCompletion = this.ScheduledCompletion.Value;
			}			
		
		
			

			if(this.ActualHours.HasValue)
			{
				instance.ActualHours = this.ActualHours.Value;
			}			
		
		
			

			if(this.EstimatedHours.HasValue)
			{
				instance.EstimatedHours = this.EstimatedHours.Value;
			}			
		
		
			

			if(this.ActualStart.HasValue)
			{
				instance.ActualStart = this.ActualStart.Value;
			}			
		
		

			instance.SpecialTerms = this.SpecialTerms;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
						

			instance.WorkEffortState = this.WorkEffortState;

						

			instance.Owner = this.Owner;

		

			instance.Priority = this.Priority;

		
			if(this.WorkEffortPurposes!=null)
			{
				instance.WorkEffortPurposes = this.WorkEffortPurposes.ToArray();
			}
		
			if(this.Precendencies!=null)
			{
				instance.Precendencies = this.Precendencies.ToArray();
			}
		

			instance.Facility = this.Facility;

		
			if(this.DeliverablesProduced!=null)
			{
				instance.DeliverablesProduced = this.DeliverablesProduced.ToArray();
			}
		
			if(this.InventoryItemsNeeded!=null)
			{
				instance.InventoryItemsNeeded = this.InventoryItemsNeeded.ToArray();
			}
		
			if(this.Children!=null)
			{
				instance.Children = this.Children.ToArray();
			}
		

			instance.OrderItemFulfillment = this.OrderItemFulfillment;

		

			instance.WorkEffortType = this.WorkEffortType;

		
			if(this.InventoryItemsProduced!=null)
			{
				instance.InventoryItemsProduced = this.InventoryItemsProduced.ToArray();
			}
		
			if(this.RequirementFulfillments!=null)
			{
				instance.RequirementFulfillments = this.RequirementFulfillments.ToArray();
			}
		
			if(this.Concurrencies!=null)
			{
				instance.Concurrencies = this.Concurrencies.ToArray();
			}
								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
		}


				public global::System.Boolean? SendNotification {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithSendNotification(global::System.Boolean? value)
		        {
				    if(this.SendNotification!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendNotification = value;
		            return this;
		        }	

				public global::System.Boolean? SendReminder {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithSendReminder(global::System.Boolean? value)
		        {
				    if(this.SendReminder!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendReminder = value;
		            return this;
		        }	

				public global::System.DateTime? RemindAt {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithRemindAt(global::System.DateTime? value)
		        {
				    if(this.RemindAt!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RemindAt = value;
		            return this;
		        }	

				public WorkTaskVersion CurrentVersion {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithCurrentVersion(WorkTaskVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkTaskVersion> AllVersions {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithAllVersion(WorkTaskVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<WorkTaskVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public WorkEffortState WorkEffortState {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithWorkEffortState(WorkEffortState value)
		        {
		            if(this.WorkEffortState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffortState = value;
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Priority Priority {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithPriority(Priority value)
		        {
		            if(this.Priority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Priority = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkEffortPurpose> WorkEffortPurposes {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithWorkEffortPurpose(WorkEffortPurpose value)
		        {
					if(this.WorkEffortPurposes == null)
					{
						this.WorkEffortPurposes = new global::System.Collections.Generic.List<WorkEffortPurpose>(); 
					}
		            this.WorkEffortPurposes.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ActualCompletion {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithActualCompletion(global::System.DateTime? value)
		        {
				    if(this.ActualCompletion!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualCompletion = value;
		            return this;
		        }	

				public global::System.DateTime? ScheduledStart {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithScheduledStart(global::System.DateTime? value)
		        {
				    if(this.ScheduledStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledStart = value;
		            return this;
		        }	

				public global::System.DateTime? ScheduledCompletion {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithScheduledCompletion(global::System.DateTime? value)
		        {
				    if(this.ScheduledCompletion!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledCompletion = value;
		            return this;
		        }	

				public global::System.Decimal? ActualHours {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithActualHours(global::System.Decimal? value)
		        {
				    if(this.ActualHours!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualHours = value;
		            return this;
		        }	

				public global::System.Decimal? EstimatedHours {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithEstimatedHours(global::System.Decimal? value)
		        {
				    if(this.EstimatedHours!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedHours = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffort> Precendencies {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithPrecendency(WorkEffort value)
		        {
					if(this.Precendencies == null)
					{
						this.Precendencies = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Precendencies.Add(value);
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Deliverable> DeliverablesProduced {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithDeliverablesProduced(Deliverable value)
		        {
					if(this.DeliverablesProduced == null)
					{
						this.DeliverablesProduced = new global::System.Collections.Generic.List<Deliverable>(); 
					}
		            this.DeliverablesProduced.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ActualStart {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithActualStart(global::System.DateTime? value)
		        {
				    if(this.ActualStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffortInventoryAssignment> InventoryItemsNeeded {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithInventoryItemsNeeded(WorkEffortInventoryAssignment value)
		        {
					if(this.InventoryItemsNeeded == null)
					{
						this.InventoryItemsNeeded = new global::System.Collections.Generic.List<WorkEffortInventoryAssignment>(); 
					}
		            this.InventoryItemsNeeded.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkEffort> Children {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithChild(WorkEffort value)
		        {
					if(this.Children == null)
					{
						this.Children = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Children.Add(value);
		            return this;
		        }		

				
				public OrderItem OrderItemFulfillment {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithOrderItemFulfillment(OrderItem value)
		        {
		            if(this.OrderItemFulfillment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderItemFulfillment = value;
		            return this;
		        }		

				
				public WorkEffortType WorkEffortType {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithWorkEffortType(WorkEffortType value)
		        {
		            if(this.WorkEffortType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffortType = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InventoryItem> InventoryItemsProduced {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithInventoryItemsProduced(InventoryItem value)
		        {
					if(this.InventoryItemsProduced == null)
					{
						this.InventoryItemsProduced = new global::System.Collections.Generic.List<InventoryItem>(); 
					}
		            this.InventoryItemsProduced.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Requirement> RequirementFulfillments {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithRequirementFulfillment(Requirement value)
		        {
					if(this.RequirementFulfillments == null)
					{
						this.RequirementFulfillments = new global::System.Collections.Generic.List<Requirement>(); 
					}
		            this.RequirementFulfillments.Add(value);
		            return this;
		        }		

				
				public global::System.String SpecialTerms {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithSpecialTerms(global::System.String value)
		        {
				    if(this.SpecialTerms!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SpecialTerms = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffort> Concurrencies {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithConcurrency(WorkEffort value)
		        {
					if(this.Concurrencies == null)
					{
						this.Concurrencies = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Concurrencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public WorkTaskBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public WorkTaskBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	


	}

	public partial class WorkTasks : global::Allors.ObjectsBase<WorkTask>
	{
		public WorkTasks(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaWorkTask Meta
		{
			get
			{
				return Allors.Meta.MetaWorkTask.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}