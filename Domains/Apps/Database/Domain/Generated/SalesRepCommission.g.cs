// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SalesRepCommission : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public SalesRepCommission(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaSalesRepCommission Meta
		{
			get
			{
				return Allors.Meta.MetaSalesRepCommission.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SalesRepCommission Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SalesRepCommission) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal? Commission 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Commission.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Commission.RelationType, value);
			}
		}

		virtual public bool ExistCommission{
			get
			{
				return Strategy.ExistUnitRole(Meta.Commission.RelationType);
			}
		}

		virtual public void RemoveCommission()
		{
			Strategy.RemoveUnitRole(Meta.Commission.RelationType);
		}


		virtual public global::System.String SalesRepName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SalesRepName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SalesRepName.RelationType, value);
			}
		}

		virtual public bool ExistSalesRepName{
			get
			{
				return Strategy.ExistUnitRole(Meta.SalesRepName.RelationType);
			}
		}

		virtual public void RemoveSalesRepName()
		{
			Strategy.RemoveUnitRole(Meta.SalesRepName.RelationType);
		}


		virtual public global::System.Int32? Month 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Month.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Month.RelationType, value);
			}
		}

		virtual public bool ExistMonth{
			get
			{
				return Strategy.ExistUnitRole(Meta.Month.RelationType);
			}
		}

		virtual public void RemoveMonth()
		{
			Strategy.RemoveUnitRole(Meta.Month.RelationType);
		}


		virtual public global::System.Int32 Year 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Year.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Year.RelationType, value);
			}
		}

		virtual public bool ExistYear{
			get
			{
				return Strategy.ExistUnitRole(Meta.Year.RelationType);
			}
		}

		virtual public void RemoveYear()
		{
			Strategy.RemoveUnitRole(Meta.Year.RelationType);
		}


		virtual public Currency Currency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.Currency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Currency.RelationType, value);
			}
		}

		virtual public bool ExistCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Currency.RelationType);
			}
		}

		virtual public void RemoveCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.Currency.RelationType);
		}


		virtual public Person SalesRep
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.SalesRep.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesRep.RelationType, value);
			}
		}

		virtual public bool ExistSalesRep
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesRep.RelationType);
			}
		}

		virtual public void RemoveSalesRep()
		{
			Strategy.RemoveCompositeRole(Meta.SalesRep.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SalesRepCommissionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SalesRepCommissionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SalesRepCommissionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SalesRepCommissionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SalesRepCommissionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SalesRepCommissionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SalesRepCommissionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SalesRepCommissionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SalesRepCommissionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SalesRepCommissionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class SalesRepCommissionBuilder : Allors.ObjectBuilder<SalesRepCommission> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public SalesRepCommissionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SalesRepCommission instance)
		{
			

			if(this.Commission.HasValue)
			{
				instance.Commission = this.Commission.Value;
			}			
		
		

			instance.SalesRepName = this.SalesRepName;
		
		
			

			if(this.Month.HasValue)
			{
				instance.Month = this.Month.Value;
			}			
		
		
			

			if(this.Year.HasValue)
			{
				instance.Year = this.Year.Value;
			}			
		
		

			instance.Currency = this.Currency;

		

			instance.SalesRep = this.SalesRep;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Decimal? Commission {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithCommission(global::System.Decimal? value)
		        {
				    if(this.Commission!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Commission = value;
		            return this;
		        }	

				public global::System.String SalesRepName {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithSalesRepName(global::System.String value)
		        {
				    if(this.SalesRepName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesRepName = value;
		            return this;
		        }	

				public global::System.Int32? Month {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithMonth(global::System.Int32? value)
		        {
				    if(this.Month!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Month = value;
		            return this;
		        }	

				public global::System.Int32? Year {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithYear(global::System.Int32? value)
		        {
				    if(this.Year!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Year = value;
		            return this;
		        }	

				public Currency Currency {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public Person SalesRep {get; set;}

				/// <exclude/>
				public SalesRepCommissionBuilder WithSalesRep(Person value)
		        {
		            if(this.SalesRep!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesRep = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesRepCommissionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesRepCommissionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesRepCommissions : global::Allors.ObjectsBase<SalesRepCommission>
	{
		public SalesRepCommissions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaSalesRepCommission Meta
		{
			get
			{
				return Allors.Meta.MetaSalesRepCommission.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}