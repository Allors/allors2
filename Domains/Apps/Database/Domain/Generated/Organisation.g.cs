// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Organisation : Allors.IObject , Party, Deletable, Versioned
	{
		private readonly IStrategy strategy;

		public Organisation(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaOrganisation Meta
		{
			get
			{
				return Allors.Meta.MetaOrganisation.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Organisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Organisation) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public OrganisationVersion CurrentVersion
		{ 
			get
			{
				return (OrganisationVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (OrganisationVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (OrganisationVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationRole> OrganisationRoles
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrganisationRoles.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrganisationRoles.RelationType, value);
			}
		}

		virtual public void AddOrganisationRole (OrganisationRole value)
		{
			Strategy.AddCompositeRole(Meta.OrganisationRoles.RelationType, value);
		}

		virtual public void RemoveOrganisationRole (OrganisationRole value)
		{
			Strategy.RemoveCompositeRole(Meta.OrganisationRoles.RelationType, value);
		}

		virtual public bool ExistOrganisationRoles
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrganisationRoles.RelationType);
			}
		}

		virtual public void RemoveOrganisationRoles()
		{
			Strategy.RemoveCompositeRoles(Meta.OrganisationRoles.RelationType);
		}


		virtual public SecurityToken ContactsSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.ContactsSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactsSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistContactsSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactsSecurityToken.RelationType);
			}
		}

		virtual public void RemoveContactsSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.ContactsSecurityToken.RelationType);
		}


		virtual public AccessControl ContactsAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.ContactsAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactsAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistContactsAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactsAccessControl.RelationType);
			}
		}

		virtual public void RemoveContactsAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.ContactsAccessControl.RelationType);
		}


		virtual public UserGroup OwnerUserGroup
		{ 
			get
			{
				return (UserGroup) Strategy.GetCompositeRole(Meta.OwnerUserGroup.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerUserGroup.RelationType, value);
			}
		}

		virtual public bool ExistOwnerUserGroup
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerUserGroup.RelationType);
			}
		}

		virtual public void RemoveOwnerUserGroup()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerUserGroup.RelationType);
		}


		virtual public LegalForm LegalForm
		{ 
			get
			{
				return (LegalForm) Strategy.GetCompositeRole(Meta.LegalForm.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LegalForm.RelationType, value);
			}
		}

		virtual public bool ExistLegalForm
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LegalForm.RelationType);
			}
		}

		virtual public void RemoveLegalForm()
		{
			Strategy.RemoveCompositeRole(Meta.LegalForm.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public UserGroup ContactsUserGroup
		{ 
			get
			{
				return (UserGroup) Strategy.GetCompositeRole(Meta.ContactsUserGroup.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactsUserGroup.RelationType, value);
			}
		}

		virtual public bool ExistContactsUserGroup
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactsUserGroup.RelationType);
			}
		}

		virtual public void RemoveContactsUserGroup()
		{
			Strategy.RemoveCompositeRole(Meta.ContactsUserGroup.RelationType);
		}


		virtual public Media LogoImage
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.LogoImage.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LogoImage.RelationType, value);
			}
		}

		virtual public bool ExistLogoImage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LogoImage.RelationType);
			}
		}

		virtual public void RemoveLogoImage()
		{
			Strategy.RemoveCompositeRole(Meta.LogoImage.RelationType);
		}


		virtual public global::System.String TaxNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TaxNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistTaxNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.TaxNumber.RelationType);
			}
		}

		virtual public void RemoveTaxNumber()
		{
			Strategy.RemoveUnitRole(Meta.TaxNumber.RelationType);
		}


		virtual public global::Allors.Extent<IndustryClassification> IndustryClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.IndustryClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.IndustryClassifications.RelationType, value);
			}
		}

		virtual public void AddIndustryClassification (IndustryClassification value)
		{
			Strategy.AddCompositeRole(Meta.IndustryClassifications.RelationType, value);
		}

		virtual public void RemoveIndustryClassification (IndustryClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.IndustryClassifications.RelationType, value);
		}

		virtual public bool ExistIndustryClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.IndustryClassifications.RelationType);
			}
		}

		virtual public void RemoveIndustryClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.IndustryClassifications.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationClassification> OrganisationClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrganisationClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrganisationClassifications.RelationType, value);
			}
		}

		virtual public void AddOrganisationClassification (OrganisationClassification value)
		{
			Strategy.AddCompositeRole(Meta.OrganisationClassifications.RelationType, value);
		}

		virtual public void RemoveOrganisationClassification (OrganisationClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.OrganisationClassifications.RelationType, value);
		}

		virtual public bool ExistOrganisationClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrganisationClassifications.RelationType);
			}
		}

		virtual public void RemoveOrganisationClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.OrganisationClassifications.RelationType);
		}


		virtual public global::System.String PartyName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PartyName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PartyName.RelationType, value);
			}
		}

		virtual public bool ExistPartyName{
			get
			{
				return Strategy.ExistUnitRole(Meta.PartyName.RelationType);
			}
		}

		virtual public void RemovePartyName()
		{
			Strategy.RemoveUnitRole(Meta.PartyName.RelationType);
		}


		virtual public PostalAddress GeneralCorrespondence
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralCorrespondence.RelationType, value);
			}
		}

		virtual public bool ExistGeneralCorrespondence
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
		}

		virtual public void RemoveGeneralCorrespondence()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralCorrespondence.RelationType);
		}


		virtual public global::System.Decimal YTDRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.YTDRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.YTDRevenue.RelationType, value);
			}
		}

		virtual public bool ExistYTDRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.YTDRevenue.RelationType);
			}
		}

		virtual public void RemoveYTDRevenue()
		{
			Strategy.RemoveUnitRole(Meta.YTDRevenue.RelationType);
		}


		virtual public global::System.Decimal LastYearsRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.LastYearsRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastYearsRevenue.RelationType, value);
			}
		}

		virtual public bool ExistLastYearsRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastYearsRevenue.RelationType);
			}
		}

		virtual public void RemoveLastYearsRevenue()
		{
			Strategy.RemoveUnitRole(Meta.LastYearsRevenue.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Qualification> Qualifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Qualifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Qualifications.RelationType, value);
			}
		}

		virtual public void AddQualification (Qualification value)
		{
			Strategy.AddCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public void RemoveQualification (Qualification value)
		{
			Strategy.RemoveCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public bool ExistQualifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Qualifications.RelationType);
			}
		}

		virtual public void RemoveQualifications()
		{
			Strategy.RemoveCompositeRoles(Meta.Qualifications.RelationType);
		}


		virtual public ContactMechanism HomeAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HomeAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HomeAddress.RelationType, value);
			}
		}

		virtual public bool ExistHomeAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HomeAddress.RelationType);
			}
		}

		virtual public void RemoveHomeAddress()
		{
			Strategy.RemoveCompositeRole(Meta.HomeAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> InactiveOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistInactiveOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveInactiveOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
		}


		virtual public ContactMechanism SalesOffice
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.SalesOffice.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOffice.RelationType, value);
			}
		}

		virtual public bool ExistSalesOffice
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOffice.RelationType);
			}
		}

		virtual public void RemoveSalesOffice()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOffice.RelationType);
		}


		virtual public global::Allors.Extent<Person> InactiveContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveContacts.RelationType, value);
			}
		}

		virtual public void AddInactiveContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public void RemoveInactiveContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public bool ExistInactiveContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveContacts.RelationType);
			}
		}

		virtual public void RemoveInactiveContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveContacts.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> InactivePartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistInactivePartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveInactivePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentSalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentSalesReps.RelationType, value);
			}
		}

		virtual public void AddCurrentSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public void RemoveCurrentSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public bool ExistCurrentSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
		}

		virtual public void RemoveCurrentSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentSalesReps.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> PartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public void RemovePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemovePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesFax.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<BillingAccount> BillingAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BillingAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BillingAccounts.RelationType, value);
			}
		}

		virtual public void AddBillingAccount (BillingAccount value)
		{
			Strategy.AddCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public void RemoveBillingAccount (BillingAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public bool ExistBillingAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BillingAccounts.RelationType);
			}
		}

		virtual public void RemoveBillingAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BillingAccounts.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<PartySkill> PartySkills
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartySkills.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartySkills.RelationType, value);
			}
		}

		virtual public void AddPartySkill (PartySkill value)
		{
			Strategy.AddCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public void RemovePartySkill (PartySkill value)
		{
			Strategy.RemoveCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public bool ExistPartySkills
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartySkills.RelationType);
			}
		}

		virtual public void RemovePartySkills()
		{
			Strategy.RemoveCompositeRoles(Meta.PartySkills.RelationType);
		}


		virtual public global::Allors.Extent<PartyClassification> PartyClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyClassifications.RelationType, value);
			}
		}

		virtual public void AddPartyClassification (PartyClassification value)
		{
			Strategy.AddCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public void RemovePartyClassification (PartyClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public bool ExistPartyClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyClassifications.RelationType);
			}
		}

		virtual public void RemovePartyClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyClassifications.RelationType);
		}


		virtual public global::System.Boolean? ExcludeFromDunning 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ExcludeFromDunning.RelationType, value);
			}
		}

		virtual public bool ExistExcludeFromDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
		}

		virtual public void RemoveExcludeFromDunning()
		{
			Strategy.RemoveUnitRole(Meta.ExcludeFromDunning.RelationType);
		}


		virtual public global::Allors.Extent<BankAccount> BankAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BankAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BankAccounts.RelationType, value);
			}
		}

		virtual public void AddBankAccount (BankAccount value)
		{
			Strategy.AddCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public void RemoveBankAccount (BankAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public bool ExistBankAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BankAccounts.RelationType);
			}
		}

		virtual public void RemoveBankAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BankAccounts.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentContacts.RelationType, value);
			}
		}

		virtual public void AddCurrentContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public void RemoveCurrentContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public bool ExistCurrentContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentContacts.RelationType);
			}
		}

		virtual public void RemoveCurrentContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentContacts.RelationType);
		}


		virtual public ContactMechanism BillingAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingAddress.RelationType, value);
			}
		}

		virtual public bool ExistBillingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingAddress.RelationType);
			}
		}

		virtual public void RemoveBillingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.BillingAddress.RelationType);
		}


		virtual public EmailAddress GeneralEmail
		{ 
			get
			{
				return (EmailAddress) Strategy.GetCompositeRole(Meta.GeneralEmail.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralEmail.RelationType, value);
			}
		}

		virtual public bool ExistGeneralEmail
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralEmail.RelationType);
			}
		}

		virtual public void RemoveGeneralEmail()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralEmail.RelationType);
		}


		virtual public ShipmentMethod DefaultShipmentMethod
		{ 
			get
			{
				return (ShipmentMethod) Strategy.GetCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultShipmentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultShipmentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultShipmentMethod.RelationType);
		}


		virtual public global::Allors.Extent<Resume> Resumes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Resumes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Resumes.RelationType, value);
			}
		}

		virtual public void AddResume (Resume value)
		{
			Strategy.AddCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public void RemoveResume (Resume value)
		{
			Strategy.RemoveCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public bool ExistResumes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Resumes.RelationType);
			}
		}

		virtual public void RemoveResumes()
		{
			Strategy.RemoveCompositeRoles(Meta.Resumes.RelationType);
		}


		virtual public ContactMechanism HeadQuarter
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HeadQuarter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HeadQuarter.RelationType, value);
			}
		}

		virtual public bool ExistHeadQuarter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HeadQuarter.RelationType);
			}
		}

		virtual public void RemoveHeadQuarter()
		{
			Strategy.RemoveCompositeRole(Meta.HeadQuarter.RelationType);
		}


		virtual public EmailAddress PersonalEmailAddress
		{ 
			get
			{
				return (EmailAddress) Strategy.GetCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonalEmailAddress.RelationType, value);
			}
		}

		virtual public bool ExistPersonalEmailAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
		}

		virtual public void RemovePersonalEmailAddress()
		{
			Strategy.RemoveCompositeRole(Meta.PersonalEmailAddress.RelationType);
		}


		virtual public TelecommunicationsNumber CellPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CellPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistCellPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveCellPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.CellPhoneNumber.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesPhone.RelationType);
		}


		virtual public ContactMechanism OrderAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderAddress.RelationType, value);
			}
		}

		virtual public bool ExistOrderAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderAddress.RelationType);
			}
		}

		virtual public void RemoveOrderAddress()
		{
			Strategy.RemoveCompositeRole(Meta.OrderAddress.RelationType);
		}


		virtual public ElectronicAddress InternetAddress
		{ 
			get
			{
				return (ElectronicAddress) Strategy.GetCompositeRole(Meta.InternetAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternetAddress.RelationType, value);
			}
		}

		virtual public bool ExistInternetAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternetAddress.RelationType);
			}
		}

		virtual public void RemoveInternetAddress()
		{
			Strategy.RemoveCompositeRole(Meta.InternetAddress.RelationType);
		}


		virtual public global::Allors.Extent<Media> Contents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Contents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Contents.RelationType, value);
			}
		}

		virtual public void AddContent (Media value)
		{
			Strategy.AddCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public void RemoveContent (Media value)
		{
			Strategy.RemoveCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public bool ExistContents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Contents.RelationType);
			}
		}

		virtual public void RemoveContents()
		{
			Strategy.RemoveCompositeRoles(Meta.Contents.RelationType);
		}


		virtual public global::Allors.Extent<CreditCard> CreditCards
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CreditCards.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CreditCards.RelationType, value);
			}
		}

		virtual public void AddCreditCard (CreditCard value)
		{
			Strategy.AddCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public void RemoveCreditCard (CreditCard value)
		{
			Strategy.RemoveCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public bool ExistCreditCards
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CreditCards.RelationType);
			}
		}

		virtual public void RemoveCreditCards()
		{
			Strategy.RemoveCompositeRoles(Meta.CreditCards.RelationType);
		}


		virtual public PostalAddress ShippingAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShippingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAddress.RelationType, value);
			}
		}

		virtual public bool ExistShippingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAddress.RelationType);
			}
		}

		virtual public void RemoveShippingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> CurrentOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistCurrentOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveCurrentOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
		}


		virtual public global::System.Decimal OpenOrderAmount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.OpenOrderAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OpenOrderAmount.RelationType, value);
			}
		}

		virtual public bool ExistOpenOrderAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.OpenOrderAmount.RelationType);
			}
		}

		virtual public void RemoveOpenOrderAmount()
		{
			Strategy.RemoveUnitRole(Meta.OpenOrderAmount.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralFaxNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralFaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralFaxNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralFaxNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralFaxNumber.RelationType);
		}


		virtual public PaymentMethod DefaultPaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultPaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPaymentMethod.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> CurrentPartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistCurrentPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveCurrentPartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralPhoneNumber.RelationType);
		}


		virtual public Currency PreferredCurrency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.PreferredCurrency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreferredCurrency.RelationType, value);
			}
		}

		virtual public bool ExistPreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreferredCurrency.RelationType);
			}
		}

		virtual public void RemovePreferredCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.PreferredCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal? SimpleMovingAverage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SimpleMovingAverage.RelationType, value);
			}
		}

		virtual public bool ExistSimpleMovingAverage{
			get
			{
				return Strategy.ExistUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
		}

		virtual public void RemoveSimpleMovingAverage()
		{
			Strategy.RemoveUnitRole(Meta.SimpleMovingAverage.RelationType);
		}


		virtual public global::System.Decimal AmountOverDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountOverDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountOverDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountOverDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountOverDue.RelationType);
			}
		}

		virtual public void RemoveAmountOverDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountOverDue.RelationType);
		}


		virtual public DunningType DunningType
		{ 
			get
			{
				return (DunningType) Strategy.GetCompositeRole(Meta.DunningType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DunningType.RelationType, value);
			}
		}

		virtual public bool ExistDunningType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DunningType.RelationType);
			}
		}

		virtual public void RemoveDunningType()
		{
			Strategy.RemoveCompositeRole(Meta.DunningType.RelationType);
		}


		virtual public global::System.Decimal AmountDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountDue.RelationType);
			}
		}

		virtual public void RemoveAmountDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountDue.RelationType);
		}


		virtual public global::System.DateTime? LastReminderDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastReminderDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastReminderDate.RelationType, value);
			}
		}

		virtual public bool ExistLastReminderDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastReminderDate.RelationType);
			}
		}

		virtual public void RemoveLastReminderDate()
		{
			Strategy.RemoveUnitRole(Meta.LastReminderDate.RelationType);
		}


		virtual public global::System.Decimal? CreditLimit 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.CreditLimit.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreditLimit.RelationType, value);
			}
		}

		virtual public bool ExistCreditLimit{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreditLimit.RelationType);
			}
		}

		virtual public void RemoveCreditLimit()
		{
			Strategy.RemoveUnitRole(Meta.CreditLimit.RelationType);
		}


		virtual public global::System.Int32 SubAccountNumber 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.SubAccountNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SubAccountNumber.RelationType, value);
			}
		}

		virtual public bool ExistSubAccountNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.SubAccountNumber.RelationType);
			}
		}

		virtual public void RemoveSubAccountNumber()
		{
			Strategy.RemoveUnitRole(Meta.SubAccountNumber.RelationType);
		}


		virtual public global::System.DateTime? BlockedForDunning 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BlockedForDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockedForDunning.RelationType, value);
			}
		}

		virtual public bool ExistBlockedForDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockedForDunning.RelationType);
			}
		}

		virtual public void RemoveBlockedForDunning()
		{
			Strategy.RemoveUnitRole(Meta.BlockedForDunning.RelationType);
		}


		virtual public global::Allors.Extent<Agreement> Agreements
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Agreements.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Agreements.RelationType, value);
			}
		}

		virtual public void AddAgreement (Agreement value)
		{
			Strategy.AddCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public void RemoveAgreement (Agreement value)
		{
			Strategy.RemoveCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public bool ExistAgreements
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Agreements.RelationType);
			}
		}

		virtual public void RemoveAgreements()
		{
			Strategy.RemoveCompositeRoles(Meta.Agreements.RelationType);
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEvents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CommunicationEvents.RelationType, value);
			}
		}

		virtual public void AddCommunicationEvent (CommunicationEvent value)
		{
			Strategy.AddCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public void RemoveCommunicationEvent (CommunicationEvent value)
		{
			Strategy.RemoveCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public bool ExistCommunicationEvents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
		}

		virtual public void RemoveCommunicationEvents()
		{
			Strategy.RemoveCompositeRoles(Meta.CommunicationEvents.RelationType);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale.RelationType, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale.RelationType);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}



		virtual public InternalOrganisation InternalOrganisationWhereCurrentSupplier
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereCurrentSupplier.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereCurrentSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereCurrentSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> OrganisationContactRelationshipsWhereOrganisation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationContactRelationshipsWhereOrganisation.RelationType);
			}
		}

		virtual public bool ExistOrganisationContactRelationshipsWhereOrganisation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationContactRelationshipsWhereOrganisation.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationRollUp> OrganisationRollUpsWhereParent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationRollUpsWhereParent.RelationType);
			}
		}

		virtual public bool ExistOrganisationRollUpsWhereParent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationRollUpsWhereParent.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationRollUp> OrganisationRollUpsWhereChild
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationRollUpsWhereChild.RelationType);
			}
		}

		virtual public bool ExistOrganisationRollUpsWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationRollUpsWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<Position> PositionsWhereOrganisation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PositionsWhereOrganisation.RelationType);
			}
		}

		virtual public bool ExistPositionsWhereOrganisation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PositionsWhereOrganisation.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProfessionalServicesRelationship> ProfessionalServicesRelationshipsWhereProfessionalServicesProvider
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProfessionalServicesRelationshipsWhereProfessionalServicesProvider.RelationType);
			}
		}

		virtual public bool ExistProfessionalServicesRelationshipsWhereProfessionalServicesProvider
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProfessionalServicesRelationshipsWhereProfessionalServicesProvider.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereCarrier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereCarrier.RelationType);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereCarrier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereCarrier.RelationType);
			}
		}


		virtual public global::Allors.Extent<SupplierRelationship> SupplierRelationshipsWhereSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SupplierRelationshipsWhereSupplier.RelationType);
			}
		}

		virtual public bool ExistSupplierRelationshipsWhereSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SupplierRelationshipsWhereSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<VatRate> VatRatesWhereTaxAuthority
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.VatRatesWhereTaxAuthority.RelationType);
			}
		}

		virtual public bool ExistVatRatesWhereTaxAuthority
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.VatRatesWhereTaxAuthority.RelationType);
			}
		}


		virtual public global::Allors.Extent<EstimatedProductCost> EstimatedProductCostsWhereOrganisation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EstimatedProductCostsWhereOrganisation.RelationType);
			}
		}

		virtual public bool ExistEstimatedProductCostsWhereOrganisation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EstimatedProductCostsWhereOrganisation.RelationType);
			}
		}


		virtual public global::Allors.Extent<CustomerRelationship> CustomerRelationshipsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CustomerRelationshipsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistCustomerRelationshipsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CustomerRelationshipsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Engagement> EngagementsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistEngagementsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Engagement> EngagementsWherePlacingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementsWherePlacingParty.RelationType);
			}
		}

		virtual public bool ExistEngagementsWherePlacingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementsWherePlacingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaceToFaceCommunication> FaceToFaceCommunicationsWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaceToFaceCommunicationsWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistFaceToFaceCommunicationsWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaceToFaceCommunicationsWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaceToFaceCommunicationVersion> FaceToFaceCommunicationVersionsWhereParticipant
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaceToFaceCommunicationVersionsWhereParticipant.RelationType);
			}
		}

		virtual public bool ExistFaceToFaceCommunicationVersionsWhereParticipant
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaceToFaceCommunicationVersionsWhereParticipant.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunication> FaxCommunicationsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunication> FaxCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunicationVersion> FaxCommunicationVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<FaxCommunicationVersion> FaxCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FaxCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistFaxCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FaxCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereManufacturedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereManufacturedBy.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereManufacturedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereManufacturedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereSuppliedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereSuppliedBy.RelationType);
			}
		}

		virtual public bool ExistGoodsWhereSuppliedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereSuppliedBy.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereCurrentCustomer
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereCurrentCustomer.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereCurrentCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereCurrentCustomer.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActiveCustomer
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActiveCustomer.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActiveCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActiveCustomer.RelationType);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereActiveSupplier
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereActiveSupplier.RelationType);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereActiveSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereActiveSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondence> LetterCorrespondencesWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondencesWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondencesWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondencesWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondence> LetterCorrespondencesWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondencesWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondencesWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondencesWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondenceVersion> LetterCorrespondenceVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondenceVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<LetterCorrespondenceVersion> LetterCorrespondenceVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistLetterCorrespondenceVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LetterCorrespondenceVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunicationVersion> PhoneCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunicationVersion> PhoneCommunicationVersionsWhereCaller
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationVersionsWhereCaller.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationVersionsWhereCaller
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationVersionsWhereCaller.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickListVersion> PickListVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistPickListVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseInvoiceVersion> PurchaseInvoiceVersionsWhereBilledFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseInvoiceVersionsWhereBilledFromParty.RelationType);
			}
		}

		virtual public bool ExistPurchaseInvoiceVersionsWhereBilledFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseInvoiceVersionsWhereBilledFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWherePreviousTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWherePreviousTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWherePreviousTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWherePreviousTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWhereTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWhereTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWhereTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWhereTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItemVersion> QuoteItemVersionsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemVersionsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistQuoteItemVersionsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemVersionsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereNeededFor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereNeededFor.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereNeededFor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereNeededFor.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereServicedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereServicedBy.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereServicedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereServicedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItemVersion> SalesOrderItemVersionsWhereAssignedShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemVersionsWhereAssignedShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemVersionsWhereAssignedShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemVersionsWhereAssignedShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWherePlacingCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWherePlacingCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWherePlacingCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWherePlacingCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrganisationGlAccount> OrganisationGlAccountsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationGlAccountsWhereParty.RelationType);
			}
		}

		virtual public bool ExistOrganisationGlAccountsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationGlAccountsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyFixedAssetAssignment> PartyFixedAssetAssignmentsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyFixedAssetAssignmentsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyPackageRevenue> PartyPackageRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyPackageRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyPackageRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyPackageRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductCategoryRevenue> PartyProductCategoryRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyProductCategoryRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyProductRevenue> PartyProductRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyProductRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyProductRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyProductRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyRevenue> PartyRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunication> PhoneCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<PhoneCommunication> PhoneCommunicationsWhereCaller
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PhoneCommunicationsWhereCaller.RelationType);
			}
		}

		virtual public bool ExistPhoneCommunicationsWhereCaller
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PhoneCommunicationsWhereCaller.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickList> PickListsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistPickListsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseInvoice> PurchaseInvoicesWhereBilledFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseInvoicesWhereBilledFromParty.RelationType);
			}
		}

		virtual public bool ExistPurchaseInvoicesWhereBilledFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseInvoicesWhereBilledFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrder> PurchaseOrdersWherePreviousTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrdersWherePreviousTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrdersWherePreviousTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrdersWherePreviousTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrder> PurchaseOrdersWhereTakenViaSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrdersWhereTakenViaSupplier.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrdersWhereTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrdersWhereTakenViaSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistQuoteItemsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereAuthorizer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereAuthorizer.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereAuthorizer.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereNeededFor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereNeededFor.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereNeededFor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereNeededFor.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereServicedBy
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereServicedBy.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereServicedBy
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereServicedBy.RelationType);
			}
		}


		virtual public global::Allors.Extent<RespondingParty> RespondingPartiesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RespondingPartiesWhereParty.RelationType);
			}
		}

		virtual public bool ExistRespondingPartiesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RespondingPartiesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePreviousShipToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePreviousShipToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePreviousShipToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePreviousShipToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePreviousBillToCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePreviousBillToCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePreviousBillToCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePreviousBillToCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWherePlacingCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWherePlacingCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWherePlacingCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWherePlacingCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereAssignedShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereAssignedShipToParty.RelationType);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereAssignedShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereAssignedShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyProductCategoryRevenue> SalesRepPartyProductCategoryRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyProductCategoryRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyProductCategoryRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepPartyRevenue> SalesRepPartyRevenuesWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepPartyRevenuesWhereParty.RelationType);
			}
		}

		virtual public bool ExistSalesRepPartyRevenuesWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepPartyRevenuesWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesRepRelationship> SalesRepRelationshipsWhereCustomer
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesRepRelationshipsWhereCustomer.RelationType);
			}
		}

		virtual public bool ExistSalesRepRelationshipsWhereCustomer
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesRepRelationshipsWhereCustomer.RelationType);
			}
		}


		virtual public global::Allors.Extent<SubContractorRelationship> SubContractorRelationshipsWhereContractor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SubContractorRelationshipsWhereContractor.RelationType);
			}
		}

		virtual public bool ExistSubContractorRelationshipsWhereContractor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SubContractorRelationshipsWhereContractor.RelationType);
			}
		}


		virtual public global::Allors.Extent<SubContractorRelationship> SubContractorRelationshipsWhereSubContractor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SubContractorRelationshipsWhereSubContractor.RelationType);
			}
		}

		virtual public bool ExistSubContractorRelationshipsWhereSubContractor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SubContractorRelationshipsWhereSubContractor.RelationType);
			}
		}


		virtual public global::Allors.Extent<SupplierOffering> SupplierOfferingsWhereSupplier
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SupplierOfferingsWhereSupplier.RelationType);
			}
		}

		virtual public bool ExistSupplierOfferingsWhereSupplier
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SupplierOfferingsWhereSupplier.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunicationVersion> WebSiteCommunicationVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunicationVersion> WebSiteCommunicationVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunication> WebSiteCommunicationsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<WebSiteCommunication> WebSiteCommunicationsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WebSiteCommunicationsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistWebSiteCommunicationsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WebSiteCommunicationsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortPartyAssignment> WorkEffortPartyAssignmentsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereParty.RelationType);
			}
		}

		virtual public bool ExistWorkEffortPartyAssignmentsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereInvolvedParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereInvolvedParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereInvolvedParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereInvolvedParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEventVersion> CommunicationEventVersionsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventVersionsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventVersionsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventVersionsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereInvolvedParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereInvolvedParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereInvolvedParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereInvolvedParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistCommunicationEventsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ExternalAccountingTransaction> ExternalAccountingTransactionsWhereFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ExternalAccountingTransactionsWhereFromParty.RelationType);
			}
		}

		virtual public bool ExistExternalAccountingTransactionsWhereFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ExternalAccountingTransactionsWhereFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ExternalAccountingTransaction> ExternalAccountingTransactionsWhereToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ExternalAccountingTransactionsWhereToParty.RelationType);
			}
		}

		virtual public bool ExistExternalAccountingTransactionsWhereToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ExternalAccountingTransactionsWhereToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<PartyRelationship> PartyRelationshipsWhereParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyRelationshipsWhereParty.RelationType);
			}
		}

		virtual public bool ExistPartyRelationshipsWhereParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyRelationshipsWhereParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<QuoteVersion> QuoteVersionsWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteVersionsWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistQuoteVersionsWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteVersionsWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestVersion> RequestVersionsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestVersionsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequestVersionsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestVersionsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<Payment> PaymentsWhereSendingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentsWhereSendingParty.RelationType);
			}
		}

		virtual public bool ExistPaymentsWhereSendingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentsWhereSendingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Payment> PaymentsWhereReceivingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentsWhereReceivingParty.RelationType);
			}
		}

		virtual public bool ExistPaymentsWhereReceivingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentsWhereReceivingParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Quote> QuotesWhereReceiver
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuotesWhereReceiver.RelationType);
			}
		}

		virtual public bool ExistQuotesWhereReceiver
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuotesWhereReceiver.RelationType);
			}
		}


		virtual public global::Allors.Extent<Request> RequestsWhereOriginator
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestsWhereOriginator.RelationType);
			}
		}

		virtual public bool ExistRequestsWhereOriginator
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestsWhereOriginator.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereShipFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereShipFromParty.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereShipFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereShipFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereBillToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereBillToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereBillToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereBillToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereShipToParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereShipToParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereShipToParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereShipToParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereShipFromParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereShipFromParty.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereShipFromParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereShipFromParty.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new OrganisationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OrganisationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OrganisationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OrganisationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OrganisationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OrganisationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OrganisationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OrganisationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OrganisationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OrganisationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new OrganisationDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new OrganisationDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class OrganisationBuilder : Allors.ObjectBuilder<Organisation> , PartyBuilder, DeletableBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public OrganisationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Organisation instance)
		{

			instance.Name = this.Name;
		
		

			instance.TaxNumber = this.TaxNumber;
		
		

			instance.PartyName = this.PartyName;
		
						
			

			if(this.ExcludeFromDunning.HasValue)
			{
				instance.ExcludeFromDunning = this.ExcludeFromDunning.Value;
			}			
		
				
			

			if(this.SimpleMovingAverage.HasValue)
			{
				instance.SimpleMovingAverage = this.SimpleMovingAverage.Value;
			}			
		
		
			

			if(this.AmountOverDue.HasValue)
			{
				instance.AmountOverDue = this.AmountOverDue.Value;
			}			
		
				
			

			if(this.LastReminderDate.HasValue)
			{
				instance.LastReminderDate = this.LastReminderDate.Value;
			}			
		
		
			

			if(this.CreditLimit.HasValue)
			{
				instance.CreditLimit = this.CreditLimit.Value;
			}			
		
		
			

			if(this.SubAccountNumber.HasValue)
			{
				instance.SubAccountNumber = this.SubAccountNumber.Value;
			}			
		
		
			

			if(this.BlockedForDunning.HasValue)
			{
				instance.BlockedForDunning = this.BlockedForDunning.Value;
			}			
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		
			if(this.OrganisationRoles!=null)
			{
				instance.OrganisationRoles = this.OrganisationRoles.ToArray();
			}
								

			instance.LegalForm = this.LegalForm;

				

			instance.LogoImage = this.LogoImage;

		
			if(this.IndustryClassifications!=null)
			{
				instance.IndustryClassifications = this.IndustryClassifications.ToArray();
			}
		
			if(this.OrganisationClassifications!=null)
			{
				instance.OrganisationClassifications = this.OrganisationClassifications.ToArray();
			}
						
			if(this.Qualifications!=null)
			{
				instance.Qualifications = this.Qualifications.ToArray();
			}
																
			if(this.PartyContactMechanisms!=null)
			{
				instance.PartyContactMechanisms = this.PartyContactMechanisms.ToArray();
			}
						
			if(this.BillingAccounts!=null)
			{
				instance.BillingAccounts = this.BillingAccounts.ToArray();
			}
				
			if(this.PartySkills!=null)
			{
				instance.PartySkills = this.PartySkills.ToArray();
			}
				
			if(this.BankAccounts!=null)
			{
				instance.BankAccounts = this.BankAccounts.ToArray();
			}
								

			instance.DefaultShipmentMethod = this.DefaultShipmentMethod;

		
			if(this.Resumes!=null)
			{
				instance.Resumes = this.Resumes.ToArray();
			}
														
			if(this.Contents!=null)
			{
				instance.Contents = this.Contents.ToArray();
			}
		
			if(this.CreditCards!=null)
			{
				instance.CreditCards = this.CreditCards.ToArray();
			}
								

			instance.DefaultPaymentMethod = this.DefaultPaymentMethod;

						

			instance.PreferredCurrency = this.PreferredCurrency;

		

			instance.VatRegime = this.VatRegime;

		

			instance.DunningType = this.DunningType;

		
			if(this.Agreements!=null)
			{
				instance.Agreements = this.Agreements.ToArray();
			}
		
			if(this.CommunicationEvents!=null)
			{
				instance.CommunicationEvents = this.CommunicationEvents.ToArray();
			}
		

			instance.Locale = this.Locale;

		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public OrganisationVersion CurrentVersion {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithCurrentVersion(OrganisationVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrganisationVersion> AllVersions {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithAllVersion(OrganisationVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<OrganisationVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrganisationRole> OrganisationRoles {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithOrganisationRole(OrganisationRole value)
		        {
					if(this.OrganisationRoles == null)
					{
						this.OrganisationRoles = new global::System.Collections.Generic.List<OrganisationRole>(); 
					}
		            this.OrganisationRoles.Add(value);
		            return this;
		        }		

				
				public LegalForm LegalForm {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLegalForm(LegalForm value)
		        {
		            if(this.LegalForm!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LegalForm = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public Media LogoImage {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLogoImage(Media value)
		        {
		            if(this.LogoImage!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LogoImage = value;
		            return this;
		        }		

				
				public global::System.String TaxNumber {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithTaxNumber(global::System.String value)
		        {
				    if(this.TaxNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TaxNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<IndustryClassification> IndustryClassifications {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithIndustryClassification(IndustryClassification value)
		        {
					if(this.IndustryClassifications == null)
					{
						this.IndustryClassifications = new global::System.Collections.Generic.List<IndustryClassification>(); 
					}
		            this.IndustryClassifications.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrganisationClassification> OrganisationClassifications {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithOrganisationClassification(OrganisationClassification value)
		        {
					if(this.OrganisationClassifications == null)
					{
						this.OrganisationClassifications = new global::System.Collections.Generic.List<OrganisationClassification>(); 
					}
		            this.OrganisationClassifications.Add(value);
		            return this;
		        }		

				
				public global::System.String PartyName {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithPartyName(global::System.String value)
		        {
				    if(this.PartyName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PartyName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Qualification> Qualifications {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithQualification(Qualification value)
		        {
					if(this.Qualifications == null)
					{
						this.Qualifications = new global::System.Collections.Generic.List<Qualification>(); 
					}
		            this.Qualifications.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartyContactMechanism> PartyContactMechanisms {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithPartyContactMechanism(PartyContactMechanism value)
		        {
					if(this.PartyContactMechanisms == null)
					{
						this.PartyContactMechanisms = new global::System.Collections.Generic.List<PartyContactMechanism>(); 
					}
		            this.PartyContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BillingAccount> BillingAccounts {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithBillingAccount(BillingAccount value)
		        {
					if(this.BillingAccounts == null)
					{
						this.BillingAccounts = new global::System.Collections.Generic.List<BillingAccount>(); 
					}
		            this.BillingAccounts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartySkill> PartySkills {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithPartySkill(PartySkill value)
		        {
					if(this.PartySkills == null)
					{
						this.PartySkills = new global::System.Collections.Generic.List<PartySkill>(); 
					}
		            this.PartySkills.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? ExcludeFromDunning {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithExcludeFromDunning(global::System.Boolean? value)
		        {
				    if(this.ExcludeFromDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExcludeFromDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BankAccount> BankAccounts {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithBankAccount(BankAccount value)
		        {
					if(this.BankAccounts == null)
					{
						this.BankAccounts = new global::System.Collections.Generic.List<BankAccount>(); 
					}
		            this.BankAccounts.Add(value);
		            return this;
		        }		

				
				public ShipmentMethod DefaultShipmentMethod {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDefaultShipmentMethod(ShipmentMethod value)
		        {
		            if(this.DefaultShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Resume> Resumes {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithResume(Resume value)
		        {
					if(this.Resumes == null)
					{
						this.Resumes = new global::System.Collections.Generic.List<Resume>(); 
					}
		            this.Resumes.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Media> Contents {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithContent(Media value)
		        {
					if(this.Contents == null)
					{
						this.Contents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Contents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CreditCard> CreditCards {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithCreditCard(CreditCard value)
		        {
					if(this.CreditCards == null)
					{
						this.CreditCards = new global::System.Collections.Generic.List<CreditCard>(); 
					}
		            this.CreditCards.Add(value);
		            return this;
		        }		

				
				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public Currency PreferredCurrency {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithPreferredCurrency(Currency value)
		        {
		            if(this.PreferredCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreferredCurrency = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? SimpleMovingAverage {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSimpleMovingAverage(global::System.Decimal? value)
		        {
				    if(this.SimpleMovingAverage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SimpleMovingAverage = value;
		            return this;
		        }	

				public global::System.Decimal? AmountOverDue {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithAmountOverDue(global::System.Decimal? value)
		        {
				    if(this.AmountOverDue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountOverDue = value;
		            return this;
		        }	

				public DunningType DunningType {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDunningType(DunningType value)
		        {
		            if(this.DunningType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DunningType = value;
		            return this;
		        }		

				
				public global::System.DateTime? LastReminderDate {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLastReminderDate(global::System.DateTime? value)
		        {
				    if(this.LastReminderDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastReminderDate = value;
		            return this;
		        }	

				public global::System.Decimal? CreditLimit {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithCreditLimit(global::System.Decimal? value)
		        {
				    if(this.CreditLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreditLimit = value;
		            return this;
		        }	

				public global::System.Int32? SubAccountNumber {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSubAccountNumber(global::System.Int32? value)
		        {
				    if(this.SubAccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SubAccountNumber = value;
		            return this;
		        }	

				public global::System.DateTime? BlockedForDunning {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithBlockedForDunning(global::System.DateTime? value)
		        {
				    if(this.BlockedForDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Agreement> Agreements {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithAgreement(Agreement value)
		        {
					if(this.Agreements == null)
					{
						this.Agreements = new global::System.Collections.Generic.List<Agreement>(); 
					}
		            this.Agreements.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CommunicationEvent> CommunicationEvents {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithCommunicationEvent(CommunicationEvent value)
		        {
					if(this.CommunicationEvents == null)
					{
						this.CommunicationEvents = new global::System.Collections.Generic.List<CommunicationEvent>(); 
					}
		            this.CommunicationEvents.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public User CreatedBy {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	


	}

	public partial class Organisations : global::Allors.ObjectsBase<Organisation>
	{
		public Organisations(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaOrganisation Meta
		{
			get
			{
				return Allors.Meta.MetaOrganisation.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}