// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Engagement : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public Engagement(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaEngagement Meta
		{
			get
			{
				return Allors.Meta.MetaEngagement.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Engagement Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Engagement) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Agreement Agreement
		{ 
			get
			{
				return (Agreement) Strategy.GetCompositeRole(Meta.Agreement.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Agreement.RelationType, value);
			}
		}

		virtual public bool ExistAgreement
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Agreement.RelationType);
			}
		}

		virtual public void RemoveAgreement()
		{
			Strategy.RemoveCompositeRole(Meta.Agreement.RelationType);
		}


		virtual public ContactMechanism PlacingContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.PlacingContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PlacingContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistPlacingContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PlacingContactMechanism.RelationType);
			}
		}

		virtual public void RemovePlacingContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.PlacingContactMechanism.RelationType);
		}


		virtual public global::System.Decimal? MaximumAmount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.MaximumAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaximumAmount.RelationType, value);
			}
		}

		virtual public bool ExistMaximumAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaximumAmount.RelationType);
			}
		}

		virtual public void RemoveMaximumAmount()
		{
			Strategy.RemoveUnitRole(Meta.MaximumAmount.RelationType);
		}


		virtual public ContactMechanism BillToContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistBillToContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
		}

		virtual public void RemoveBillToContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.BillToContactMechanism.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public Party BillToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.BillToParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToParty.RelationType, value);
			}
		}

		virtual public bool ExistBillToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToParty.RelationType);
			}
		}

		virtual public void RemoveBillToParty()
		{
			Strategy.RemoveCompositeRole(Meta.BillToParty.RelationType);
		}


		virtual public Party PlacingParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.PlacingParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PlacingParty.RelationType, value);
			}
		}

		virtual public bool ExistPlacingParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PlacingParty.RelationType);
			}
		}

		virtual public void RemovePlacingParty()
		{
			Strategy.RemoveCompositeRole(Meta.PlacingParty.RelationType);
		}


		virtual public global::System.DateTime? StartDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.StartDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.StartDate.RelationType, value);
			}
		}

		virtual public bool ExistStartDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.StartDate.RelationType);
			}
		}

		virtual public void RemoveStartDate()
		{
			Strategy.RemoveUnitRole(Meta.StartDate.RelationType);
		}


		virtual public ContactMechanism TakenViaContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.TakenViaContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistTakenViaContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaContactMechanism.RelationType);
			}
		}

		virtual public void RemoveTakenViaContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaContactMechanism.RelationType);
		}


		virtual public global::System.Decimal? EstimatedAmount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedAmount.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedAmount.RelationType);
			}
		}

		virtual public void RemoveEstimatedAmount()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedAmount.RelationType);
		}


		virtual public global::System.DateTime? EndDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EndDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EndDate.RelationType, value);
			}
		}

		virtual public bool ExistEndDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EndDate.RelationType);
			}
		}

		virtual public void RemoveEndDate()
		{
			Strategy.RemoveUnitRole(Meta.EndDate.RelationType);
		}


		virtual public global::System.DateTime? ContractDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ContractDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ContractDate.RelationType, value);
			}
		}

		virtual public bool ExistContractDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ContractDate.RelationType);
			}
		}

		virtual public void RemoveContractDate()
		{
			Strategy.RemoveUnitRole(Meta.ContractDate.RelationType);
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EngagementItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EngagementItems.RelationType, value);
			}
		}

		virtual public void AddEngagementItem (EngagementItem value)
		{
			Strategy.AddCompositeRole(Meta.EngagementItems.RelationType, value);
		}

		virtual public void RemoveEngagementItem (EngagementItem value)
		{
			Strategy.RemoveCompositeRole(Meta.EngagementItems.RelationType, value);
		}

		virtual public bool ExistEngagementItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EngagementItems.RelationType);
			}
		}

		virtual public void RemoveEngagementItems()
		{
			Strategy.RemoveCompositeRoles(Meta.EngagementItems.RelationType);
		}


		virtual public global::System.String ClientPurchaseOrderNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ClientPurchaseOrderNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ClientPurchaseOrderNumber.RelationType, value);
			}
		}

		virtual public bool ExistClientPurchaseOrderNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.ClientPurchaseOrderNumber.RelationType);
			}
		}

		virtual public void RemoveClientPurchaseOrderNumber()
		{
			Strategy.RemoveUnitRole(Meta.ClientPurchaseOrderNumber.RelationType);
		}


		virtual public OrganisationContactRelationship TakenViaOrganisationContactRelationship
		{ 
			get
			{
				return (OrganisationContactRelationship) Strategy.GetCompositeRole(Meta.TakenViaOrganisationContactRelationship.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaOrganisationContactRelationship.RelationType, value);
			}
		}

		virtual public bool ExistTakenViaOrganisationContactRelationship
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaOrganisationContactRelationship.RelationType);
			}
		}

		virtual public void RemoveTakenViaOrganisationContactRelationship()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaOrganisationContactRelationship.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new EngagementOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new EngagementOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new EngagementOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new EngagementOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new EngagementOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new EngagementOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new EngagementOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new EngagementOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new EngagementOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new EngagementOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class EngagementBuilder : Allors.ObjectBuilder<Engagement> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public EngagementBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Engagement instance)
		{
			

			if(this.MaximumAmount.HasValue)
			{
				instance.MaximumAmount = this.MaximumAmount.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.StartDate.HasValue)
			{
				instance.StartDate = this.StartDate.Value;
			}			
		
		
			

			if(this.EstimatedAmount.HasValue)
			{
				instance.EstimatedAmount = this.EstimatedAmount.Value;
			}			
		
		
			

			if(this.EndDate.HasValue)
			{
				instance.EndDate = this.EndDate.Value;
			}			
		
		
			

			if(this.ContractDate.HasValue)
			{
				instance.ContractDate = this.ContractDate.Value;
			}			
		
		

			instance.ClientPurchaseOrderNumber = this.ClientPurchaseOrderNumber;
		
		

			instance.Agreement = this.Agreement;

		

			instance.PlacingContactMechanism = this.PlacingContactMechanism;

		

			instance.BillToContactMechanism = this.BillToContactMechanism;

		

			instance.BillToParty = this.BillToParty;

		

			instance.PlacingParty = this.PlacingParty;

		

			instance.TakenViaContactMechanism = this.TakenViaContactMechanism;

		
			if(this.EngagementItems!=null)
			{
				instance.EngagementItems = this.EngagementItems.ToArray();
			}
		

			instance.TakenViaOrganisationContactRelationship = this.TakenViaOrganisationContactRelationship;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Agreement Agreement {get; set;}

				/// <exclude/>
				public EngagementBuilder WithAgreement(Agreement value)
		        {
		            if(this.Agreement!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Agreement = value;
		            return this;
		        }		

				
				public ContactMechanism PlacingContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithPlacingContactMechanism(ContactMechanism value)
		        {
		            if(this.PlacingContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaximumAmount {get; set;}

				/// <exclude/>
				public EngagementBuilder WithMaximumAmount(global::System.Decimal? value)
		        {
				    if(this.MaximumAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaximumAmount = value;
		            return this;
		        }	

				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public EngagementBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Party BillToParty {get; set;}

				/// <exclude/>
				public EngagementBuilder WithBillToParty(Party value)
		        {
		            if(this.BillToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToParty = value;
		            return this;
		        }		

				
				public Party PlacingParty {get; set;}

				/// <exclude/>
				public EngagementBuilder WithPlacingParty(Party value)
		        {
		            if(this.PlacingParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingParty = value;
		            return this;
		        }		

				
				public global::System.DateTime? StartDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithStartDate(global::System.DateTime? value)
		        {
				    if(this.StartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StartDate = value;
		            return this;
		        }	

				public ContactMechanism TakenViaContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithTakenViaContactMechanism(ContactMechanism value)
		        {
		            if(this.TakenViaContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? EstimatedAmount {get; set;}

				/// <exclude/>
				public EngagementBuilder WithEstimatedAmount(global::System.Decimal? value)
		        {
				    if(this.EstimatedAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedAmount = value;
		            return this;
		        }	

				public global::System.DateTime? EndDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithEndDate(global::System.DateTime? value)
		        {
				    if(this.EndDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EndDate = value;
		            return this;
		        }	

				public global::System.DateTime? ContractDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithContractDate(global::System.DateTime? value)
		        {
				    if(this.ContractDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ContractDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<EngagementItem> EngagementItems {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithEngagementItem(EngagementItem value)
		        {
					if(this.EngagementItems == null)
					{
						this.EngagementItems = new global::System.Collections.Generic.List<EngagementItem>(); 
					}
		            this.EngagementItems.Add(value);
		            return this;
		        }		

				
				public global::System.String ClientPurchaseOrderNumber {get; set;}

				/// <exclude/>
				public EngagementBuilder WithClientPurchaseOrderNumber(global::System.String value)
		        {
				    if(this.ClientPurchaseOrderNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ClientPurchaseOrderNumber = value;
		            return this;
		        }	

				public OrganisationContactRelationship TakenViaOrganisationContactRelationship {get; set;}

				/// <exclude/>
				public EngagementBuilder WithTakenViaOrganisationContactRelationship(OrganisationContactRelationship value)
		        {
		            if(this.TakenViaOrganisationContactRelationship!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaOrganisationContactRelationship = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Engagements : global::Allors.ObjectsBase<Engagement>
	{
		public Engagements(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaEngagement Meta
		{
			get
			{
				return Allors.Meta.MetaEngagement.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}