// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class AmountDue : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public AmountDue(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaAmountDue Meta
		{
			get
			{
				return Allors.Meta.MetaAmountDue.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static AmountDue Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AmountDue) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal? Amount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Amount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Amount.RelationType, value);
			}
		}

		virtual public bool ExistAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.Amount.RelationType);
			}
		}

		virtual public void RemoveAmount()
		{
			Strategy.RemoveUnitRole(Meta.Amount.RelationType);
		}


		virtual public PaymentMethod PaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.PaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PaymentMethod.RelationType);
			}
		}

		virtual public void RemovePaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.PaymentMethod.RelationType);
		}


		virtual public global::System.DateTime? TransactionDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.TransactionDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TransactionDate.RelationType, value);
			}
		}

		virtual public bool ExistTransactionDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.TransactionDate.RelationType);
			}
		}

		virtual public void RemoveTransactionDate()
		{
			Strategy.RemoveUnitRole(Meta.TransactionDate.RelationType);
		}


		virtual public global::System.DateTime? BlockedForDunning 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BlockedForDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockedForDunning.RelationType, value);
			}
		}

		virtual public bool ExistBlockedForDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockedForDunning.RelationType);
			}
		}

		virtual public void RemoveBlockedForDunning()
		{
			Strategy.RemoveUnitRole(Meta.BlockedForDunning.RelationType);
		}


		virtual public global::System.Decimal? AmountVat 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.AmountVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountVat.RelationType, value);
			}
		}

		virtual public bool ExistAmountVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountVat.RelationType);
			}
		}

		virtual public void RemoveAmountVat()
		{
			Strategy.RemoveUnitRole(Meta.AmountVat.RelationType);
		}


		virtual public BankAccount BankAccount
		{ 
			get
			{
				return (BankAccount) Strategy.GetCompositeRole(Meta.BankAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BankAccount.RelationType, value);
			}
		}

		virtual public bool ExistBankAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BankAccount.RelationType);
			}
		}

		virtual public void RemoveBankAccount()
		{
			Strategy.RemoveCompositeRole(Meta.BankAccount.RelationType);
		}


		virtual public global::System.DateTime? ReconciliationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ReconciliationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ReconciliationDate.RelationType, value);
			}
		}

		virtual public bool ExistReconciliationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ReconciliationDate.RelationType);
			}
		}

		virtual public void RemoveReconciliationDate()
		{
			Strategy.RemoveUnitRole(Meta.ReconciliationDate.RelationType);
		}


		virtual public global::System.String InvoiceNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InvoiceNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InvoiceNumber.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.InvoiceNumber.RelationType);
			}
		}

		virtual public void RemoveInvoiceNumber()
		{
			Strategy.RemoveUnitRole(Meta.InvoiceNumber.RelationType);
		}


		virtual public global::System.Int32? DunningStep 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.DunningStep.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DunningStep.RelationType, value);
			}
		}

		virtual public bool ExistDunningStep{
			get
			{
				return Strategy.ExistUnitRole(Meta.DunningStep.RelationType);
			}
		}

		virtual public void RemoveDunningStep()
		{
			Strategy.RemoveUnitRole(Meta.DunningStep.RelationType);
		}


		virtual public global::System.Int32? SubAccountNumber 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.SubAccountNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SubAccountNumber.RelationType, value);
			}
		}

		virtual public bool ExistSubAccountNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.SubAccountNumber.RelationType);
			}
		}

		virtual public void RemoveSubAccountNumber()
		{
			Strategy.RemoveUnitRole(Meta.SubAccountNumber.RelationType);
		}


		virtual public global::System.String TransactionNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TransactionNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TransactionNumber.RelationType, value);
			}
		}

		virtual public bool ExistTransactionNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.TransactionNumber.RelationType);
			}
		}

		virtual public void RemoveTransactionNumber()
		{
			Strategy.RemoveUnitRole(Meta.TransactionNumber.RelationType);
		}


		virtual public DebitCreditConstant Side
		{ 
			get
			{
				return (DebitCreditConstant) Strategy.GetCompositeRole(Meta.Side.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Side.RelationType, value);
			}
		}

		virtual public bool ExistSide
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Side.RelationType);
			}
		}

		virtual public void RemoveSide()
		{
			Strategy.RemoveCompositeRole(Meta.Side.RelationType);
		}


		virtual public Currency Currency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.Currency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Currency.RelationType, value);
			}
		}

		virtual public bool ExistCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Currency.RelationType);
			}
		}

		virtual public void RemoveCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.Currency.RelationType);
		}


		virtual public global::System.Boolean? BlockedForPayment 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.BlockedForPayment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockedForPayment.RelationType, value);
			}
		}

		virtual public bool ExistBlockedForPayment{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockedForPayment.RelationType);
			}
		}

		virtual public void RemoveBlockedForPayment()
		{
			Strategy.RemoveUnitRole(Meta.BlockedForPayment.RelationType);
		}


		virtual public global::System.DateTime? DateLastReminder 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DateLastReminder.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DateLastReminder.RelationType, value);
			}
		}

		virtual public bool ExistDateLastReminder{
			get
			{
				return Strategy.ExistUnitRole(Meta.DateLastReminder.RelationType);
			}
		}

		virtual public void RemoveDateLastReminder()
		{
			Strategy.RemoveUnitRole(Meta.DateLastReminder.RelationType);
		}


		virtual public global::System.String YourReference 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.YourReference.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.YourReference.RelationType, value);
			}
		}

		virtual public bool ExistYourReference{
			get
			{
				return Strategy.ExistUnitRole(Meta.YourReference.RelationType);
			}
		}

		virtual public void RemoveYourReference()
		{
			Strategy.RemoveUnitRole(Meta.YourReference.RelationType);
		}


		virtual public global::System.String OurReference 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.OurReference.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OurReference.RelationType, value);
			}
		}

		virtual public bool ExistOurReference{
			get
			{
				return Strategy.ExistUnitRole(Meta.OurReference.RelationType);
			}
		}

		virtual public void RemoveOurReference()
		{
			Strategy.RemoveUnitRole(Meta.OurReference.RelationType);
		}


		virtual public global::System.String ReconciliationNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ReconciliationNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ReconciliationNumber.RelationType, value);
			}
		}

		virtual public bool ExistReconciliationNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.ReconciliationNumber.RelationType);
			}
		}

		virtual public void RemoveReconciliationNumber()
		{
			Strategy.RemoveUnitRole(Meta.ReconciliationNumber.RelationType);
		}


		virtual public global::System.DateTime? DueDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DueDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DueDate.RelationType, value);
			}
		}

		virtual public bool ExistDueDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DueDate.RelationType);
			}
		}

		virtual public void RemoveDueDate()
		{
			Strategy.RemoveUnitRole(Meta.DueDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new AmountDueOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new AmountDueOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new AmountDueOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new AmountDueOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new AmountDueOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new AmountDueOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new AmountDueOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new AmountDueOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new AmountDueOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new AmountDueOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class AmountDueBuilder : Allors.ObjectBuilder<AmountDue> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public AmountDueBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(AmountDue instance)
		{
			

			if(this.Amount.HasValue)
			{
				instance.Amount = this.Amount.Value;
			}			
		
		
			

			if(this.TransactionDate.HasValue)
			{
				instance.TransactionDate = this.TransactionDate.Value;
			}			
		
		
			

			if(this.BlockedForDunning.HasValue)
			{
				instance.BlockedForDunning = this.BlockedForDunning.Value;
			}			
		
		
			

			if(this.AmountVat.HasValue)
			{
				instance.AmountVat = this.AmountVat.Value;
			}			
		
		
			

			if(this.ReconciliationDate.HasValue)
			{
				instance.ReconciliationDate = this.ReconciliationDate.Value;
			}			
		
		

			instance.InvoiceNumber = this.InvoiceNumber;
		
		
			

			if(this.DunningStep.HasValue)
			{
				instance.DunningStep = this.DunningStep.Value;
			}			
		
		
			

			if(this.SubAccountNumber.HasValue)
			{
				instance.SubAccountNumber = this.SubAccountNumber.Value;
			}			
		
		

			instance.TransactionNumber = this.TransactionNumber;
		
		
			

			if(this.BlockedForPayment.HasValue)
			{
				instance.BlockedForPayment = this.BlockedForPayment.Value;
			}			
		
		
			

			if(this.DateLastReminder.HasValue)
			{
				instance.DateLastReminder = this.DateLastReminder.Value;
			}			
		
		

			instance.YourReference = this.YourReference;
		
		

			instance.OurReference = this.OurReference;
		
		

			instance.ReconciliationNumber = this.ReconciliationNumber;
		
		
			

			if(this.DueDate.HasValue)
			{
				instance.DueDate = this.DueDate.Value;
			}			
		
		

			instance.PaymentMethod = this.PaymentMethod;

		

			instance.BankAccount = this.BankAccount;

		

			instance.Side = this.Side;

		

			instance.Currency = this.Currency;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public global::System.DateTime? TransactionDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithTransactionDate(global::System.DateTime? value)
		        {
				    if(this.TransactionDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionDate = value;
		            return this;
		        }	

				public global::System.DateTime? BlockedForDunning {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBlockedForDunning(global::System.DateTime? value)
		        {
				    if(this.BlockedForDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForDunning = value;
		            return this;
		        }	

				public global::System.Decimal? AmountVat {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithAmountVat(global::System.Decimal? value)
		        {
				    if(this.AmountVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountVat = value;
		            return this;
		        }	

				public BankAccount BankAccount {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBankAccount(BankAccount value)
		        {
		            if(this.BankAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BankAccount = value;
		            return this;
		        }		

				
				public global::System.DateTime? ReconciliationDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithReconciliationDate(global::System.DateTime? value)
		        {
				    if(this.ReconciliationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationDate = value;
		            return this;
		        }	

				public global::System.String InvoiceNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithInvoiceNumber(global::System.String value)
		        {
				    if(this.InvoiceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceNumber = value;
		            return this;
		        }	

				public global::System.Int32? DunningStep {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDunningStep(global::System.Int32? value)
		        {
				    if(this.DunningStep!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DunningStep = value;
		            return this;
		        }	

				public global::System.Int32? SubAccountNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithSubAccountNumber(global::System.Int32? value)
		        {
				    if(this.SubAccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SubAccountNumber = value;
		            return this;
		        }	

				public global::System.String TransactionNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithTransactionNumber(global::System.String value)
		        {
				    if(this.TransactionNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionNumber = value;
		            return this;
		        }	

				public DebitCreditConstant Side {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithSide(DebitCreditConstant value)
		        {
		            if(this.Side!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Side = value;
		            return this;
		        }		

				
				public Currency Currency {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public global::System.Boolean? BlockedForPayment {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBlockedForPayment(global::System.Boolean? value)
		        {
				    if(this.BlockedForPayment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForPayment = value;
		            return this;
		        }	

				public global::System.DateTime? DateLastReminder {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDateLastReminder(global::System.DateTime? value)
		        {
				    if(this.DateLastReminder!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DateLastReminder = value;
		            return this;
		        }	

				public global::System.String YourReference {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithYourReference(global::System.String value)
		        {
				    if(this.YourReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YourReference = value;
		            return this;
		        }	

				public global::System.String OurReference {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithOurReference(global::System.String value)
		        {
				    if(this.OurReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OurReference = value;
		            return this;
		        }	

				public global::System.String ReconciliationNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithReconciliationNumber(global::System.String value)
		        {
				    if(this.ReconciliationNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationNumber = value;
		            return this;
		        }	

				public global::System.DateTime? DueDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDueDate(global::System.DateTime? value)
		        {
				    if(this.DueDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DueDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AmountDueBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AmountDueBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class AmountDues : global::Allors.ObjectsBase<AmountDue>
	{
		public AmountDues(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaAmountDue Meta
		{
			get
			{
				return Allors.Meta.MetaAmountDue.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}