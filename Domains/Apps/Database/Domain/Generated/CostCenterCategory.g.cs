// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class CostCenterCategory : Allors.IObject , UniquelyIdentifiable
	{
		private readonly IStrategy strategy;

		public CostCenterCategory(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaCostCenterCategory Meta
		{
			get
			{
				return Allors.Meta.MetaCostCenterCategory.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static CostCenterCategory Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (CostCenterCategory) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public CostCenterCategory Parent
		{ 
			get
			{
				return (CostCenterCategory) Strategy.GetCompositeRole(Meta.Parent.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Parent.RelationType, value);
			}
		}

		virtual public bool ExistParent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Parent.RelationType);
			}
		}

		virtual public void RemoveParent()
		{
			Strategy.RemoveCompositeRole(Meta.Parent.RelationType);
		}


		virtual public global::Allors.Extent<CostCenterCategory> Ancestors
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Ancestors.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Ancestors.RelationType, value);
			}
		}

		virtual public void AddAncestor (CostCenterCategory value)
		{
			Strategy.AddCompositeRole(Meta.Ancestors.RelationType, value);
		}

		virtual public void RemoveAncestor (CostCenterCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.Ancestors.RelationType, value);
		}

		virtual public bool ExistAncestors
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Ancestors.RelationType);
			}
		}

		virtual public void RemoveAncestors()
		{
			Strategy.RemoveCompositeRoles(Meta.Ancestors.RelationType);
		}


		virtual public global::Allors.Extent<CostCenterCategory> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Children.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Children.RelationType, value);
			}
		}

		virtual public void AddChild (CostCenterCategory value)
		{
			Strategy.AddCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public void RemoveChild (CostCenterCategory value)
		{
			Strategy.RemoveCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Children.RelationType);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(Meta.Children.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public global::Allors.Extent<CostCenter> CostCentersWhereCostCenterCategory
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CostCentersWhereCostCenterCategory.RelationType);
			}
		}

		virtual public bool ExistCostCentersWhereCostCenterCategory
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CostCentersWhereCostCenterCategory.RelationType);
			}
		}


		virtual public global::Allors.Extent<CostCenterCategory> CostCenterCategoriesWhereParent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CostCenterCategoriesWhereParent.RelationType);
			}
		}

		virtual public bool ExistCostCenterCategoriesWhereParent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CostCenterCategoriesWhereParent.RelationType);
			}
		}


		virtual public global::Allors.Extent<CostCenterCategory> CostCenterCategoriesWhereAncestor
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CostCenterCategoriesWhereAncestor.RelationType);
			}
		}

		virtual public bool ExistCostCenterCategoriesWhereAncestor
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CostCenterCategoriesWhereAncestor.RelationType);
			}
		}


		virtual public global::Allors.Extent<CostCenterCategory> CostCenterCategoriesWhereChild
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CostCenterCategoriesWhereChild.RelationType);
			}
		}

		virtual public bool ExistCostCenterCategoriesWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CostCenterCategoriesWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CostCenterCategoryOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CostCenterCategoryOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CostCenterCategoryOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CostCenterCategoryOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CostCenterCategoryOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CostCenterCategoryOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CostCenterCategoryOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CostCenterCategoryOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CostCenterCategoryOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CostCenterCategoryOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class CostCenterCategoryBuilder : Allors.ObjectBuilder<CostCenterCategory> , UniquelyIdentifiableBuilder, global::System.IDisposable
	{		
		public CostCenterCategoryBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(CostCenterCategory instance)
		{

			instance.Description = this.Description;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Parent = this.Parent;

						
		}


				public CostCenterCategory Parent {get; set;}

				/// <exclude/>
				public CostCenterCategoryBuilder WithParent(CostCenterCategory value)
		        {
		            if(this.Parent!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Parent = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public CostCenterCategoryBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CostCenterCategoryBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class CostCenterCategories : global::Allors.ObjectsBase<CostCenterCategory>
	{
		public CostCenterCategories(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaCostCenterCategory Meta
		{
			get
			{
				return Allors.Meta.MetaCostCenterCategory.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}