// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Facility : Allors.IObject , GeoLocatable
	{
		private readonly IStrategy strategy;

		public Facility(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaFacility Meta
		{
			get
			{
				return Allors.Meta.MetaFacility.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Facility Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Facility) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public FacilityType FacilityType
		{ 
			get
			{
				return (FacilityType) Strategy.GetCompositeRole(Meta.FacilityType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.FacilityType.RelationType, value);
			}
		}

		virtual public bool ExistFacilityType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.FacilityType.RelationType);
			}
		}

		virtual public void RemoveFacilityType()
		{
			Strategy.RemoveCompositeRole(Meta.FacilityType.RelationType);
		}


		virtual public Facility MadeUpOf
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.MadeUpOf.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MadeUpOf.RelationType, value);
			}
		}

		virtual public bool ExistMadeUpOf
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MadeUpOf.RelationType);
			}
		}

		virtual public void RemoveMadeUpOf()
		{
			Strategy.RemoveCompositeRole(Meta.MadeUpOf.RelationType);
		}


		virtual public global::System.Decimal? SquareFootage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.SquareFootage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SquareFootage.RelationType, value);
			}
		}

		virtual public bool ExistSquareFootage{
			get
			{
				return Strategy.ExistUnitRole(Meta.SquareFootage.RelationType);
			}
		}

		virtual public void RemoveSquareFootage()
		{
			Strategy.RemoveUnitRole(Meta.SquareFootage.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::Allors.Extent<ContactMechanism> FacilityContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FacilityContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FacilityContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddFacilityContactMechanism (ContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.FacilityContactMechanisms.RelationType, value);
		}

		virtual public void RemoveFacilityContactMechanism (ContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.FacilityContactMechanisms.RelationType, value);
		}

		virtual public bool ExistFacilityContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FacilityContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveFacilityContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.FacilityContactMechanisms.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.Decimal Latitude 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Latitude.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Latitude.RelationType, value);
			}
		}

		virtual public bool ExistLatitude{
			get
			{
				return Strategy.ExistUnitRole(Meta.Latitude.RelationType);
			}
		}

		virtual public void RemoveLatitude()
		{
			Strategy.RemoveUnitRole(Meta.Latitude.RelationType);
		}


		virtual public global::System.Decimal Longitude 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Longitude.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Longitude.RelationType, value);
			}
		}

		virtual public bool ExistLongitude{
			get
			{
				return Strategy.ExistUnitRole(Meta.Longitude.RelationType);
			}
		}

		virtual public void RemoveLongitude()
		{
			Strategy.RemoveUnitRole(Meta.Longitude.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public global::Allors.Extent<Facility> FacilitiesWhereMadeUpOf
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.FacilitiesWhereMadeUpOf.RelationType);
			}
		}

		virtual public bool ExistFacilitiesWhereMadeUpOf
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.FacilitiesWhereMadeUpOf.RelationType);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereDefaultFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereDefaultFacility.RelationType);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereDefaultFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereDefaultFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> PurchaseOrderVersionsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrderVersionsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrderVersionsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrderVersionsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseShipmentVersion> PurchaseShipmentVersionsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseShipmentVersionsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistPurchaseShipmentVersionsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseShipmentVersionsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementVersion> RequirementVersionsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementVersionsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistRequirementVersionsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementVersionsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseOrder> PurchaseOrdersWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseOrdersWhereFacility.RelationType);
			}
		}

		virtual public bool ExistPurchaseOrdersWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseOrdersWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseShipment> PurchaseShipmentsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseShipmentsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistPurchaseShipmentsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseShipmentsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<Requirement> RequirementsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistRequirementsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereFromFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereFromFacility.RelationType);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereFromFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereFromFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereToFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereToFacility.RelationType);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereToFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereToFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<Store> StoresWhereDefaultFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoresWhereDefaultFacility.RelationType);
			}
		}

		virtual public bool ExistStoresWhereDefaultFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoresWhereDefaultFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortPartyAssignment> WorkEffortPartyAssignmentsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistWorkEffortPartyAssignmentsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortPartyAssignmentsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<InventoryItemVersion> InventoryItemVersionsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InventoryItemVersionsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistInventoryItemVersionsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InventoryItemVersionsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<InventoryItem> InventoryItemsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InventoryItemsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistInventoryItemsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InventoryItemsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereFacility
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereFacility.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereFacility
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereFacility.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FacilityOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FacilityOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FacilityOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FacilityOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FacilityOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FacilityOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FacilityOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FacilityOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FacilityOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FacilityOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class FacilityBuilder : Allors.ObjectBuilder<Facility> , GeoLocatableBuilder, global::System.IDisposable
	{		
		public FacilityBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Facility instance)
		{
			

			if(this.SquareFootage.HasValue)
			{
				instance.SquareFootage = this.SquareFootage.Value;
			}			
		
		

			instance.Description = this.Description;
		
		

			instance.Name = this.Name;
		
						
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.FacilityType = this.FacilityType;

		

			instance.MadeUpOf = this.MadeUpOf;

		
			if(this.FacilityContactMechanisms!=null)
			{
				instance.FacilityContactMechanisms = this.FacilityContactMechanisms.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public FacilityType FacilityType {get; set;}

				/// <exclude/>
				public FacilityBuilder WithFacilityType(FacilityType value)
		        {
		            if(this.FacilityType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.FacilityType = value;
		            return this;
		        }		

				
				public Facility MadeUpOf {get; set;}

				/// <exclude/>
				public FacilityBuilder WithMadeUpOf(Facility value)
		        {
		            if(this.MadeUpOf!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MadeUpOf = value;
		            return this;
		        }		

				
				public global::System.Decimal? SquareFootage {get; set;}

				/// <exclude/>
				public FacilityBuilder WithSquareFootage(global::System.Decimal? value)
		        {
				    if(this.SquareFootage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SquareFootage = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public FacilityBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ContactMechanism> FacilityContactMechanisms {get; set;}	

				/// <exclude/>
				public FacilityBuilder WithFacilityContactMechanism(ContactMechanism value)
		        {
					if(this.FacilityContactMechanisms == null)
					{
						this.FacilityContactMechanisms = new global::System.Collections.Generic.List<ContactMechanism>(); 
					}
		            this.FacilityContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public FacilityBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public FacilityBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public FacilityBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public FacilityBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Facilities : global::Allors.ObjectsBase<Facility>
	{
		public Facilities(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaFacility Meta
		{
			get
			{
				return Allors.Meta.MetaFacility.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}