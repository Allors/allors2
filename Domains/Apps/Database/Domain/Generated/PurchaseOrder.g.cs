// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PurchaseOrder : Allors.IObject , Order, Versioned
	{
		private readonly IStrategy strategy;

		public PurchaseOrder(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPurchaseOrder Meta
		{
			get
			{
				return Allors.Meta.MetaPurchaseOrder.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PurchaseOrder Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PurchaseOrder) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public PurchaseOrderState PreviousPurchaseOrderState
		{ 
			get
			{
				return (PurchaseOrderState) Strategy.GetCompositeRole(Meta.PreviousPurchaseOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPurchaseOrderState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPurchaseOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPurchaseOrderState.RelationType);
			}
		}

		virtual public void RemovePreviousPurchaseOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPurchaseOrderState.RelationType);
		}


		virtual public PurchaseOrderState LastPurchaseOrderState
		{ 
			get
			{
				return (PurchaseOrderState) Strategy.GetCompositeRole(Meta.LastPurchaseOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPurchaseOrderState.RelationType, value);
			}
		}

		virtual public bool ExistLastPurchaseOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPurchaseOrderState.RelationType);
			}
		}

		virtual public void RemoveLastPurchaseOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPurchaseOrderState.RelationType);
		}


		virtual public PurchaseOrderState PurchaseOrderState
		{ 
			get
			{
				return (PurchaseOrderState) Strategy.GetCompositeRole(Meta.PurchaseOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderState.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderState.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderState.RelationType);
		}


		virtual public PurchaseOrderPaymentState PreviousPurchaseOrderPaymentState
		{ 
			get
			{
				return (PurchaseOrderPaymentState) Strategy.GetCompositeRole(Meta.PreviousPurchaseOrderPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPurchaseOrderPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPurchaseOrderPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPurchaseOrderPaymentState.RelationType);
			}
		}

		virtual public void RemovePreviousPurchaseOrderPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPurchaseOrderPaymentState.RelationType);
		}


		virtual public PurchaseOrderPaymentState LastPurchaseOrderPaymentState
		{ 
			get
			{
				return (PurchaseOrderPaymentState) Strategy.GetCompositeRole(Meta.LastPurchaseOrderPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPurchaseOrderPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistLastPurchaseOrderPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPurchaseOrderPaymentState.RelationType);
			}
		}

		virtual public void RemoveLastPurchaseOrderPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPurchaseOrderPaymentState.RelationType);
		}


		virtual public PurchaseOrderPaymentState PurchaseOrderPaymentState
		{ 
			get
			{
				return (PurchaseOrderPaymentState) Strategy.GetCompositeRole(Meta.PurchaseOrderPaymentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderPaymentState.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderPaymentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderPaymentState.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderPaymentState()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderPaymentState.RelationType);
		}


		virtual public PurchaseOrderShipmentState PreviousPurchaseOrderShipmentOrderState
		{ 
			get
			{
				return (PurchaseOrderShipmentState) Strategy.GetCompositeRole(Meta.PreviousPurchaseOrderShipmentOrderState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPurchaseOrderShipmentOrderState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPurchaseOrderShipmentOrderState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPurchaseOrderShipmentOrderState.RelationType);
			}
		}

		virtual public void RemovePreviousPurchaseOrderShipmentOrderState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPurchaseOrderShipmentOrderState.RelationType);
		}


		virtual public PurchaseOrderShipmentState LastPurchaseOrderShipmentState
		{ 
			get
			{
				return (PurchaseOrderShipmentState) Strategy.GetCompositeRole(Meta.LastPurchaseOrderShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPurchaseOrderShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistLastPurchaseOrderShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPurchaseOrderShipmentState.RelationType);
			}
		}

		virtual public void RemoveLastPurchaseOrderShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPurchaseOrderShipmentState.RelationType);
		}


		virtual public PurchaseOrderShipmentState PurchaseOrderShipmentState
		{ 
			get
			{
				return (PurchaseOrderShipmentState) Strategy.GetCompositeRole(Meta.PurchaseOrderShipmentState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderShipmentState.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderShipmentState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderShipmentState.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderShipmentState()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderShipmentState.RelationType);
		}


		virtual public PurchaseOrderVersion CurrentVersion
		{ 
			get
			{
				return (PurchaseOrderVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PurchaseOrderVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PurchaseOrderVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PurchaseOrderVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::Allors.Extent<PurchaseOrderItem> PurchaseOrderItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PurchaseOrderItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PurchaseOrderItems.RelationType, value);
			}
		}

		virtual public void AddPurchaseOrderItem (PurchaseOrderItem value)
		{
			Strategy.AddCompositeRole(Meta.PurchaseOrderItems.RelationType, value);
		}

		virtual public void RemovePurchaseOrderItem (PurchaseOrderItem value)
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderItems.RelationType, value);
		}

		virtual public bool ExistPurchaseOrderItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PurchaseOrderItems.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderItems()
		{
			Strategy.RemoveCompositeRoles(Meta.PurchaseOrderItems.RelationType);
		}


		virtual public Party PreviousTakenViaSupplier
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.PreviousTakenViaSupplier.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousTakenViaSupplier.RelationType, value);
			}
		}

		virtual public bool ExistPreviousTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousTakenViaSupplier.RelationType);
			}
		}

		virtual public void RemovePreviousTakenViaSupplier()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousTakenViaSupplier.RelationType);
		}


		virtual public Party TakenViaSupplier
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.TakenViaSupplier.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaSupplier.RelationType, value);
			}
		}

		virtual public bool ExistTakenViaSupplier
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaSupplier.RelationType);
			}
		}

		virtual public void RemoveTakenViaSupplier()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaSupplier.RelationType);
		}


		virtual public ContactMechanism TakenViaContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.TakenViaContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistTakenViaContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaContactMechanism.RelationType);
			}
		}

		virtual public void RemoveTakenViaContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaContactMechanism.RelationType);
		}


		virtual public ContactMechanism BillToContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToContactMechanism.RelationType, value);
			}
		}

		virtual public bool ExistBillToContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToContactMechanism.RelationType);
			}
		}

		virtual public void RemoveBillToContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.BillToContactMechanism.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public PostalAddress ShipToAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShipToAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToAddress.RelationType, value);
			}
		}

		virtual public bool ExistShipToAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToAddress.RelationType);
			}
		}

		virtual public void RemoveShipToAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToAddress.RelationType);
		}


		virtual public global::System.String InternalComment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InternalComment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InternalComment.RelationType, value);
			}
		}

		virtual public bool ExistInternalComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.InternalComment.RelationType);
			}
		}

		virtual public void RemoveInternalComment()
		{
			Strategy.RemoveUnitRole(Meta.InternalComment.RelationType);
		}


		virtual public Currency CustomerCurrency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.CustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistCustomerCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveCustomerCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.CustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalBasePriceCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePriceCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalBasePriceCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePriceCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalIncVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalIncVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVatCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalDiscountCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscountCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalDiscountCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscountCustomerCurrency.RelationType);
		}


		virtual public global::System.String CustomerReference 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.CustomerReference.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CustomerReference.RelationType, value);
			}
		}

		virtual public bool ExistCustomerReference{
			get
			{
				return Strategy.ExistUnitRole(Meta.CustomerReference.RelationType);
			}
		}

		virtual public void RemoveCustomerReference()
		{
			Strategy.RemoveUnitRole(Meta.CustomerReference.RelationType);
		}


		virtual public Fee Fee
		{ 
			get
			{
				return (Fee) Strategy.GetCompositeRole(Meta.Fee.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Fee.RelationType, value);
			}
		}

		virtual public bool ExistFee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Fee.RelationType);
			}
		}

		virtual public void RemoveFee()
		{
			Strategy.RemoveCompositeRole(Meta.Fee.RelationType);
		}


		virtual public global::System.Decimal TotalExVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVat.RelationType);
			}
		}

		virtual public void RemoveTotalExVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVat.RelationType);
		}


		virtual public global::Allors.Extent<OrderTerm> OrderTerms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OrderTerms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OrderTerms.RelationType, value);
			}
		}

		virtual public void AddOrderTerm (OrderTerm value)
		{
			Strategy.AddCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public void RemoveOrderTerm (OrderTerm value)
		{
			Strategy.RemoveCompositeRole(Meta.OrderTerms.RelationType, value);
		}

		virtual public bool ExistOrderTerms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OrderTerms.RelationType);
			}
		}

		virtual public void RemoveOrderTerms()
		{
			Strategy.RemoveCompositeRoles(Meta.OrderTerms.RelationType);
		}


		virtual public global::System.Decimal TotalVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVat.RelationType);
			}
		}

		virtual public void RemoveTotalVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalVat.RelationType);
		}


		virtual public global::System.Decimal TotalSurcharge 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurcharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurcharge.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurcharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurcharge.RelationType);
			}
		}

		virtual public void RemoveTotalSurcharge()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurcharge.RelationType);
		}


		virtual public global::Allors.Extent<OrderItem> ValidOrderItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ValidOrderItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ValidOrderItems.RelationType, value);
			}
		}

		virtual public void AddValidOrderItem (OrderItem value)
		{
			Strategy.AddCompositeRole(Meta.ValidOrderItems.RelationType, value);
		}

		virtual public void RemoveValidOrderItem (OrderItem value)
		{
			Strategy.RemoveCompositeRole(Meta.ValidOrderItems.RelationType, value);
		}

		virtual public bool ExistValidOrderItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ValidOrderItems.RelationType);
			}
		}

		virtual public void RemoveValidOrderItems()
		{
			Strategy.RemoveCompositeRoles(Meta.ValidOrderItems.RelationType);
		}


		virtual public global::System.String OrderNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.OrderNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OrderNumber.RelationType, value);
			}
		}

		virtual public bool ExistOrderNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.OrderNumber.RelationType);
			}
		}

		virtual public void RemoveOrderNumber()
		{
			Strategy.RemoveUnitRole(Meta.OrderNumber.RelationType);
		}


		virtual public global::System.Decimal TotalVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalVatCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalDiscount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalDiscount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalDiscount.RelationType, value);
			}
		}

		virtual public bool ExistTotalDiscount{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalDiscount.RelationType);
			}
		}

		virtual public void RemoveTotalDiscount()
		{
			Strategy.RemoveUnitRole(Meta.TotalDiscount.RelationType);
		}


		virtual public global::System.String Message 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Message.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Message.RelationType, value);
			}
		}

		virtual public bool ExistMessage{
			get
			{
				return Strategy.ExistUnitRole(Meta.Message.RelationType);
			}
		}

		virtual public void RemoveMessage()
		{
			Strategy.RemoveUnitRole(Meta.Message.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Decimal TotalShippingAndHandlingCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalShippingAndHandlingCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalShippingAndHandlingCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalShippingAndHandlingCustomerCurrency.RelationType);
		}


		virtual public global::System.DateTime EntryDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.EntryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EntryDate.RelationType, value);
			}
		}

		virtual public bool ExistEntryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EntryDate.RelationType);
			}
		}

		virtual public void RemoveEntryDate()
		{
			Strategy.RemoveUnitRole(Meta.EntryDate.RelationType);
		}


		virtual public DiscountAdjustment DiscountAdjustment
		{ 
			get
			{
				return (DiscountAdjustment) Strategy.GetCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DiscountAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistDiscountAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DiscountAdjustment.RelationType);
			}
		}

		virtual public void RemoveDiscountAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.DiscountAdjustment.RelationType);
		}


		virtual public OrderKind OrderKind
		{ 
			get
			{
				return (OrderKind) Strategy.GetCompositeRole(Meta.OrderKind.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderKind.RelationType, value);
			}
		}

		virtual public bool ExistOrderKind
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderKind.RelationType);
			}
		}

		virtual public void RemoveOrderKind()
		{
			Strategy.RemoveCompositeRole(Meta.OrderKind.RelationType);
		}


		virtual public global::System.Decimal TotalIncVat 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalIncVat.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalIncVat.RelationType, value);
			}
		}

		virtual public bool ExistTotalIncVat{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalIncVat.RelationType);
			}
		}

		virtual public void RemoveTotalIncVat()
		{
			Strategy.RemoveUnitRole(Meta.TotalIncVat.RelationType);
		}


		virtual public global::System.Decimal TotalSurchargeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalSurchargeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalSurchargeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalSurchargeCustomerCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal TotalFeeCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalFeeCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalFeeCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalFeeCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalFeeCustomerCurrency.RelationType);
		}


		virtual public global::System.Decimal TotalShippingAndHandling 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalShippingAndHandling.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalShippingAndHandling.RelationType, value);
			}
		}

		virtual public bool ExistTotalShippingAndHandling{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalShippingAndHandling.RelationType);
			}
		}

		virtual public void RemoveTotalShippingAndHandling()
		{
			Strategy.RemoveUnitRole(Meta.TotalShippingAndHandling.RelationType);
		}


		virtual public ShippingAndHandlingCharge ShippingAndHandlingCharge
		{ 
			get
			{
				return (ShippingAndHandlingCharge) Strategy.GetCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAndHandlingCharge.RelationType, value);
			}
		}

		virtual public bool ExistShippingAndHandlingCharge
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
			}
		}

		virtual public void RemoveShippingAndHandlingCharge()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAndHandlingCharge.RelationType);
		}


		virtual public global::System.DateTime OrderDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.OrderDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OrderDate.RelationType, value);
			}
		}

		virtual public bool ExistOrderDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.OrderDate.RelationType);
			}
		}

		virtual public void RemoveOrderDate()
		{
			Strategy.RemoveUnitRole(Meta.OrderDate.RelationType);
		}


		virtual public global::System.Decimal TotalExVatCustomerCurrency 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalExVatCustomerCurrency.RelationType, value);
			}
		}

		virtual public bool ExistTotalExVatCustomerCurrency{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
			}
		}

		virtual public void RemoveTotalExVatCustomerCurrency()
		{
			Strategy.RemoveUnitRole(Meta.TotalExVatCustomerCurrency.RelationType);
		}


		virtual public global::System.DateTime? DeliveryDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DeliveryDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeliveryDate.RelationType, value);
			}
		}

		virtual public bool ExistDeliveryDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeliveryDate.RelationType);
			}
		}

		virtual public void RemoveDeliveryDate()
		{
			Strategy.RemoveUnitRole(Meta.DeliveryDate.RelationType);
		}


		virtual public global::System.Decimal TotalBasePrice 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalBasePrice.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalBasePrice.RelationType, value);
			}
		}

		virtual public bool ExistTotalBasePrice{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalBasePrice.RelationType);
			}
		}

		virtual public void RemoveTotalBasePrice()
		{
			Strategy.RemoveUnitRole(Meta.TotalBasePrice.RelationType);
		}


		virtual public global::System.Decimal TotalFee 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.TotalFee.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TotalFee.RelationType, value);
			}
		}

		virtual public bool ExistTotalFee{
			get
			{
				return Strategy.ExistUnitRole(Meta.TotalFee.RelationType);
			}
		}

		virtual public void RemoveTotalFee()
		{
			Strategy.RemoveUnitRole(Meta.TotalFee.RelationType);
		}


		virtual public SurchargeAdjustment SurchargeAdjustment
		{ 
			get
			{
				return (SurchargeAdjustment) Strategy.GetCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SurchargeAdjustment.RelationType, value);
			}
		}

		virtual public bool ExistSurchargeAdjustment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SurchargeAdjustment.RelationType);
			}
		}

		virtual public void RemoveSurchargeAdjustment()
		{
			Strategy.RemoveCompositeRole(Meta.SurchargeAdjustment.RelationType);
		}


		virtual public Person ContactPerson
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.ContactPerson.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactPerson.RelationType, value);
			}
		}

		virtual public bool ExistContactPerson
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactPerson.RelationType);
			}
		}

		virtual public void RemoveContactPerson()
		{
			Strategy.RemoveCompositeRole(Meta.ContactPerson.RelationType);
		}


		virtual public global::System.String PrintContent 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PrintContent.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PrintContent.RelationType, value);
			}
		}

		virtual public bool ExistPrintContent{
			get
			{
				return Strategy.ExistUnitRole(Meta.PrintContent.RelationType);
			}
		}

		virtual public void RemovePrintContent()
		{
			Strategy.RemoveUnitRole(Meta.PrintContent.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale.RelationType, value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale.RelationType);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}



		virtual public global::Allors.Extent<PurchaseShipmentVersion> PurchaseShipmentVersionsWherePurchaseOrder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseShipmentVersionsWherePurchaseOrder.RelationType);
			}
		}

		virtual public bool ExistPurchaseShipmentVersionsWherePurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseShipmentVersionsWherePurchaseOrder.RelationType);
			}
		}


		virtual public global::Allors.Extent<PurchaseShipment> PurchaseShipmentsWherePurchaseOrder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PurchaseShipmentsWherePurchaseOrder.RelationType);
			}
		}

		virtual public bool ExistPurchaseShipmentsWherePurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PurchaseShipmentsWherePurchaseOrder.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItemVersion> OrderItemVersionsWhereCorrespondingPurchaseOrder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemVersionsWhereCorrespondingPurchaseOrder.RelationType);
			}
		}

		virtual public bool ExistOrderItemVersionsWhereCorrespondingPurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemVersionsWhereCorrespondingPurchaseOrder.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderItem> OrderItemsWhereCorrespondingPurchaseOrder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemsWhereCorrespondingPurchaseOrder.RelationType);
			}
		}

		virtual public bool ExistOrderItemsWhereCorrespondingPurchaseOrder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemsWhereCorrespondingPurchaseOrder.RelationType);
			}
		}



		public OrderApprove Approve()
		{ 
			var method = new PurchaseOrderApprove(this);
            method.Execute();
            return method;
		}

		public OrderApprove Approve(System.Action<OrderApprove> action)
		{ 
			var method = new PurchaseOrderApprove(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderReject Reject()
		{ 
			var method = new PurchaseOrderReject(this);
            method.Execute();
            return method;
		}

		public OrderReject Reject(System.Action<OrderReject> action)
		{ 
			var method = new PurchaseOrderReject(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderHold Hold()
		{ 
			var method = new PurchaseOrderHold(this);
            method.Execute();
            return method;
		}

		public OrderHold Hold(System.Action<OrderHold> action)
		{ 
			var method = new PurchaseOrderHold(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderContinue Continue()
		{ 
			var method = new PurchaseOrderContinue(this);
            method.Execute();
            return method;
		}

		public OrderContinue Continue(System.Action<OrderContinue> action)
		{ 
			var method = new PurchaseOrderContinue(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderConfirm Confirm()
		{ 
			var method = new PurchaseOrderConfirm(this);
            method.Execute();
            return method;
		}

		public OrderConfirm Confirm(System.Action<OrderConfirm> action)
		{ 
			var method = new PurchaseOrderConfirm(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderCancel Cancel()
		{ 
			var method = new PurchaseOrderCancel(this);
            method.Execute();
            return method;
		}

		public OrderCancel Cancel(System.Action<OrderCancel> action)
		{ 
			var method = new PurchaseOrderCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public OrderComplete Complete()
		{ 
			var method = new PurchaseOrderComplete(this);
            method.Execute();
            return method;
		}

		public OrderComplete Complete(System.Action<OrderComplete> action)
		{ 
			var method = new PurchaseOrderComplete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PurchaseOrderOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PurchaseOrderOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PurchaseOrderOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PurchaseOrderOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PurchaseOrderOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PurchaseOrderOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PurchaseOrderOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PurchaseOrderOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PurchaseOrderOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PurchaseOrderOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PurchaseOrderBuilder : Allors.ObjectBuilder<PurchaseOrder> , OrderBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PurchaseOrderBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PurchaseOrder instance)
		{

			instance.InternalComment = this.InternalComment;
		
								

			instance.CustomerReference = this.CustomerReference;
		
														

			instance.Message = this.Message;
		
		

			instance.Description = this.Description;
		
														
			

			if(this.OrderDate.HasValue)
			{
				instance.OrderDate = this.OrderDate.Value;
			}			
		
				
			

			if(this.DeliveryDate.HasValue)
			{
				instance.DeliveryDate = this.DeliveryDate.Value;
			}			
		
						

			instance.PrintContent = this.PrintContent;
		
		

			instance.Comment = this.Comment;
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
				

			instance.PurchaseOrderState = this.PurchaseOrderState;

						

			instance.PurchaseOrderPaymentState = this.PurchaseOrderPaymentState;

						

			instance.PurchaseOrderShipmentState = this.PurchaseOrderShipmentState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		
			if(this.PurchaseOrderItems!=null)
			{
				instance.PurchaseOrderItems = this.PurchaseOrderItems.ToArray();
			}
				

			instance.TakenViaSupplier = this.TakenViaSupplier;

		

			instance.TakenViaContactMechanism = this.TakenViaContactMechanism;

		

			instance.BillToContactMechanism = this.BillToContactMechanism;

		

			instance.Facility = this.Facility;

		

			instance.ShipToAddress = this.ShipToAddress;

				

			instance.Fee = this.Fee;

		
			if(this.OrderTerms!=null)
			{
				instance.OrderTerms = this.OrderTerms.ToArray();
			}
				

			instance.DiscountAdjustment = this.DiscountAdjustment;

		

			instance.OrderKind = this.OrderKind;

		

			instance.VatRegime = this.VatRegime;

		

			instance.ShippingAndHandlingCharge = this.ShippingAndHandlingCharge;

		

			instance.SurchargeAdjustment = this.SurchargeAdjustment;

		

			instance.ContactPerson = this.ContactPerson;

		

			instance.Locale = this.Locale;

		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
								
		}


				public PurchaseOrderState PurchaseOrderState {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithPurchaseOrderState(PurchaseOrderState value)
		        {
		            if(this.PurchaseOrderState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseOrderState = value;
		            return this;
		        }		

				
				public PurchaseOrderPaymentState PurchaseOrderPaymentState {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithPurchaseOrderPaymentState(PurchaseOrderPaymentState value)
		        {
		            if(this.PurchaseOrderPaymentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseOrderPaymentState = value;
		            return this;
		        }		

				
				public PurchaseOrderShipmentState PurchaseOrderShipmentState {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithPurchaseOrderShipmentState(PurchaseOrderShipmentState value)
		        {
		            if(this.PurchaseOrderShipmentState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseOrderShipmentState = value;
		            return this;
		        }		

				
				public PurchaseOrderVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithCurrentVersion(PurchaseOrderVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PurchaseOrderVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PurchaseOrderBuilder WithAllVersion(PurchaseOrderVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PurchaseOrderVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PurchaseOrderItem> PurchaseOrderItems {get; set;}	

				/// <exclude/>
				public PurchaseOrderBuilder WithPurchaseOrderItem(PurchaseOrderItem value)
		        {
					if(this.PurchaseOrderItems == null)
					{
						this.PurchaseOrderItems = new global::System.Collections.Generic.List<PurchaseOrderItem>(); 
					}
		            this.PurchaseOrderItems.Add(value);
		            return this;
		        }		

				
				public Party TakenViaSupplier {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithTakenViaSupplier(Party value)
		        {
		            if(this.TakenViaSupplier!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaSupplier = value;
		            return this;
		        }		

				
				public ContactMechanism TakenViaContactMechanism {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithTakenViaContactMechanism(ContactMechanism value)
		        {
		            if(this.TakenViaContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaContactMechanism = value;
		            return this;
		        }		

				
				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public PostalAddress ShipToAddress {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithShipToAddress(PostalAddress value)
		        {
		            if(this.ShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToAddress = value;
		            return this;
		        }		

				
				public global::System.String InternalComment {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithInternalComment(global::System.String value)
		        {
				    if(this.InternalComment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InternalComment = value;
		            return this;
		        }	

				public global::System.String CustomerReference {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithCustomerReference(global::System.String value)
		        {
				    if(this.CustomerReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CustomerReference = value;
		            return this;
		        }	

				public Fee Fee {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithFee(Fee value)
		        {
		            if(this.Fee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Fee = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<OrderTerm> OrderTerms {get; set;}	

				/// <exclude/>
				public PurchaseOrderBuilder WithOrderTerm(OrderTerm value)
		        {
					if(this.OrderTerms == null)
					{
						this.OrderTerms = new global::System.Collections.Generic.List<OrderTerm>(); 
					}
		            this.OrderTerms.Add(value);
		            return this;
		        }		

				
				public global::System.String Message {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public OrderKind OrderKind {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithOrderKind(OrderKind value)
		        {
		            if(this.OrderKind!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderKind = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public ShippingAndHandlingCharge ShippingAndHandlingCharge {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithShippingAndHandlingCharge(ShippingAndHandlingCharge value)
		        {
		            if(this.ShippingAndHandlingCharge!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAndHandlingCharge = value;
		            return this;
		        }		

				
				public global::System.DateTime? OrderDate {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithOrderDate(global::System.DateTime? value)
		        {
				    if(this.OrderDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OrderDate = value;
		            return this;
		        }	

				public global::System.DateTime? DeliveryDate {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.DeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeliveryDate = value;
		            return this;
		        }	

				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public Person ContactPerson {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithContactPerson(Person value)
		        {
		            if(this.ContactPerson!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ContactPerson = value;
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public Locale Locale {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public User CreatedBy {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public PurchaseOrderBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PurchaseOrderBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PurchaseOrderBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PurchaseOrders : global::Allors.ObjectsBase<PurchaseOrder>
	{
		public PurchaseOrders(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPurchaseOrder Meta
		{
			get
			{
				return Allors.Meta.MetaPurchaseOrder.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}