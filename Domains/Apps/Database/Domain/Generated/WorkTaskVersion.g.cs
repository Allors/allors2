// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class WorkTaskVersion : Allors.IObject , WorkEffortVersion
	{
		private readonly IStrategy strategy;

		public WorkTaskVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaWorkTaskVersion Meta
		{
			get
			{
				return Allors.Meta.MetaWorkTaskVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static WorkTaskVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (WorkTaskVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Boolean? SendNotification 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendNotification.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendNotification.RelationType, value);
			}
		}

		virtual public bool ExistSendNotification{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendNotification.RelationType);
			}
		}

		virtual public void RemoveSendNotification()
		{
			Strategy.RemoveUnitRole(Meta.SendNotification.RelationType);
		}


		virtual public global::System.Boolean? SendReminder 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.SendReminder.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendReminder.RelationType, value);
			}
		}

		virtual public bool ExistSendReminder{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendReminder.RelationType);
			}
		}

		virtual public void RemoveSendReminder()
		{
			Strategy.RemoveUnitRole(Meta.SendReminder.RelationType);
		}


		virtual public global::System.DateTime? RemindAt 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RemindAt.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RemindAt.RelationType, value);
			}
		}

		virtual public bool ExistRemindAt{
			get
			{
				return Strategy.ExistUnitRole(Meta.RemindAt.RelationType);
			}
		}

		virtual public void RemoveRemindAt()
		{
			Strategy.RemoveUnitRole(Meta.RemindAt.RelationType);
		}


		virtual public WorkEffortState WorkEffortState
		{ 
			get
			{
				return (WorkEffortState) Strategy.GetCompositeRole(Meta.WorkEffortState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffortState.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffortState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffortState.RelationType);
			}
		}

		virtual public void RemoveWorkEffortState()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortState.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public Priority Priority
		{ 
			get
			{
				return (Priority) Strategy.GetCompositeRole(Meta.Priority.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Priority.RelationType, value);
			}
		}

		virtual public bool ExistPriority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Priority.RelationType);
			}
		}

		virtual public void RemovePriority()
		{
			Strategy.RemoveCompositeRole(Meta.Priority.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffortPurpose> WorkEffortPurposes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.WorkEffortPurposes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.WorkEffortPurposes.RelationType, value);
			}
		}

		virtual public void AddWorkEffortPurpose (WorkEffortPurpose value)
		{
			Strategy.AddCompositeRole(Meta.WorkEffortPurposes.RelationType, value);
		}

		virtual public void RemoveWorkEffortPurpose (WorkEffortPurpose value)
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortPurposes.RelationType, value);
		}

		virtual public bool ExistWorkEffortPurposes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.WorkEffortPurposes.RelationType);
			}
		}

		virtual public void RemoveWorkEffortPurposes()
		{
			Strategy.RemoveCompositeRoles(Meta.WorkEffortPurposes.RelationType);
		}


		virtual public global::System.DateTime? ActualCompletion 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualCompletion.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualCompletion.RelationType, value);
			}
		}

		virtual public bool ExistActualCompletion{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualCompletion.RelationType);
			}
		}

		virtual public void RemoveActualCompletion()
		{
			Strategy.RemoveUnitRole(Meta.ActualCompletion.RelationType);
		}


		virtual public global::System.DateTime? ScheduledStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledStart.RelationType, value);
			}
		}

		virtual public bool ExistScheduledStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledStart.RelationType);
			}
		}

		virtual public void RemoveScheduledStart()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledStart.RelationType);
		}


		virtual public global::System.DateTime? ScheduledCompletion 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ScheduledCompletion.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ScheduledCompletion.RelationType, value);
			}
		}

		virtual public bool ExistScheduledCompletion{
			get
			{
				return Strategy.ExistUnitRole(Meta.ScheduledCompletion.RelationType);
			}
		}

		virtual public void RemoveScheduledCompletion()
		{
			Strategy.RemoveUnitRole(Meta.ScheduledCompletion.RelationType);
		}


		virtual public global::System.Decimal? ActualHours 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ActualHours.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualHours.RelationType, value);
			}
		}

		virtual public bool ExistActualHours{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualHours.RelationType);
			}
		}

		virtual public void RemoveActualHours()
		{
			Strategy.RemoveUnitRole(Meta.ActualHours.RelationType);
		}


		virtual public global::System.Decimal? EstimatedHours 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedHours.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedHours.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedHours{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedHours.RelationType);
			}
		}

		virtual public void RemoveEstimatedHours()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedHours.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Precendencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Precendencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Precendencies.RelationType, value);
			}
		}

		virtual public void AddPrecendency (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Precendencies.RelationType, value);
		}

		virtual public void RemovePrecendency (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Precendencies.RelationType, value);
		}

		virtual public bool ExistPrecendencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Precendencies.RelationType);
			}
		}

		virtual public void RemovePrecendencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Precendencies.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public global::Allors.Extent<Deliverable> DeliverablesProduced
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeliverablesProduced.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeliverablesProduced.RelationType, value);
			}
		}

		virtual public void AddDeliverablesProduced (Deliverable value)
		{
			Strategy.AddCompositeRole(Meta.DeliverablesProduced.RelationType, value);
		}

		virtual public void RemoveDeliverablesProduced (Deliverable value)
		{
			Strategy.RemoveCompositeRole(Meta.DeliverablesProduced.RelationType, value);
		}

		virtual public bool ExistDeliverablesProduced
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeliverablesProduced.RelationType);
			}
		}

		virtual public void RemoveDeliverablesProduced()
		{
			Strategy.RemoveCompositeRoles(Meta.DeliverablesProduced.RelationType);
		}


		virtual public global::System.DateTime? ActualStart 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ActualStart.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualStart.RelationType, value);
			}
		}

		virtual public bool ExistActualStart{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualStart.RelationType);
			}
		}

		virtual public void RemoveActualStart()
		{
			Strategy.RemoveUnitRole(Meta.ActualStart.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffortInventoryAssignment> InventoryItemsNeeded
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItemsNeeded.RelationType, value);
			}
		}

		virtual public void AddInventoryItemsNeeded (WorkEffortInventoryAssignment value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItemsNeeded.RelationType, value);
		}

		virtual public void RemoveInventoryItemsNeeded (WorkEffortInventoryAssignment value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItemsNeeded.RelationType, value);
		}

		virtual public bool ExistInventoryItemsNeeded
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
			}
		}

		virtual public void RemoveInventoryItemsNeeded()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItemsNeeded.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Children.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Children.RelationType, value);
			}
		}

		virtual public void AddChild (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public void RemoveChild (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Children.RelationType);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(Meta.Children.RelationType);
		}


		virtual public OrderItem OrderItemFulfillment
		{ 
			get
			{
				return (OrderItem) Strategy.GetCompositeRole(Meta.OrderItemFulfillment.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderItemFulfillment.RelationType, value);
			}
		}

		virtual public bool ExistOrderItemFulfillment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderItemFulfillment.RelationType);
			}
		}

		virtual public void RemoveOrderItemFulfillment()
		{
			Strategy.RemoveCompositeRole(Meta.OrderItemFulfillment.RelationType);
		}


		virtual public WorkEffortType WorkEffortType
		{ 
			get
			{
				return (WorkEffortType) Strategy.GetCompositeRole(Meta.WorkEffortType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffortType.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffortType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffortType.RelationType);
			}
		}

		virtual public void RemoveWorkEffortType()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffortType.RelationType);
		}


		virtual public global::Allors.Extent<InventoryItem> InventoryItemsProduced
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InventoryItemsProduced.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InventoryItemsProduced.RelationType, value);
			}
		}

		virtual public void AddInventoryItemsProduced (InventoryItem value)
		{
			Strategy.AddCompositeRole(Meta.InventoryItemsProduced.RelationType, value);
		}

		virtual public void RemoveInventoryItemsProduced (InventoryItem value)
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItemsProduced.RelationType, value);
		}

		virtual public bool ExistInventoryItemsProduced
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InventoryItemsProduced.RelationType);
			}
		}

		virtual public void RemoveInventoryItemsProduced()
		{
			Strategy.RemoveCompositeRoles(Meta.InventoryItemsProduced.RelationType);
		}


		virtual public global::Allors.Extent<Requirement> RequirementFulfillments
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.RequirementFulfillments.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.RequirementFulfillments.RelationType, value);
			}
		}

		virtual public void AddRequirementFulfillment (Requirement value)
		{
			Strategy.AddCompositeRole(Meta.RequirementFulfillments.RelationType, value);
		}

		virtual public void RemoveRequirementFulfillment (Requirement value)
		{
			Strategy.RemoveCompositeRole(Meta.RequirementFulfillments.RelationType, value);
		}

		virtual public bool ExistRequirementFulfillments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.RequirementFulfillments.RelationType);
			}
		}

		virtual public void RemoveRequirementFulfillments()
		{
			Strategy.RemoveCompositeRoles(Meta.RequirementFulfillments.RelationType);
		}


		virtual public global::System.String SpecialTerms 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SpecialTerms.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SpecialTerms.RelationType, value);
			}
		}

		virtual public bool ExistSpecialTerms{
			get
			{
				return Strategy.ExistUnitRole(Meta.SpecialTerms.RelationType);
			}
		}

		virtual public void RemoveSpecialTerms()
		{
			Strategy.RemoveUnitRole(Meta.SpecialTerms.RelationType);
		}


		virtual public global::Allors.Extent<WorkEffort> Concurrencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Concurrencies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Concurrencies.RelationType, value);
			}
		}

		virtual public void AddConcurrency (WorkEffort value)
		{
			Strategy.AddCompositeRole(Meta.Concurrencies.RelationType, value);
		}

		virtual public void RemoveConcurrency (WorkEffort value)
		{
			Strategy.RemoveCompositeRole(Meta.Concurrencies.RelationType, value);
		}

		virtual public bool ExistConcurrencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Concurrencies.RelationType);
			}
		}

		virtual public void RemoveConcurrencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Concurrencies.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public WorkTask WorkTaskWhereCurrentVersion
		{ 
			get
			{
				return (WorkTask) Strategy.GetCompositeAssociation(Meta.WorkTaskWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistWorkTaskWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.WorkTaskWhereCurrentVersion.RelationType);
			}
		}


		virtual public WorkTask WorkTaskWhereAllVersion
		{ 
			get
			{
				return (WorkTask) Strategy.GetCompositeAssociation(Meta.WorkTaskWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistWorkTaskWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.WorkTaskWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new WorkTaskVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new WorkTaskVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new WorkTaskVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new WorkTaskVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new WorkTaskVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new WorkTaskVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new WorkTaskVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new WorkTaskVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new WorkTaskVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new WorkTaskVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class WorkTaskVersionBuilder : Allors.ObjectBuilder<WorkTaskVersion> , WorkEffortVersionBuilder, global::System.IDisposable
	{		
		public WorkTaskVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(WorkTaskVersion instance)
		{
			

			if(this.SendNotification.HasValue)
			{
				instance.SendNotification = this.SendNotification.Value;
			}			
		
		
			

			if(this.SendReminder.HasValue)
			{
				instance.SendReminder = this.SendReminder.Value;
			}			
		
		
			

			if(this.RemindAt.HasValue)
			{
				instance.RemindAt = this.RemindAt.Value;
			}			
		
		

			instance.Name = this.Name;
		
		

			instance.Description = this.Description;
		
		
			

			if(this.ActualCompletion.HasValue)
			{
				instance.ActualCompletion = this.ActualCompletion.Value;
			}			
		
		
			

			if(this.ScheduledStart.HasValue)
			{
				instance.ScheduledStart = this.ScheduledStart.Value;
			}			
		
		
			

			if(this.ScheduledCompletion.HasValue)
			{
				instance.ScheduledCompletion = this.ScheduledCompletion.Value;
			}			
		
		
			

			if(this.ActualHours.HasValue)
			{
				instance.ActualHours = this.ActualHours.Value;
			}			
		
		
			

			if(this.EstimatedHours.HasValue)
			{
				instance.EstimatedHours = this.EstimatedHours.Value;
			}			
		
		
			

			if(this.ActualStart.HasValue)
			{
				instance.ActualStart = this.ActualStart.Value;
			}			
		
		

			instance.SpecialTerms = this.SpecialTerms;
		
		
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.WorkEffortState = this.WorkEffortState;

						

			instance.Priority = this.Priority;

		
			if(this.WorkEffortPurposes!=null)
			{
				instance.WorkEffortPurposes = this.WorkEffortPurposes.ToArray();
			}
		
			if(this.Precendencies!=null)
			{
				instance.Precendencies = this.Precendencies.ToArray();
			}
		

			instance.Facility = this.Facility;

		
			if(this.DeliverablesProduced!=null)
			{
				instance.DeliverablesProduced = this.DeliverablesProduced.ToArray();
			}
		
			if(this.InventoryItemsNeeded!=null)
			{
				instance.InventoryItemsNeeded = this.InventoryItemsNeeded.ToArray();
			}
		
			if(this.Children!=null)
			{
				instance.Children = this.Children.ToArray();
			}
		

			instance.OrderItemFulfillment = this.OrderItemFulfillment;

		

			instance.WorkEffortType = this.WorkEffortType;

		
			if(this.InventoryItemsProduced!=null)
			{
				instance.InventoryItemsProduced = this.InventoryItemsProduced.ToArray();
			}
		
			if(this.RequirementFulfillments!=null)
			{
				instance.RequirementFulfillments = this.RequirementFulfillments.ToArray();
			}
		
			if(this.Concurrencies!=null)
			{
				instance.Concurrencies = this.Concurrencies.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Boolean? SendNotification {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithSendNotification(global::System.Boolean? value)
		        {
				    if(this.SendNotification!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendNotification = value;
		            return this;
		        }	

				public global::System.Boolean? SendReminder {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithSendReminder(global::System.Boolean? value)
		        {
				    if(this.SendReminder!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SendReminder = value;
		            return this;
		        }	

				public global::System.DateTime? RemindAt {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithRemindAt(global::System.DateTime? value)
		        {
				    if(this.RemindAt!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RemindAt = value;
		            return this;
		        }	

				public WorkEffortState WorkEffortState {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithWorkEffortState(WorkEffortState value)
		        {
		            if(this.WorkEffortState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffortState = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Priority Priority {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithPriority(Priority value)
		        {
		            if(this.Priority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Priority = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkEffortPurpose> WorkEffortPurposes {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithWorkEffortPurpose(WorkEffortPurpose value)
		        {
					if(this.WorkEffortPurposes == null)
					{
						this.WorkEffortPurposes = new global::System.Collections.Generic.List<WorkEffortPurpose>(); 
					}
		            this.WorkEffortPurposes.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ActualCompletion {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithActualCompletion(global::System.DateTime? value)
		        {
				    if(this.ActualCompletion!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualCompletion = value;
		            return this;
		        }	

				public global::System.DateTime? ScheduledStart {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithScheduledStart(global::System.DateTime? value)
		        {
				    if(this.ScheduledStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledStart = value;
		            return this;
		        }	

				public global::System.DateTime? ScheduledCompletion {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithScheduledCompletion(global::System.DateTime? value)
		        {
				    if(this.ScheduledCompletion!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledCompletion = value;
		            return this;
		        }	

				public global::System.Decimal? ActualHours {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithActualHours(global::System.Decimal? value)
		        {
				    if(this.ActualHours!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualHours = value;
		            return this;
		        }	

				public global::System.Decimal? EstimatedHours {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithEstimatedHours(global::System.Decimal? value)
		        {
				    if(this.EstimatedHours!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedHours = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffort> Precendencies {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithPrecendency(WorkEffort value)
		        {
					if(this.Precendencies == null)
					{
						this.Precendencies = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Precendencies.Add(value);
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Deliverable> DeliverablesProduced {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithDeliverablesProduced(Deliverable value)
		        {
					if(this.DeliverablesProduced == null)
					{
						this.DeliverablesProduced = new global::System.Collections.Generic.List<Deliverable>(); 
					}
		            this.DeliverablesProduced.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ActualStart {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithActualStart(global::System.DateTime? value)
		        {
				    if(this.ActualStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffortInventoryAssignment> InventoryItemsNeeded {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithInventoryItemsNeeded(WorkEffortInventoryAssignment value)
		        {
					if(this.InventoryItemsNeeded == null)
					{
						this.InventoryItemsNeeded = new global::System.Collections.Generic.List<WorkEffortInventoryAssignment>(); 
					}
		            this.InventoryItemsNeeded.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkEffort> Children {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithChild(WorkEffort value)
		        {
					if(this.Children == null)
					{
						this.Children = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Children.Add(value);
		            return this;
		        }		

				
				public OrderItem OrderItemFulfillment {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithOrderItemFulfillment(OrderItem value)
		        {
		            if(this.OrderItemFulfillment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderItemFulfillment = value;
		            return this;
		        }		

				
				public WorkEffortType WorkEffortType {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithWorkEffortType(WorkEffortType value)
		        {
		            if(this.WorkEffortType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffortType = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InventoryItem> InventoryItemsProduced {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithInventoryItemsProduced(InventoryItem value)
		        {
					if(this.InventoryItemsProduced == null)
					{
						this.InventoryItemsProduced = new global::System.Collections.Generic.List<InventoryItem>(); 
					}
		            this.InventoryItemsProduced.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Requirement> RequirementFulfillments {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithRequirementFulfillment(Requirement value)
		        {
					if(this.RequirementFulfillments == null)
					{
						this.RequirementFulfillments = new global::System.Collections.Generic.List<Requirement>(); 
					}
		            this.RequirementFulfillments.Add(value);
		            return this;
		        }		

				
				public global::System.String SpecialTerms {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithSpecialTerms(global::System.String value)
		        {
				    if(this.SpecialTerms!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SpecialTerms = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<WorkEffort> Concurrencies {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithConcurrency(WorkEffort value)
		        {
					if(this.Concurrencies == null)
					{
						this.Concurrencies = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.Concurrencies.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public WorkTaskVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public WorkTaskVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class WorkTaskVersions : global::Allors.ObjectsBase<WorkTaskVersion>
	{
		public WorkTaskVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaWorkTaskVersion Meta
		{
			get
			{
				return Allors.Meta.MetaWorkTaskVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}