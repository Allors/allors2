// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class WorkEffortBilling : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public WorkEffortBilling(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaWorkEffortBilling Meta
		{
			get
			{
				return Allors.Meta.MetaWorkEffortBilling.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static WorkEffortBilling Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (WorkEffortBilling) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public WorkEffort WorkEffort
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeRole(Meta.WorkEffort.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.WorkEffort.RelationType, value);
			}
		}

		virtual public bool ExistWorkEffort
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.WorkEffort.RelationType);
			}
		}

		virtual public void RemoveWorkEffort()
		{
			Strategy.RemoveCompositeRole(Meta.WorkEffort.RelationType);
		}


		virtual public global::System.Decimal? Percentage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Percentage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Percentage.RelationType, value);
			}
		}

		virtual public bool ExistPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.Percentage.RelationType);
			}
		}

		virtual public void RemovePercentage()
		{
			Strategy.RemoveUnitRole(Meta.Percentage.RelationType);
		}


		virtual public InvoiceItem InvoiceItem
		{ 
			get
			{
				return (InvoiceItem) Strategy.GetCompositeRole(Meta.InvoiceItem.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InvoiceItem.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InvoiceItem.RelationType);
			}
		}

		virtual public void RemoveInvoiceItem()
		{
			Strategy.RemoveCompositeRole(Meta.InvoiceItem.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new WorkEffortBillingOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new WorkEffortBillingOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new WorkEffortBillingOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new WorkEffortBillingOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new WorkEffortBillingOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new WorkEffortBillingOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new WorkEffortBillingOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new WorkEffortBillingOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new WorkEffortBillingOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new WorkEffortBillingOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class WorkEffortBillingBuilder : Allors.ObjectBuilder<WorkEffortBilling> , ObjectBuilder, global::System.IDisposable
	{		
		public WorkEffortBillingBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(WorkEffortBilling instance)
		{
			

			if(this.Percentage.HasValue)
			{
				instance.Percentage = this.Percentage.Value;
			}			
		
		

			instance.WorkEffort = this.WorkEffort;

		

			instance.InvoiceItem = this.InvoiceItem;

		
		}


				public WorkEffort WorkEffort {get; set;}

				/// <exclude/>
				public WorkEffortBillingBuilder WithWorkEffort(WorkEffort value)
		        {
		            if(this.WorkEffort!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.WorkEffort = value;
		            return this;
		        }		

				
				public global::System.Decimal? Percentage {get; set;}

				/// <exclude/>
				public WorkEffortBillingBuilder WithPercentage(global::System.Decimal? value)
		        {
				    if(this.Percentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Percentage = value;
		            return this;
		        }	

				public InvoiceItem InvoiceItem {get; set;}

				/// <exclude/>
				public WorkEffortBillingBuilder WithInvoiceItem(InvoiceItem value)
		        {
		            if(this.InvoiceItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InvoiceItem = value;
		            return this;
		        }		

				

	}

	public partial class WorkEffortBillings : global::Allors.ObjectsBase<WorkEffortBilling>
	{
		public WorkEffortBillings(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaWorkEffortBilling Meta
		{
			get
			{
				return Allors.Meta.MetaWorkEffortBilling.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}