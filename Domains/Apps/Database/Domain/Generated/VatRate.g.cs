// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class VatRate : Allors.IObject , AccessControlledObject
	{
		private readonly IStrategy strategy;

		public VatRate(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaVatRate Meta
		{
			get
			{
				return Allors.Meta.MetaVatRate.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static VatRate Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (VatRate) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public VatCalculationMethod VatCalculationMethod
		{ 
			get
			{
				return (VatCalculationMethod) Strategy.GetCompositeRole(Meta.VatCalculationMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatCalculationMethod.RelationType, value);
			}
		}

		virtual public bool ExistVatCalculationMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatCalculationMethod.RelationType);
			}
		}

		virtual public void RemoveVatCalculationMethod()
		{
			Strategy.RemoveCompositeRole(Meta.VatCalculationMethod.RelationType);
		}


		virtual public global::Allors.Extent<VatReturnBox> VatReturnBoxes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.VatReturnBoxes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.VatReturnBoxes.RelationType, value);
			}
		}

		virtual public void AddVatReturnBox (VatReturnBox value)
		{
			Strategy.AddCompositeRole(Meta.VatReturnBoxes.RelationType, value);
		}

		virtual public void RemoveVatReturnBox (VatReturnBox value)
		{
			Strategy.RemoveCompositeRole(Meta.VatReturnBoxes.RelationType, value);
		}

		virtual public bool ExistVatReturnBoxes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.VatReturnBoxes.RelationType);
			}
		}

		virtual public void RemoveVatReturnBoxes()
		{
			Strategy.RemoveCompositeRoles(Meta.VatReturnBoxes.RelationType);
		}


		virtual public global::System.Decimal Rate 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Rate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Rate.RelationType, value);
			}
		}

		virtual public bool ExistRate{
			get
			{
				return Strategy.ExistUnitRole(Meta.Rate.RelationType);
			}
		}

		virtual public void RemoveRate()
		{
			Strategy.RemoveUnitRole(Meta.Rate.RelationType);
		}


		virtual public OrganisationGlAccount VatPayableAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatPayableAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatPayableAccount.RelationType, value);
			}
		}

		virtual public bool ExistVatPayableAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatPayableAccount.RelationType);
			}
		}

		virtual public void RemoveVatPayableAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatPayableAccount.RelationType);
		}


		virtual public Organisation TaxAuthority
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.TaxAuthority.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TaxAuthority.RelationType, value);
			}
		}

		virtual public bool ExistTaxAuthority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TaxAuthority.RelationType);
			}
		}

		virtual public void RemoveTaxAuthority()
		{
			Strategy.RemoveCompositeRole(Meta.TaxAuthority.RelationType);
		}


		virtual public VatRateUsage VatRateUsage
		{ 
			get
			{
				return (VatRateUsage) Strategy.GetCompositeRole(Meta.VatRateUsage.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRateUsage.RelationType, value);
			}
		}

		virtual public bool ExistVatRateUsage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRateUsage.RelationType);
			}
		}

		virtual public void RemoveVatRateUsage()
		{
			Strategy.RemoveCompositeRole(Meta.VatRateUsage.RelationType);
		}


		virtual public VatRatePurchaseKind VatRatePurchaseKind
		{ 
			get
			{
				return (VatRatePurchaseKind) Strategy.GetCompositeRole(Meta.VatRatePurchaseKind.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRatePurchaseKind.RelationType, value);
			}
		}

		virtual public bool ExistVatRatePurchaseKind
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRatePurchaseKind.RelationType);
			}
		}

		virtual public void RemoveVatRatePurchaseKind()
		{
			Strategy.RemoveCompositeRole(Meta.VatRatePurchaseKind.RelationType);
		}


		virtual public VatTariff VatTariff
		{ 
			get
			{
				return (VatTariff) Strategy.GetCompositeRole(Meta.VatTariff.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatTariff.RelationType, value);
			}
		}

		virtual public bool ExistVatTariff
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatTariff.RelationType);
			}
		}

		virtual public void RemoveVatTariff()
		{
			Strategy.RemoveCompositeRole(Meta.VatTariff.RelationType);
		}


		virtual public TimeFrequency PaymentFrequency
		{ 
			get
			{
				return (TimeFrequency) Strategy.GetCompositeRole(Meta.PaymentFrequency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PaymentFrequency.RelationType, value);
			}
		}

		virtual public bool ExistPaymentFrequency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PaymentFrequency.RelationType);
			}
		}

		virtual public void RemovePaymentFrequency()
		{
			Strategy.RemoveCompositeRole(Meta.PaymentFrequency.RelationType);
		}


		virtual public OrganisationGlAccount VatToPayAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatToPayAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatToPayAccount.RelationType, value);
			}
		}

		virtual public bool ExistVatToPayAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatToPayAccount.RelationType);
			}
		}

		virtual public void RemoveVatToPayAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatToPayAccount.RelationType);
		}


		virtual public EuSalesListType EuSalesListType
		{ 
			get
			{
				return (EuSalesListType) Strategy.GetCompositeRole(Meta.EuSalesListType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EuSalesListType.RelationType, value);
			}
		}

		virtual public bool ExistEuSalesListType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EuSalesListType.RelationType);
			}
		}

		virtual public void RemoveEuSalesListType()
		{
			Strategy.RemoveCompositeRole(Meta.EuSalesListType.RelationType);
		}


		virtual public OrganisationGlAccount VatToReceiveAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatToReceiveAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatToReceiveAccount.RelationType, value);
			}
		}

		virtual public bool ExistVatToReceiveAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatToReceiveAccount.RelationType);
			}
		}

		virtual public void RemoveVatToReceiveAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatToReceiveAccount.RelationType);
		}


		virtual public OrganisationGlAccount VatReceivableAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatReceivableAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatReceivableAccount.RelationType, value);
			}
		}

		virtual public bool ExistVatReceivableAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatReceivableAccount.RelationType);
			}
		}

		virtual public void RemoveVatReceivableAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatReceivableAccount.RelationType);
		}


		virtual public global::System.Boolean? ReverseCharge 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.ReverseCharge.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ReverseCharge.RelationType, value);
			}
		}

		virtual public bool ExistReverseCharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.ReverseCharge.RelationType);
			}
		}

		virtual public void RemoveReverseCharge()
		{
			Strategy.RemoveUnitRole(Meta.ReverseCharge.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public Country CountryWhereVatRate
		{ 
			get
			{
				return (Country) Strategy.GetCompositeAssociation(Meta.CountryWhereVatRate.RelationType);
			}
		} 

		virtual public bool ExistCountryWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CountryWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<InvoiceVatRateItem> InvoiceVatRateItemsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceVatRateItemsWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistInvoiceVatRateItemsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceVatRateItemsWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<VatRegime> VatRegimesWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.VatRegimesWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistVatRegimesWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.VatRegimesWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderAdjustmentVersion> OrderAdjustmentVersionsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderAdjustmentVersionsWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistOrderAdjustmentVersionsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderAdjustmentVersionsWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<PriceableVersion> PriceableVersionsWhereDerivedVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PriceableVersionsWhereDerivedVatRate.RelationType);
			}
		}

		virtual public bool ExistPriceableVersionsWhereDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PriceableVersionsWhereDerivedVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderAdjustment> OrderAdjustmentsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderAdjustmentsWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistOrderAdjustmentsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderAdjustmentsWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<Priceable> PriceablesWhereDerivedVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PriceablesWhereDerivedVatRate.RelationType);
			}
		}

		virtual public bool ExistPriceablesWhereDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PriceablesWhereDerivedVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistProductsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereVatRate.RelationType);
			}
		}


		virtual public global::Allors.Extent<ProductFeature> ProductFeaturesWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeaturesWhereVatRate.RelationType);
			}
		}

		virtual public bool ExistProductFeaturesWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeaturesWhereVatRate.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new VatRateOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new VatRateOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new VatRateOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new VatRateOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new VatRateOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new VatRateOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new VatRateOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new VatRateOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new VatRateOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new VatRateOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class VatRateBuilder : Allors.ObjectBuilder<VatRate> , AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public VatRateBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(VatRate instance)
		{
			

			if(this.Rate.HasValue)
			{
				instance.Rate = this.Rate.Value;
			}			
		
		
			

			if(this.ReverseCharge.HasValue)
			{
				instance.ReverseCharge = this.ReverseCharge.Value;
			}			
		
		

			instance.VatCalculationMethod = this.VatCalculationMethod;

		
			if(this.VatReturnBoxes!=null)
			{
				instance.VatReturnBoxes = this.VatReturnBoxes.ToArray();
			}
		

			instance.VatPayableAccount = this.VatPayableAccount;

		

			instance.TaxAuthority = this.TaxAuthority;

		

			instance.VatRateUsage = this.VatRateUsage;

		

			instance.VatRatePurchaseKind = this.VatRatePurchaseKind;

		

			instance.VatTariff = this.VatTariff;

		

			instance.PaymentFrequency = this.PaymentFrequency;

		

			instance.VatToPayAccount = this.VatToPayAccount;

		

			instance.EuSalesListType = this.EuSalesListType;

		

			instance.VatToReceiveAccount = this.VatToReceiveAccount;

		

			instance.VatReceivableAccount = this.VatReceivableAccount;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public VatCalculationMethod VatCalculationMethod {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatCalculationMethod(VatCalculationMethod value)
		        {
		            if(this.VatCalculationMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatCalculationMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<VatReturnBox> VatReturnBoxes {get; set;}	

				/// <exclude/>
				public VatRateBuilder WithVatReturnBox(VatReturnBox value)
		        {
					if(this.VatReturnBoxes == null)
					{
						this.VatReturnBoxes = new global::System.Collections.Generic.List<VatReturnBox>(); 
					}
		            this.VatReturnBoxes.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? Rate {get; set;}

				/// <exclude/>
				public VatRateBuilder WithRate(global::System.Decimal? value)
		        {
				    if(this.Rate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Rate = value;
		            return this;
		        }	

				public OrganisationGlAccount VatPayableAccount {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatPayableAccount(OrganisationGlAccount value)
		        {
		            if(this.VatPayableAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatPayableAccount = value;
		            return this;
		        }		

				
				public Organisation TaxAuthority {get; set;}

				/// <exclude/>
				public VatRateBuilder WithTaxAuthority(Organisation value)
		        {
		            if(this.TaxAuthority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TaxAuthority = value;
		            return this;
		        }		

				
				public VatRateUsage VatRateUsage {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatRateUsage(VatRateUsage value)
		        {
		            if(this.VatRateUsage!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRateUsage = value;
		            return this;
		        }		

				
				public VatRatePurchaseKind VatRatePurchaseKind {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatRatePurchaseKind(VatRatePurchaseKind value)
		        {
		            if(this.VatRatePurchaseKind!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRatePurchaseKind = value;
		            return this;
		        }		

				
				public VatTariff VatTariff {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatTariff(VatTariff value)
		        {
		            if(this.VatTariff!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatTariff = value;
		            return this;
		        }		

				
				public TimeFrequency PaymentFrequency {get; set;}

				/// <exclude/>
				public VatRateBuilder WithPaymentFrequency(TimeFrequency value)
		        {
		            if(this.PaymentFrequency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentFrequency = value;
		            return this;
		        }		

				
				public OrganisationGlAccount VatToPayAccount {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatToPayAccount(OrganisationGlAccount value)
		        {
		            if(this.VatToPayAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatToPayAccount = value;
		            return this;
		        }		

				
				public EuSalesListType EuSalesListType {get; set;}

				/// <exclude/>
				public VatRateBuilder WithEuSalesListType(EuSalesListType value)
		        {
		            if(this.EuSalesListType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EuSalesListType = value;
		            return this;
		        }		

				
				public OrganisationGlAccount VatToReceiveAccount {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatToReceiveAccount(OrganisationGlAccount value)
		        {
		            if(this.VatToReceiveAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatToReceiveAccount = value;
		            return this;
		        }		

				
				public OrganisationGlAccount VatReceivableAccount {get; set;}

				/// <exclude/>
				public VatRateBuilder WithVatReceivableAccount(OrganisationGlAccount value)
		        {
		            if(this.VatReceivableAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatReceivableAccount = value;
		            return this;
		        }		

				
				public global::System.Boolean? ReverseCharge {get; set;}

				/// <exclude/>
				public VatRateBuilder WithReverseCharge(global::System.Boolean? value)
		        {
				    if(this.ReverseCharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReverseCharge = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public VatRateBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public VatRateBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class VatRates : global::Allors.ObjectsBase<VatRate>
	{
		public VatRates(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaVatRate Meta
		{
			get
			{
				return Allors.Meta.MetaVatRate.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}