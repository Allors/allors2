// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Requirement : Allors.IObject , Transitional, UniquelyIdentifiable, Versioned
	{
		private readonly IStrategy strategy;

		public Requirement(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaRequirement Meta
		{
			get
			{
				return Allors.Meta.MetaRequirement.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Requirement Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Requirement) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public RequirementState PreviousRequirementState
		{ 
			get
			{
				return (RequirementState) Strategy.GetCompositeRole(Meta.PreviousRequirementState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousRequirementState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousRequirementState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousRequirementState.RelationType);
			}
		}

		virtual public void RemovePreviousRequirementState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousRequirementState.RelationType);
		}


		virtual public RequirementState LastRequirementState
		{ 
			get
			{
				return (RequirementState) Strategy.GetCompositeRole(Meta.LastRequirementState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastRequirementState.RelationType, value);
			}
		}

		virtual public bool ExistLastRequirementState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastRequirementState.RelationType);
			}
		}

		virtual public void RemoveLastRequirementState()
		{
			Strategy.RemoveCompositeRole(Meta.LastRequirementState.RelationType);
		}


		virtual public RequirementState RequirementState
		{ 
			get
			{
				return (RequirementState) Strategy.GetCompositeRole(Meta.RequirementState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequirementState.RelationType, value);
			}
		}

		virtual public bool ExistRequirementState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequirementState.RelationType);
			}
		}

		virtual public void RemoveRequirementState()
		{
			Strategy.RemoveCompositeRole(Meta.RequirementState.RelationType);
		}


		virtual public RequirementVersion CurrentVersion
		{ 
			get
			{
				return (RequirementVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<RequirementVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (RequirementVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (RequirementVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::System.DateTime? RequiredByDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RequiredByDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredByDate.RelationType, value);
			}
		}

		virtual public bool ExistRequiredByDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredByDate.RelationType);
			}
		}

		virtual public void RemoveRequiredByDate()
		{
			Strategy.RemoveUnitRole(Meta.RequiredByDate.RelationType);
		}


		virtual public RequirementType RequirementType
		{ 
			get
			{
				return (RequirementType) Strategy.GetCompositeRole(Meta.RequirementType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequirementType.RelationType, value);
			}
		}

		virtual public bool ExistRequirementType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequirementType.RelationType);
			}
		}

		virtual public void RemoveRequirementType()
		{
			Strategy.RemoveCompositeRole(Meta.RequirementType.RelationType);
		}


		virtual public Party Authorizer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Authorizer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer.RelationType, value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer.RelationType);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer.RelationType);
		}


		virtual public global::System.String Reason 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Reason.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Reason.RelationType, value);
			}
		}

		virtual public bool ExistReason{
			get
			{
				return Strategy.ExistUnitRole(Meta.Reason.RelationType);
			}
		}

		virtual public void RemoveReason()
		{
			Strategy.RemoveUnitRole(Meta.Reason.RelationType);
		}


		virtual public global::Allors.Extent<Requirement> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Children.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Children.RelationType, value);
			}
		}

		virtual public void AddChild (Requirement value)
		{
			Strategy.AddCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public void RemoveChild (Requirement value)
		{
			Strategy.RemoveCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Children.RelationType);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(Meta.Children.RelationType);
		}


		virtual public Party NeededFor
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.NeededFor.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NeededFor.RelationType, value);
			}
		}

		virtual public bool ExistNeededFor
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NeededFor.RelationType);
			}
		}

		virtual public void RemoveNeededFor()
		{
			Strategy.RemoveCompositeRole(Meta.NeededFor.RelationType);
		}


		virtual public Party Originator
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Originator.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Originator.RelationType, value);
			}
		}

		virtual public bool ExistOriginator
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Originator.RelationType);
			}
		}

		virtual public void RemoveOriginator()
		{
			Strategy.RemoveCompositeRole(Meta.Originator.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public Party ServicedBy
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ServicedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ServicedBy.RelationType, value);
			}
		}

		virtual public bool ExistServicedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ServicedBy.RelationType);
			}
		}

		virtual public void RemoveServicedBy()
		{
			Strategy.RemoveCompositeRole(Meta.ServicedBy.RelationType);
		}


		virtual public global::System.Decimal? EstimatedBudget 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedBudget.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedBudget.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedBudget{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedBudget.RelationType);
			}
		}

		virtual public void RemoveEstimatedBudget()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedBudget.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Int32? Quantity 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}



		virtual public global::Allors.Extent<RequestItemVersion> RequestItemVersionsWhereRequirement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemVersionsWhereRequirement.RelationType);
			}
		}

		virtual public bool ExistRequestItemVersionsWhereRequirement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemVersionsWhereRequirement.RelationType);
			}
		}


		virtual public RequirementVersion RequirementVersionWhereChild
		{ 
			get
			{
				return (RequirementVersion) Strategy.GetCompositeAssociation(Meta.RequirementVersionWhereChild.RelationType);
			}
		} 

		virtual public bool ExistRequirementVersionWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.RequirementVersionWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<OrderRequirementCommitment> OrderRequirementCommitmentsWhereRequirement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderRequirementCommitmentsWhereRequirement.RelationType);
			}
		}

		virtual public bool ExistOrderRequirementCommitmentsWhereRequirement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderRequirementCommitmentsWhereRequirement.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequestItem> RequestItemsWhereRequirement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemsWhereRequirement.RelationType);
			}
		}

		virtual public bool ExistRequestItemsWhereRequirement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemsWhereRequirement.RelationType);
			}
		}


		virtual public Requirement RequirementWhereChild
		{ 
			get
			{
				return (Requirement) Strategy.GetCompositeAssociation(Meta.RequirementWhereChild.RelationType);
			}
		} 

		virtual public bool ExistRequirementWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.RequirementWhereChild.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementBudgetAllocation> RequirementBudgetAllocationsWhereRequirement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementBudgetAllocationsWhereRequirement.RelationType);
			}
		}

		virtual public bool ExistRequirementBudgetAllocationsWhereRequirement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementBudgetAllocationsWhereRequirement.RelationType);
			}
		}


		virtual public global::Allors.Extent<RequirementCommunication> RequirementCommunicationsWhereRequirement
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequirementCommunicationsWhereRequirement.RelationType);
			}
		}

		virtual public bool ExistRequirementCommunicationsWhereRequirement
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequirementCommunicationsWhereRequirement.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffortVersion> WorkEffortVersionsWhereRequirementFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortVersionsWhereRequirementFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortVersionsWhereRequirementFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortVersionsWhereRequirementFulfillment.RelationType);
			}
		}


		virtual public global::Allors.Extent<WorkEffort> WorkEffortsWhereRequirementFulfillment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortsWhereRequirementFulfillment.RelationType);
			}
		}

		virtual public bool ExistWorkEffortsWhereRequirementFulfillment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortsWhereRequirementFulfillment.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public RequirementReopen Reopen()
		{ 
			var method = new RequirementReopen(this);
            method.Execute();
            return method;
		}

		public RequirementReopen Reopen(System.Action<RequirementReopen> action)
		{ 
			var method = new RequirementReopen(this);
            action(method);
            method.Execute();
            return method;
		}

		public RequirementCancel Cancel()
		{ 
			var method = new RequirementCancel(this);
            method.Execute();
            return method;
		}

		public RequirementCancel Cancel(System.Action<RequirementCancel> action)
		{ 
			var method = new RequirementCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public RequirementHold Hold()
		{ 
			var method = new RequirementHold(this);
            method.Execute();
            return method;
		}

		public RequirementHold Hold(System.Action<RequirementHold> action)
		{ 
			var method = new RequirementHold(this);
            action(method);
            method.Execute();
            return method;
		}

		public RequirementClose Close()
		{ 
			var method = new RequirementClose(this);
            method.Execute();
            return method;
		}

		public RequirementClose Close(System.Action<RequirementClose> action)
		{ 
			var method = new RequirementClose(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new RequirementOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new RequirementOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new RequirementOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new RequirementOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new RequirementOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new RequirementOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new RequirementOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new RequirementOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new RequirementOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new RequirementOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class RequirementBuilder : Allors.ObjectBuilder<Requirement> , TransitionalBuilder, UniquelyIdentifiableBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public RequirementBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Requirement instance)
		{
			

			if(this.RequiredByDate.HasValue)
			{
				instance.RequiredByDate = this.RequiredByDate.Value;
			}			
		
		

			instance.Reason = this.Reason;
		
		
			

			if(this.EstimatedBudget.HasValue)
			{
				instance.EstimatedBudget = this.EstimatedBudget.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
				

			instance.RequirementState = this.RequirementState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		

			instance.RequirementType = this.RequirementType;

		

			instance.Authorizer = this.Authorizer;

		
			if(this.Children!=null)
			{
				instance.Children = this.Children.ToArray();
			}
		

			instance.NeededFor = this.NeededFor;

		

			instance.Originator = this.Originator;

		

			instance.Facility = this.Facility;

		

			instance.ServicedBy = this.ServicedBy;

								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public RequirementState RequirementState {get; set;}

				/// <exclude/>
				public RequirementBuilder WithRequirementState(RequirementState value)
		        {
		            if(this.RequirementState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequirementState = value;
		            return this;
		        }		

				
				public RequirementVersion CurrentVersion {get; set;}

				/// <exclude/>
				public RequirementBuilder WithCurrentVersion(RequirementVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<RequirementVersion> AllVersions {get; set;}	

				/// <exclude/>
				public RequirementBuilder WithAllVersion(RequirementVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<RequirementVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? RequiredByDate {get; set;}

				/// <exclude/>
				public RequirementBuilder WithRequiredByDate(global::System.DateTime? value)
		        {
				    if(this.RequiredByDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredByDate = value;
		            return this;
		        }	

				public RequirementType RequirementType {get; set;}

				/// <exclude/>
				public RequirementBuilder WithRequirementType(RequirementType value)
		        {
		            if(this.RequirementType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequirementType = value;
		            return this;
		        }		

				
				public Party Authorizer {get; set;}

				/// <exclude/>
				public RequirementBuilder WithAuthorizer(Party value)
		        {
		            if(this.Authorizer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Authorizer = value;
		            return this;
		        }		

				
				public global::System.String Reason {get; set;}

				/// <exclude/>
				public RequirementBuilder WithReason(global::System.String value)
		        {
				    if(this.Reason!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Reason = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Requirement> Children {get; set;}	

				/// <exclude/>
				public RequirementBuilder WithChild(Requirement value)
		        {
					if(this.Children == null)
					{
						this.Children = new global::System.Collections.Generic.List<Requirement>(); 
					}
		            this.Children.Add(value);
		            return this;
		        }		

				
				public Party NeededFor {get; set;}

				/// <exclude/>
				public RequirementBuilder WithNeededFor(Party value)
		        {
		            if(this.NeededFor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NeededFor = value;
		            return this;
		        }		

				
				public Party Originator {get; set;}

				/// <exclude/>
				public RequirementBuilder WithOriginator(Party value)
		        {
		            if(this.Originator!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Originator = value;
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public RequirementBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public Party ServicedBy {get; set;}

				/// <exclude/>
				public RequirementBuilder WithServicedBy(Party value)
		        {
		            if(this.ServicedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ServicedBy = value;
		            return this;
		        }		

				
				public global::System.Decimal? EstimatedBudget {get; set;}

				/// <exclude/>
				public RequirementBuilder WithEstimatedBudget(global::System.Decimal? value)
		        {
				    if(this.EstimatedBudget!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedBudget = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public RequirementBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Int32? Quantity {get; set;}

				/// <exclude/>
				public RequirementBuilder WithQuantity(global::System.Int32? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public RequirementBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public RequirementBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public RequirementBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Requirements : global::Allors.ObjectsBase<Requirement>
	{
		public Requirements(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaRequirement Meta
		{
			get
			{
				return Allors.Meta.MetaRequirement.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}