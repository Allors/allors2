// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class InternalOrganisation : Allors.IObject , UniquelyIdentifiable, Auditable
	{
		private readonly IStrategy strategy;

		public InternalOrganisation(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaInternalOrganisation Meta
		{
			get
			{
				return Allors.Meta.MetaInternalOrganisation.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static InternalOrganisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (InternalOrganisation) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String PurchaseOrderNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PurchaseOrderNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PurchaseOrderNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.PurchaseOrderNumberPrefix.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.PurchaseOrderNumberPrefix.RelationType);
		}


		virtual public global::System.String TransactionReferenceNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TransactionReferenceNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TransactionReferenceNumber.RelationType, value);
			}
		}

		virtual public bool ExistTransactionReferenceNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.TransactionReferenceNumber.RelationType);
			}
		}

		virtual public void RemoveTransactionReferenceNumber()
		{
			Strategy.RemoveUnitRole(Meta.TransactionReferenceNumber.RelationType);
		}


		virtual public global::Allors.Extent<JournalEntryNumber> JournalEntryNumbers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.JournalEntryNumbers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.JournalEntryNumbers.RelationType, value);
			}
		}

		virtual public void AddJournalEntryNumber (JournalEntryNumber value)
		{
			Strategy.AddCompositeRole(Meta.JournalEntryNumbers.RelationType, value);
		}

		virtual public void RemoveJournalEntryNumber (JournalEntryNumber value)
		{
			Strategy.RemoveCompositeRole(Meta.JournalEntryNumbers.RelationType, value);
		}

		virtual public bool ExistJournalEntryNumbers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.JournalEntryNumbers.RelationType);
			}
		}

		virtual public void RemoveJournalEntryNumbers()
		{
			Strategy.RemoveCompositeRoles(Meta.JournalEntryNumbers.RelationType);
		}


		virtual public Country EuListingState
		{ 
			get
			{
				return (Country) Strategy.GetCompositeRole(Meta.EuListingState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EuListingState.RelationType, value);
			}
		}

		virtual public bool ExistEuListingState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EuListingState.RelationType);
			}
		}

		virtual public void RemoveEuListingState()
		{
			Strategy.RemoveCompositeRole(Meta.EuListingState.RelationType);
		}


		virtual public Counter PurchaseInvoiceCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.PurchaseInvoiceCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseInvoiceCounter.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseInvoiceCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseInvoiceCounter.RelationType);
			}
		}

		virtual public void RemovePurchaseInvoiceCounter()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseInvoiceCounter.RelationType);
		}


		virtual public AccountingPeriod ActualAccountingPeriod
		{ 
			get
			{
				return (AccountingPeriod) Strategy.GetCompositeRole(Meta.ActualAccountingPeriod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ActualAccountingPeriod.RelationType, value);
			}
		}

		virtual public bool ExistActualAccountingPeriod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ActualAccountingPeriod.RelationType);
			}
		}

		virtual public void RemoveActualAccountingPeriod()
		{
			Strategy.RemoveCompositeRole(Meta.ActualAccountingPeriod.RelationType);
		}


		virtual public InvoiceSequence InvoiceSequence
		{ 
			get
			{
				return (InvoiceSequence) Strategy.GetCompositeRole(Meta.InvoiceSequence.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InvoiceSequence.RelationType, value);
			}
		}

		virtual public bool ExistInvoiceSequence
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InvoiceSequence.RelationType);
			}
		}

		virtual public void RemoveInvoiceSequence()
		{
			Strategy.RemoveCompositeRole(Meta.InvoiceSequence.RelationType);
		}


		virtual public global::Allors.Extent<PaymentMethod> ActivePaymentMethods
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ActivePaymentMethods.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ActivePaymentMethods.RelationType, value);
			}
		}

		virtual public void AddActivePaymentMethod (PaymentMethod value)
		{
			Strategy.AddCompositeRole(Meta.ActivePaymentMethods.RelationType, value);
		}

		virtual public void RemoveActivePaymentMethod (PaymentMethod value)
		{
			Strategy.RemoveCompositeRole(Meta.ActivePaymentMethods.RelationType, value);
		}

		virtual public bool ExistActivePaymentMethods
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ActivePaymentMethods.RelationType);
			}
		}

		virtual public void RemoveActivePaymentMethods()
		{
			Strategy.RemoveCompositeRoles(Meta.ActivePaymentMethods.RelationType);
		}


		virtual public global::System.Decimal? MaximumAllowedPaymentDifference 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.MaximumAllowedPaymentDifference.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaximumAllowedPaymentDifference.RelationType, value);
			}
		}

		virtual public bool ExistMaximumAllowedPaymentDifference{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaximumAllowedPaymentDifference.RelationType);
			}
		}

		virtual public void RemoveMaximumAllowedPaymentDifference()
		{
			Strategy.RemoveUnitRole(Meta.MaximumAllowedPaymentDifference.RelationType);
		}


		virtual public Media LogoImage
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.LogoImage.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LogoImage.RelationType, value);
			}
		}

		virtual public bool ExistLogoImage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LogoImage.RelationType);
			}
		}

		virtual public void RemoveLogoImage()
		{
			Strategy.RemoveCompositeRole(Meta.LogoImage.RelationType);
		}


		virtual public CostCenterSplitMethod CostCenterSplitMethod
		{ 
			get
			{
				return (CostCenterSplitMethod) Strategy.GetCompositeRole(Meta.CostCenterSplitMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CostCenterSplitMethod.RelationType, value);
			}
		}

		virtual public bool ExistCostCenterSplitMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CostCenterSplitMethod.RelationType);
			}
		}

		virtual public void RemoveCostCenterSplitMethod()
		{
			Strategy.RemoveCompositeRole(Meta.CostCenterSplitMethod.RelationType);
		}


		virtual public Counter PurchaseOrderCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.PurchaseOrderCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderCounter.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseOrderCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderCounter.RelationType);
			}
		}

		virtual public void RemovePurchaseOrderCounter()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderCounter.RelationType);
		}


		virtual public LegalForm LegalForm
		{ 
			get
			{
				return (LegalForm) Strategy.GetCompositeRole(Meta.LegalForm.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LegalForm.RelationType, value);
			}
		}

		virtual public bool ExistLegalForm
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LegalForm.RelationType);
			}
		}

		virtual public void RemoveLegalForm()
		{
			Strategy.RemoveCompositeRole(Meta.LegalForm.RelationType);
		}


		virtual public GeneralLedgerAccount SalesPaymentDifferencesAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.SalesPaymentDifferencesAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesPaymentDifferencesAccount.RelationType, value);
			}
		}

		virtual public bool ExistSalesPaymentDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesPaymentDifferencesAccount.RelationType);
			}
		}

		virtual public void RemoveSalesPaymentDifferencesAccount()
		{
			Strategy.RemoveCompositeRole(Meta.SalesPaymentDifferencesAccount.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.String PurchaseTransactionReferenceNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PurchaseTransactionReferenceNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PurchaseTransactionReferenceNumber.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseTransactionReferenceNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.PurchaseTransactionReferenceNumber.RelationType);
			}
		}

		virtual public void RemovePurchaseTransactionReferenceNumber()
		{
			Strategy.RemoveUnitRole(Meta.PurchaseTransactionReferenceNumber.RelationType);
		}


		virtual public global::System.Int32 FiscalYearStartMonth 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.FiscalYearStartMonth.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FiscalYearStartMonth.RelationType, value);
			}
		}

		virtual public bool ExistFiscalYearStartMonth{
			get
			{
				return Strategy.ExistUnitRole(Meta.FiscalYearStartMonth.RelationType);
			}
		}

		virtual public void RemoveFiscalYearStartMonth()
		{
			Strategy.RemoveUnitRole(Meta.FiscalYearStartMonth.RelationType);
		}


		virtual public CostOfGoodsSoldMethod CostOfGoodsSoldMethod
		{ 
			get
			{
				return (CostOfGoodsSoldMethod) Strategy.GetCompositeRole(Meta.CostOfGoodsSoldMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CostOfGoodsSoldMethod.RelationType, value);
			}
		}

		virtual public bool ExistCostOfGoodsSoldMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CostOfGoodsSoldMethod.RelationType);
			}
		}

		virtual public void RemoveCostOfGoodsSoldMethod()
		{
			Strategy.RemoveCompositeRole(Meta.CostOfGoodsSoldMethod.RelationType);
		}


		virtual public global::System.Boolean? VatDeactivated 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.VatDeactivated.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.VatDeactivated.RelationType, value);
			}
		}

		virtual public bool ExistVatDeactivated{
			get
			{
				return Strategy.ExistUnitRole(Meta.VatDeactivated.RelationType);
			}
		}

		virtual public void RemoveVatDeactivated()
		{
			Strategy.RemoveUnitRole(Meta.VatDeactivated.RelationType);
		}


		virtual public global::System.Int32 FiscalYearStartDay 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.FiscalYearStartDay.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FiscalYearStartDay.RelationType, value);
			}
		}

		virtual public bool ExistFiscalYearStartDay{
			get
			{
				return Strategy.ExistUnitRole(Meta.FiscalYearStartDay.RelationType);
			}
		}

		virtual public void RemoveFiscalYearStartDay()
		{
			Strategy.RemoveUnitRole(Meta.FiscalYearStartDay.RelationType);
		}


		virtual public global::Allors.Extent<GeneralLedgerAccount> GeneralLedgerAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.GeneralLedgerAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.GeneralLedgerAccounts.RelationType, value);
			}
		}

		virtual public void AddGeneralLedgerAccount (GeneralLedgerAccount value)
		{
			Strategy.AddCompositeRole(Meta.GeneralLedgerAccounts.RelationType, value);
		}

		virtual public void RemoveGeneralLedgerAccount (GeneralLedgerAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.GeneralLedgerAccounts.RelationType, value);
		}

		virtual public bool ExistGeneralLedgerAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.GeneralLedgerAccounts.RelationType);
			}
		}

		virtual public void RemoveGeneralLedgerAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.GeneralLedgerAccounts.RelationType);
		}


		virtual public Counter AccountingTransactionCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.AccountingTransactionCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AccountingTransactionCounter.RelationType, value);
			}
		}

		virtual public bool ExistAccountingTransactionCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AccountingTransactionCounter.RelationType);
			}
		}

		virtual public void RemoveAccountingTransactionCounter()
		{
			Strategy.RemoveCompositeRole(Meta.AccountingTransactionCounter.RelationType);
		}


		virtual public Counter IncomingShipmentCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.IncomingShipmentCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.IncomingShipmentCounter.RelationType, value);
			}
		}

		virtual public bool ExistIncomingShipmentCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.IncomingShipmentCounter.RelationType);
			}
		}

		virtual public void RemoveIncomingShipmentCounter()
		{
			Strategy.RemoveCompositeRole(Meta.IncomingShipmentCounter.RelationType);
		}


		virtual public GeneralLedgerAccount RetainedEarningsAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.RetainedEarningsAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RetainedEarningsAccount.RelationType, value);
			}
		}

		virtual public bool ExistRetainedEarningsAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RetainedEarningsAccount.RelationType);
			}
		}

		virtual public void RemoveRetainedEarningsAccount()
		{
			Strategy.RemoveCompositeRole(Meta.RetainedEarningsAccount.RelationType);
		}


		virtual public global::System.String PurchaseInvoiceNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PurchaseInvoiceNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PurchaseInvoiceNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseInvoiceNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.PurchaseInvoiceNumberPrefix.RelationType);
			}
		}

		virtual public void RemovePurchaseInvoiceNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.PurchaseInvoiceNumberPrefix.RelationType);
		}


		virtual public GeneralLedgerAccount SalesPaymentDiscountDifferencesAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.SalesPaymentDiscountDifferencesAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesPaymentDiscountDifferencesAccount.RelationType, value);
			}
		}

		virtual public bool ExistSalesPaymentDiscountDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesPaymentDiscountDifferencesAccount.RelationType);
			}
		}

		virtual public void RemoveSalesPaymentDiscountDifferencesAccount()
		{
			Strategy.RemoveCompositeRole(Meta.SalesPaymentDiscountDifferencesAccount.RelationType);
		}


		virtual public Counter SubAccountCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.SubAccountCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SubAccountCounter.RelationType, value);
			}
		}

		virtual public bool ExistSubAccountCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SubAccountCounter.RelationType);
			}
		}

		virtual public void RemoveSubAccountCounter()
		{
			Strategy.RemoveCompositeRole(Meta.SubAccountCounter.RelationType);
		}


		virtual public global::Allors.Extent<AccountingTransactionNumber> AccountingTransactionNumbers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AccountingTransactionNumbers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AccountingTransactionNumbers.RelationType, value);
			}
		}

		virtual public void AddAccountingTransactionNumber (AccountingTransactionNumber value)
		{
			Strategy.AddCompositeRole(Meta.AccountingTransactionNumbers.RelationType, value);
		}

		virtual public void RemoveAccountingTransactionNumber (AccountingTransactionNumber value)
		{
			Strategy.RemoveCompositeRole(Meta.AccountingTransactionNumbers.RelationType, value);
		}

		virtual public bool ExistAccountingTransactionNumbers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AccountingTransactionNumbers.RelationType);
			}
		}

		virtual public void RemoveAccountingTransactionNumbers()
		{
			Strategy.RemoveCompositeRoles(Meta.AccountingTransactionNumbers.RelationType);
		}


		virtual public global::System.String TransactionReferenceNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TransactionReferenceNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TransactionReferenceNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistTransactionReferenceNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.TransactionReferenceNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveTransactionReferenceNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.TransactionReferenceNumberPrefix.RelationType);
		}


		virtual public Counter QuoteCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.QuoteCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.QuoteCounter.RelationType, value);
			}
		}

		virtual public bool ExistQuoteCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.QuoteCounter.RelationType);
			}
		}

		virtual public void RemoveQuoteCounter()
		{
			Strategy.RemoveCompositeRole(Meta.QuoteCounter.RelationType);
		}


		virtual public Counter RequestCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.RequestCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequestCounter.RelationType, value);
			}
		}

		virtual public bool ExistRequestCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequestCounter.RelationType);
			}
		}

		virtual public void RemoveRequestCounter()
		{
			Strategy.RemoveCompositeRole(Meta.RequestCounter.RelationType);
		}


		virtual public GeneralLedgerAccount PurchasePaymentDifferencesAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.PurchasePaymentDifferencesAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchasePaymentDifferencesAccount.RelationType, value);
			}
		}

		virtual public bool ExistPurchasePaymentDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchasePaymentDifferencesAccount.RelationType);
			}
		}

		virtual public void RemovePurchasePaymentDifferencesAccount()
		{
			Strategy.RemoveCompositeRole(Meta.PurchasePaymentDifferencesAccount.RelationType);
		}


		virtual public GeneralLedgerAccount SuspenceAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.SuspenceAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SuspenceAccount.RelationType, value);
			}
		}

		virtual public bool ExistSuspenceAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SuspenceAccount.RelationType);
			}
		}

		virtual public void RemoveSuspenceAccount()
		{
			Strategy.RemoveCompositeRole(Meta.SuspenceAccount.RelationType);
		}


		virtual public GeneralLedgerAccount NetIncomeAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.NetIncomeAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NetIncomeAccount.RelationType, value);
			}
		}

		virtual public bool ExistNetIncomeAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NetIncomeAccount.RelationType);
			}
		}

		virtual public void RemoveNetIncomeAccount()
		{
			Strategy.RemoveCompositeRole(Meta.NetIncomeAccount.RelationType);
		}


		virtual public global::System.Boolean DoAccounting 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.DoAccounting.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DoAccounting.RelationType, value);
			}
		}

		virtual public bool ExistDoAccounting{
			get
			{
				return Strategy.ExistUnitRole(Meta.DoAccounting.RelationType);
			}
		}

		virtual public void RemoveDoAccounting()
		{
			Strategy.RemoveUnitRole(Meta.DoAccounting.RelationType);
		}


		virtual public Facility DefaultFacility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.DefaultFacility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultFacility.RelationType, value);
			}
		}

		virtual public bool ExistDefaultFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultFacility.RelationType);
			}
		}

		virtual public void RemoveDefaultFacility()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultFacility.RelationType);
		}


		virtual public GeneralLedgerAccount PurchasePaymentDiscountDifferencesAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.PurchasePaymentDiscountDifferencesAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchasePaymentDiscountDifferencesAccount.RelationType, value);
			}
		}

		virtual public bool ExistPurchasePaymentDiscountDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchasePaymentDiscountDifferencesAccount.RelationType);
			}
		}

		virtual public void RemovePurchasePaymentDiscountDifferencesAccount()
		{
			Strategy.RemoveCompositeRole(Meta.PurchasePaymentDiscountDifferencesAccount.RelationType);
		}


		virtual public global::System.String QuoteNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.QuoteNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.QuoteNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistQuoteNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.QuoteNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveQuoteNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.QuoteNumberPrefix.RelationType);
		}


		virtual public global::System.String PurchaseTransactionReferenceNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PurchaseTransactionReferenceNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PurchaseTransactionReferenceNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistPurchaseTransactionReferenceNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.PurchaseTransactionReferenceNumberPrefix.RelationType);
			}
		}

		virtual public void RemovePurchaseTransactionReferenceNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.PurchaseTransactionReferenceNumberPrefix.RelationType);
		}


		virtual public global::System.String TaxNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TaxNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistTaxNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.TaxNumber.RelationType);
			}
		}

		virtual public void RemoveTaxNumber()
		{
			Strategy.RemoveUnitRole(Meta.TaxNumber.RelationType);
		}


		virtual public GeneralLedgerAccount CalculationDifferencesAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.CalculationDifferencesAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CalculationDifferencesAccount.RelationType, value);
			}
		}

		virtual public bool ExistCalculationDifferencesAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CalculationDifferencesAccount.RelationType);
			}
		}

		virtual public void RemoveCalculationDifferencesAccount()
		{
			Strategy.RemoveCompositeRole(Meta.CalculationDifferencesAccount.RelationType);
		}


		virtual public global::System.String IncomingShipmentNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IncomingShipmentNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IncomingShipmentNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistIncomingShipmentNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.IncomingShipmentNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveIncomingShipmentNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.IncomingShipmentNumberPrefix.RelationType);
		}


		virtual public global::System.String RequestNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.RequestNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequestNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistRequestNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequestNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveRequestNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.RequestNumberPrefix.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentSalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentSalesReps.RelationType, value);
			}
		}

		virtual public void AddCurrentSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public void RemoveCurrentSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public bool ExistCurrentSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
		}

		virtual public void RemoveCurrentSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentSalesReps.RelationType);
		}


		virtual public global::Allors.Extent<Party> CurrentCustomers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentCustomers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentCustomers.RelationType, value);
			}
		}

		virtual public void AddCurrentCustomer (Party value)
		{
			Strategy.AddCompositeRole(Meta.CurrentCustomers.RelationType, value);
		}

		virtual public void RemoveCurrentCustomer (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentCustomers.RelationType, value);
		}

		virtual public bool ExistCurrentCustomers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentCustomers.RelationType);
			}
		}

		virtual public void RemoveCurrentCustomers()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentCustomers.RelationType);
		}


		virtual public global::Allors.Extent<Organisation> CurrentSuppliers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentSuppliers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentSuppliers.RelationType, value);
			}
		}

		virtual public void AddCurrentSupplier (Organisation value)
		{
			Strategy.AddCompositeRole(Meta.CurrentSuppliers.RelationType, value);
		}

		virtual public void RemoveCurrentSupplier (Organisation value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentSuppliers.RelationType, value);
		}

		virtual public bool ExistCurrentSuppliers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentSuppliers.RelationType);
			}
		}

		virtual public void RemoveCurrentSuppliers()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentSuppliers.RelationType);
		}


		virtual public global::Allors.Extent<BankAccount> BankAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BankAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BankAccounts.RelationType, value);
			}
		}

		virtual public void AddBankAccount (BankAccount value)
		{
			Strategy.AddCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public void RemoveBankAccount (BankAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public bool ExistBankAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BankAccounts.RelationType);
			}
		}

		virtual public void RemoveBankAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BankAccounts.RelationType);
		}


		virtual public PaymentMethod DefaultPaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultPaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPaymentMethod.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::Allors.Extent<Person> SalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SalesReps.RelationType, value);
			}
		}

		virtual public void AddSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.SalesReps.RelationType, value);
		}

		virtual public void RemoveSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.SalesReps.RelationType, value);
		}

		virtual public bool ExistSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SalesReps.RelationType);
			}
		}

		virtual public void RemoveSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.SalesReps.RelationType);
		}


		virtual public GeneralLedgerAccount GlAccount
		{ 
			get
			{
				return (GeneralLedgerAccount) Strategy.GetCompositeRole(Meta.GlAccount.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GlAccount.RelationType, value);
			}
		}

		virtual public bool ExistGlAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GlAccount.RelationType);
			}
		}

		virtual public void RemoveGlAccount()
		{
			Strategy.RemoveCompositeRole(Meta.GlAccount.RelationType);
		}


		virtual public ContactMechanism BillingAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingAddress.RelationType, value);
			}
		}

		virtual public bool ExistBillingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingAddress.RelationType);
			}
		}

		virtual public void RemoveBillingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.BillingAddress.RelationType);
		}


		virtual public ContactMechanism OrderAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderAddress.RelationType, value);
			}
		}

		virtual public bool ExistOrderAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderAddress.RelationType);
			}
		}

		virtual public void RemoveOrderAddress()
		{
			Strategy.RemoveCompositeRole(Meta.OrderAddress.RelationType);
		}


		virtual public PostalAddress ShippingAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShippingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAddress.RelationType, value);
			}
		}

		virtual public bool ExistShippingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAddress.RelationType);
			}
		}

		virtual public void RemoveShippingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAddress.RelationType);
		}


		virtual public ContactMechanism BillingInquiriesFax
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesFax.RelationType);
		}


		virtual public ContactMechanism BillingInquiriesPhone
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesPhone.RelationType);
		}


		virtual public ContactMechanism CellPhoneNumber
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CellPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistCellPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveCellPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.CellPhoneNumber.RelationType);
		}


		virtual public ContactMechanism GeneralFaxNumber
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralFaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralFaxNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralFaxNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralFaxNumber.RelationType);
		}


		virtual public ContactMechanism GeneralPhoneNumber
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralPhoneNumber.RelationType);
		}


		virtual public ContactMechanism HeadQuarter
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HeadQuarter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HeadQuarter.RelationType, value);
			}
		}

		virtual public bool ExistHeadQuarter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HeadQuarter.RelationType);
			}
		}

		virtual public void RemoveHeadQuarter()
		{
			Strategy.RemoveCompositeRole(Meta.HeadQuarter.RelationType);
		}


		virtual public ContactMechanism InternetAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.InternetAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternetAddress.RelationType, value);
			}
		}

		virtual public bool ExistInternetAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternetAddress.RelationType);
			}
		}

		virtual public void RemoveInternetAddress()
		{
			Strategy.RemoveCompositeRole(Meta.InternetAddress.RelationType);
		}


		virtual public ContactMechanism OrderInquiriesFax
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesFax.RelationType);
		}


		virtual public ContactMechanism OrderInquiriesPhone
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesPhone.RelationType);
		}


		virtual public ContactMechanism GeneralEmailAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.GeneralEmailAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralEmailAddress.RelationType, value);
			}
		}

		virtual public bool ExistGeneralEmailAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralEmailAddress.RelationType);
			}
		}

		virtual public void RemoveGeneralEmailAddress()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralEmailAddress.RelationType);
		}


		virtual public ContactMechanism SalesOffice
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.SalesOffice.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOffice.RelationType, value);
			}
		}

		virtual public bool ExistSalesOffice
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOffice.RelationType);
			}
		}

		virtual public void RemoveSalesOffice()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOffice.RelationType);
		}


		virtual public ContactMechanism ShippingInquiriesFax
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesFax.RelationType);
		}


		virtual public ContactMechanism ShippingInquiriesPhone
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
		}


		virtual public PostalAddress GeneralCorrespondence
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralCorrespondence.RelationType, value);
			}
		}

		virtual public bool ExistGeneralCorrespondence
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
		}

		virtual public void RemoveGeneralCorrespondence()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralCorrespondence.RelationType);
		}


		virtual public global::Allors.Extent<Party> ActiveCustomers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ActiveCustomers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ActiveCustomers.RelationType, value);
			}
		}

		virtual public void AddActiveCustomer (Party value)
		{
			Strategy.AddCompositeRole(Meta.ActiveCustomers.RelationType, value);
		}

		virtual public void RemoveActiveCustomer (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.ActiveCustomers.RelationType, value);
		}

		virtual public bool ExistActiveCustomers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ActiveCustomers.RelationType);
			}
		}

		virtual public void RemoveActiveCustomers()
		{
			Strategy.RemoveCompositeRoles(Meta.ActiveCustomers.RelationType);
		}


		virtual public global::Allors.Extent<Person> ActiveEmployees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ActiveEmployees.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ActiveEmployees.RelationType, value);
			}
		}

		virtual public void AddActiveEmployee (Person value)
		{
			Strategy.AddCompositeRole(Meta.ActiveEmployees.RelationType, value);
		}

		virtual public void RemoveActiveEmployee (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.ActiveEmployees.RelationType, value);
		}

		virtual public bool ExistActiveEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ActiveEmployees.RelationType);
			}
		}

		virtual public void RemoveActiveEmployees()
		{
			Strategy.RemoveCompositeRoles(Meta.ActiveEmployees.RelationType);
		}


		virtual public global::Allors.Extent<Party> ActiveSuppliers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ActiveSuppliers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ActiveSuppliers.RelationType, value);
			}
		}

		virtual public void AddActiveSupplier (Party value)
		{
			Strategy.AddCompositeRole(Meta.ActiveSuppliers.RelationType, value);
		}

		virtual public void RemoveActiveSupplier (Party value)
		{
			Strategy.RemoveCompositeRole(Meta.ActiveSuppliers.RelationType, value);
		}

		virtual public bool ExistActiveSuppliers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ActiveSuppliers.RelationType);
			}
		}

		virtual public void RemoveActiveSuppliers()
		{
			Strategy.RemoveCompositeRoles(Meta.ActiveSuppliers.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<Singleton> SingletonsWhereInternalOrganisation
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereInternalOrganisation.RelationType);
			}
		}

		virtual public bool ExistSingletonsWhereInternalOrganisation
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereInternalOrganisation.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new InternalOrganisationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new InternalOrganisationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new InternalOrganisationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new InternalOrganisationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new InternalOrganisationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new InternalOrganisationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new InternalOrganisationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new InternalOrganisationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new InternalOrganisationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new InternalOrganisationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class InternalOrganisationBuilder : Allors.ObjectBuilder<InternalOrganisation> , UniquelyIdentifiableBuilder, AuditableBuilder, global::System.IDisposable
	{		
		public InternalOrganisationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(InternalOrganisation instance)
		{

			instance.PurchaseOrderNumberPrefix = this.PurchaseOrderNumberPrefix;
		
		

			instance.TransactionReferenceNumber = this.TransactionReferenceNumber;
		
		
			

			if(this.MaximumAllowedPaymentDifference.HasValue)
			{
				instance.MaximumAllowedPaymentDifference = this.MaximumAllowedPaymentDifference.Value;
			}			
		
		

			instance.Name = this.Name;
		
		

			instance.PurchaseTransactionReferenceNumber = this.PurchaseTransactionReferenceNumber;
		
		
			

			if(this.FiscalYearStartMonth.HasValue)
			{
				instance.FiscalYearStartMonth = this.FiscalYearStartMonth.Value;
			}			
		
		
			

			if(this.VatDeactivated.HasValue)
			{
				instance.VatDeactivated = this.VatDeactivated.Value;
			}			
		
		
			

			if(this.FiscalYearStartDay.HasValue)
			{
				instance.FiscalYearStartDay = this.FiscalYearStartDay.Value;
			}			
		
		

			instance.PurchaseInvoiceNumberPrefix = this.PurchaseInvoiceNumberPrefix;
		
		

			instance.TransactionReferenceNumberPrefix = this.TransactionReferenceNumberPrefix;
		
		
			

			if(this.DoAccounting.HasValue)
			{
				instance.DoAccounting = this.DoAccounting.Value;
			}			
		
		

			instance.QuoteNumberPrefix = this.QuoteNumberPrefix;
		
		

			instance.PurchaseTransactionReferenceNumberPrefix = this.PurchaseTransactionReferenceNumberPrefix;
		
		

			instance.TaxNumber = this.TaxNumber;
		
		

			instance.IncomingShipmentNumberPrefix = this.IncomingShipmentNumberPrefix;
		
		

			instance.RequestNumberPrefix = this.RequestNumberPrefix;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		
			if(this.JournalEntryNumbers!=null)
			{
				instance.JournalEntryNumbers = this.JournalEntryNumbers.ToArray();
			}
		

			instance.EuListingState = this.EuListingState;

		

			instance.PurchaseInvoiceCounter = this.PurchaseInvoiceCounter;

		

			instance.ActualAccountingPeriod = this.ActualAccountingPeriod;

		

			instance.InvoiceSequence = this.InvoiceSequence;

				

			instance.LogoImage = this.LogoImage;

		

			instance.CostCenterSplitMethod = this.CostCenterSplitMethod;

		

			instance.PurchaseOrderCounter = this.PurchaseOrderCounter;

		

			instance.LegalForm = this.LegalForm;

		

			instance.SalesPaymentDifferencesAccount = this.SalesPaymentDifferencesAccount;

		

			instance.CostOfGoodsSoldMethod = this.CostOfGoodsSoldMethod;

				

			instance.AccountingTransactionCounter = this.AccountingTransactionCounter;

		

			instance.IncomingShipmentCounter = this.IncomingShipmentCounter;

		

			instance.RetainedEarningsAccount = this.RetainedEarningsAccount;

		

			instance.SalesPaymentDiscountDifferencesAccount = this.SalesPaymentDiscountDifferencesAccount;

		

			instance.SubAccountCounter = this.SubAccountCounter;

		
			if(this.AccountingTransactionNumbers!=null)
			{
				instance.AccountingTransactionNumbers = this.AccountingTransactionNumbers.ToArray();
			}
		

			instance.QuoteCounter = this.QuoteCounter;

		

			instance.RequestCounter = this.RequestCounter;

		

			instance.PurchasePaymentDifferencesAccount = this.PurchasePaymentDifferencesAccount;

		

			instance.SuspenceAccount = this.SuspenceAccount;

		

			instance.NetIncomeAccount = this.NetIncomeAccount;

		

			instance.DefaultFacility = this.DefaultFacility;

		

			instance.PurchasePaymentDiscountDifferencesAccount = this.PurchasePaymentDiscountDifferencesAccount;

		

			instance.CalculationDifferencesAccount = this.CalculationDifferencesAccount;

		
			if(this.CurrentSalesReps!=null)
			{
				instance.CurrentSalesReps = this.CurrentSalesReps.ToArray();
			}
		
			if(this.CurrentCustomers!=null)
			{
				instance.CurrentCustomers = this.CurrentCustomers.ToArray();
			}
		
			if(this.CurrentSuppliers!=null)
			{
				instance.CurrentSuppliers = this.CurrentSuppliers.ToArray();
			}
		
			if(this.BankAccounts!=null)
			{
				instance.BankAccounts = this.BankAccounts.ToArray();
			}
		

			instance.DefaultPaymentMethod = this.DefaultPaymentMethod;

		

			instance.VatRegime = this.VatRegime;

		
			if(this.SalesReps!=null)
			{
				instance.SalesReps = this.SalesReps.ToArray();
			}
		

			instance.GlAccount = this.GlAccount;

		

			instance.BillingAddress = this.BillingAddress;

		

			instance.OrderAddress = this.OrderAddress;

		

			instance.ShippingAddress = this.ShippingAddress;

		

			instance.BillingInquiriesFax = this.BillingInquiriesFax;

		

			instance.BillingInquiriesPhone = this.BillingInquiriesPhone;

		

			instance.CellPhoneNumber = this.CellPhoneNumber;

		

			instance.GeneralFaxNumber = this.GeneralFaxNumber;

		

			instance.GeneralPhoneNumber = this.GeneralPhoneNumber;

		

			instance.HeadQuarter = this.HeadQuarter;

		

			instance.InternetAddress = this.InternetAddress;

		

			instance.OrderInquiriesFax = this.OrderInquiriesFax;

		

			instance.OrderInquiriesPhone = this.OrderInquiriesPhone;

		

			instance.GeneralEmailAddress = this.GeneralEmailAddress;

		

			instance.SalesOffice = this.SalesOffice;

		

			instance.ShippingInquiriesFax = this.ShippingInquiriesFax;

		

			instance.ShippingInquiriesPhone = this.ShippingInquiriesPhone;

		

			instance.GeneralCorrespondence = this.GeneralCorrespondence;

								

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String PurchaseOrderNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseOrderNumberPrefix(global::System.String value)
		        {
				    if(this.PurchaseOrderNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PurchaseOrderNumberPrefix = value;
		            return this;
		        }	

				public global::System.String TransactionReferenceNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithTransactionReferenceNumber(global::System.String value)
		        {
				    if(this.TransactionReferenceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionReferenceNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<JournalEntryNumber> JournalEntryNumbers {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithJournalEntryNumber(JournalEntryNumber value)
		        {
					if(this.JournalEntryNumbers == null)
					{
						this.JournalEntryNumbers = new global::System.Collections.Generic.List<JournalEntryNumber>(); 
					}
		            this.JournalEntryNumbers.Add(value);
		            return this;
		        }		

				
				public Country EuListingState {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithEuListingState(Country value)
		        {
		            if(this.EuListingState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EuListingState = value;
		            return this;
		        }		

				
				public Counter PurchaseInvoiceCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseInvoiceCounter(Counter value)
		        {
		            if(this.PurchaseInvoiceCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseInvoiceCounter = value;
		            return this;
		        }		

				
				public AccountingPeriod ActualAccountingPeriod {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithActualAccountingPeriod(AccountingPeriod value)
		        {
		            if(this.ActualAccountingPeriod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ActualAccountingPeriod = value;
		            return this;
		        }		

				
				public InvoiceSequence InvoiceSequence {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithInvoiceSequence(InvoiceSequence value)
		        {
		            if(this.InvoiceSequence!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InvoiceSequence = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaximumAllowedPaymentDifference {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithMaximumAllowedPaymentDifference(global::System.Decimal? value)
		        {
				    if(this.MaximumAllowedPaymentDifference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaximumAllowedPaymentDifference = value;
		            return this;
		        }	

				public Media LogoImage {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithLogoImage(Media value)
		        {
		            if(this.LogoImage!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LogoImage = value;
		            return this;
		        }		

				
				public CostCenterSplitMethod CostCenterSplitMethod {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCostCenterSplitMethod(CostCenterSplitMethod value)
		        {
		            if(this.CostCenterSplitMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CostCenterSplitMethod = value;
		            return this;
		        }		

				
				public Counter PurchaseOrderCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseOrderCounter(Counter value)
		        {
		            if(this.PurchaseOrderCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchaseOrderCounter = value;
		            return this;
		        }		

				
				public LegalForm LegalForm {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithLegalForm(LegalForm value)
		        {
		            if(this.LegalForm!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LegalForm = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount SalesPaymentDifferencesAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithSalesPaymentDifferencesAccount(GeneralLedgerAccount value)
		        {
		            if(this.SalesPaymentDifferencesAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesPaymentDifferencesAccount = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String PurchaseTransactionReferenceNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseTransactionReferenceNumber(global::System.String value)
		        {
				    if(this.PurchaseTransactionReferenceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PurchaseTransactionReferenceNumber = value;
		            return this;
		        }	

				public global::System.Int32? FiscalYearStartMonth {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithFiscalYearStartMonth(global::System.Int32? value)
		        {
				    if(this.FiscalYearStartMonth!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FiscalYearStartMonth = value;
		            return this;
		        }	

				public CostOfGoodsSoldMethod CostOfGoodsSoldMethod {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCostOfGoodsSoldMethod(CostOfGoodsSoldMethod value)
		        {
		            if(this.CostOfGoodsSoldMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CostOfGoodsSoldMethod = value;
		            return this;
		        }		

				
				public global::System.Boolean? VatDeactivated {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithVatDeactivated(global::System.Boolean? value)
		        {
				    if(this.VatDeactivated!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.VatDeactivated = value;
		            return this;
		        }	

				public global::System.Int32? FiscalYearStartDay {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithFiscalYearStartDay(global::System.Int32? value)
		        {
				    if(this.FiscalYearStartDay!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FiscalYearStartDay = value;
		            return this;
		        }	

				public Counter AccountingTransactionCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithAccountingTransactionCounter(Counter value)
		        {
		            if(this.AccountingTransactionCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AccountingTransactionCounter = value;
		            return this;
		        }		

				
				public Counter IncomingShipmentCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithIncomingShipmentCounter(Counter value)
		        {
		            if(this.IncomingShipmentCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.IncomingShipmentCounter = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount RetainedEarningsAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithRetainedEarningsAccount(GeneralLedgerAccount value)
		        {
		            if(this.RetainedEarningsAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RetainedEarningsAccount = value;
		            return this;
		        }		

				
				public global::System.String PurchaseInvoiceNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseInvoiceNumberPrefix(global::System.String value)
		        {
				    if(this.PurchaseInvoiceNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PurchaseInvoiceNumberPrefix = value;
		            return this;
		        }	

				public GeneralLedgerAccount SalesPaymentDiscountDifferencesAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithSalesPaymentDiscountDifferencesAccount(GeneralLedgerAccount value)
		        {
		            if(this.SalesPaymentDiscountDifferencesAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesPaymentDiscountDifferencesAccount = value;
		            return this;
		        }		

				
				public Counter SubAccountCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithSubAccountCounter(Counter value)
		        {
		            if(this.SubAccountCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SubAccountCounter = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<AccountingTransactionNumber> AccountingTransactionNumbers {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithAccountingTransactionNumber(AccountingTransactionNumber value)
		        {
					if(this.AccountingTransactionNumbers == null)
					{
						this.AccountingTransactionNumbers = new global::System.Collections.Generic.List<AccountingTransactionNumber>(); 
					}
		            this.AccountingTransactionNumbers.Add(value);
		            return this;
		        }		

				
				public global::System.String TransactionReferenceNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithTransactionReferenceNumberPrefix(global::System.String value)
		        {
				    if(this.TransactionReferenceNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionReferenceNumberPrefix = value;
		            return this;
		        }	

				public Counter QuoteCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithQuoteCounter(Counter value)
		        {
		            if(this.QuoteCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteCounter = value;
		            return this;
		        }		

				
				public Counter RequestCounter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithRequestCounter(Counter value)
		        {
		            if(this.RequestCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequestCounter = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount PurchasePaymentDifferencesAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchasePaymentDifferencesAccount(GeneralLedgerAccount value)
		        {
		            if(this.PurchasePaymentDifferencesAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchasePaymentDifferencesAccount = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount SuspenceAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithSuspenceAccount(GeneralLedgerAccount value)
		        {
		            if(this.SuspenceAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SuspenceAccount = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount NetIncomeAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithNetIncomeAccount(GeneralLedgerAccount value)
		        {
		            if(this.NetIncomeAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NetIncomeAccount = value;
		            return this;
		        }		

				
				public global::System.Boolean? DoAccounting {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithDoAccounting(global::System.Boolean? value)
		        {
				    if(this.DoAccounting!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DoAccounting = value;
		            return this;
		        }	

				public Facility DefaultFacility {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithDefaultFacility(Facility value)
		        {
		            if(this.DefaultFacility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultFacility = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount PurchasePaymentDiscountDifferencesAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchasePaymentDiscountDifferencesAccount(GeneralLedgerAccount value)
		        {
		            if(this.PurchasePaymentDiscountDifferencesAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PurchasePaymentDiscountDifferencesAccount = value;
		            return this;
		        }		

				
				public global::System.String QuoteNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithQuoteNumberPrefix(global::System.String value)
		        {
				    if(this.QuoteNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuoteNumberPrefix = value;
		            return this;
		        }	

				public global::System.String PurchaseTransactionReferenceNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithPurchaseTransactionReferenceNumberPrefix(global::System.String value)
		        {
				    if(this.PurchaseTransactionReferenceNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PurchaseTransactionReferenceNumberPrefix = value;
		            return this;
		        }	

				public global::System.String TaxNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithTaxNumber(global::System.String value)
		        {
				    if(this.TaxNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TaxNumber = value;
		            return this;
		        }	

				public GeneralLedgerAccount CalculationDifferencesAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCalculationDifferencesAccount(GeneralLedgerAccount value)
		        {
		            if(this.CalculationDifferencesAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CalculationDifferencesAccount = value;
		            return this;
		        }		

				
				public global::System.String IncomingShipmentNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithIncomingShipmentNumberPrefix(global::System.String value)
		        {
				    if(this.IncomingShipmentNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IncomingShipmentNumberPrefix = value;
		            return this;
		        }	

				public global::System.String RequestNumberPrefix {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithRequestNumberPrefix(global::System.String value)
		        {
				    if(this.RequestNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequestNumberPrefix = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> CurrentSalesReps {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithCurrentSalesRep(Person value)
		        {
					if(this.CurrentSalesReps == null)
					{
						this.CurrentSalesReps = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.CurrentSalesReps.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> CurrentCustomers {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithCurrentCustomer(Party value)
		        {
					if(this.CurrentCustomers == null)
					{
						this.CurrentCustomers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.CurrentCustomers.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Organisation> CurrentSuppliers {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithCurrentSupplier(Organisation value)
		        {
					if(this.CurrentSuppliers == null)
					{
						this.CurrentSuppliers = new global::System.Collections.Generic.List<Organisation>(); 
					}
		            this.CurrentSuppliers.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BankAccount> BankAccounts {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithBankAccount(BankAccount value)
		        {
					if(this.BankAccounts == null)
					{
						this.BankAccounts = new global::System.Collections.Generic.List<BankAccount>(); 
					}
		            this.BankAccounts.Add(value);
		            return this;
		        }		

				
				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Person> SalesReps {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithSalesRep(Person value)
		        {
					if(this.SalesReps == null)
					{
						this.SalesReps = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.SalesReps.Add(value);
		            return this;
		        }		

				
				public GeneralLedgerAccount GlAccount {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithGlAccount(GeneralLedgerAccount value)
		        {
		            if(this.GlAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GlAccount = value;
		            return this;
		        }		

				
				public ContactMechanism BillingAddress {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithBillingAddress(ContactMechanism value)
		        {
		            if(this.BillingAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingAddress = value;
		            return this;
		        }		

				
				public ContactMechanism OrderAddress {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithOrderAddress(ContactMechanism value)
		        {
		            if(this.OrderAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderAddress = value;
		            return this;
		        }		

				
				public PostalAddress ShippingAddress {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithShippingAddress(PostalAddress value)
		        {
		            if(this.ShippingAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAddress = value;
		            return this;
		        }		

				
				public ContactMechanism BillingInquiriesFax {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithBillingInquiriesFax(ContactMechanism value)
		        {
		            if(this.BillingInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingInquiriesFax = value;
		            return this;
		        }		

				
				public ContactMechanism BillingInquiriesPhone {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithBillingInquiriesPhone(ContactMechanism value)
		        {
		            if(this.BillingInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingInquiriesPhone = value;
		            return this;
		        }		

				
				public ContactMechanism CellPhoneNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCellPhoneNumber(ContactMechanism value)
		        {
		            if(this.CellPhoneNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CellPhoneNumber = value;
		            return this;
		        }		

				
				public ContactMechanism GeneralFaxNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithGeneralFaxNumber(ContactMechanism value)
		        {
		            if(this.GeneralFaxNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralFaxNumber = value;
		            return this;
		        }		

				
				public ContactMechanism GeneralPhoneNumber {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithGeneralPhoneNumber(ContactMechanism value)
		        {
		            if(this.GeneralPhoneNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralPhoneNumber = value;
		            return this;
		        }		

				
				public ContactMechanism HeadQuarter {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithHeadQuarter(ContactMechanism value)
		        {
		            if(this.HeadQuarter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.HeadQuarter = value;
		            return this;
		        }		

				
				public ContactMechanism InternetAddress {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithInternetAddress(ContactMechanism value)
		        {
		            if(this.InternetAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternetAddress = value;
		            return this;
		        }		

				
				public ContactMechanism OrderInquiriesFax {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithOrderInquiriesFax(ContactMechanism value)
		        {
		            if(this.OrderInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderInquiriesFax = value;
		            return this;
		        }		

				
				public ContactMechanism OrderInquiriesPhone {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithOrderInquiriesPhone(ContactMechanism value)
		        {
		            if(this.OrderInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderInquiriesPhone = value;
		            return this;
		        }		

				
				public ContactMechanism GeneralEmailAddress {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithGeneralEmailAddress(ContactMechanism value)
		        {
		            if(this.GeneralEmailAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralEmailAddress = value;
		            return this;
		        }		

				
				public ContactMechanism SalesOffice {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithSalesOffice(ContactMechanism value)
		        {
		            if(this.SalesOffice!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOffice = value;
		            return this;
		        }		

				
				public ContactMechanism ShippingInquiriesFax {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithShippingInquiriesFax(ContactMechanism value)
		        {
		            if(this.ShippingInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingInquiriesFax = value;
		            return this;
		        }		

				
				public ContactMechanism ShippingInquiriesPhone {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithShippingInquiriesPhone(ContactMechanism value)
		        {
		            if(this.ShippingInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingInquiriesPhone = value;
		            return this;
		        }		

				
				public PostalAddress GeneralCorrespondence {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithGeneralCorrespondence(PostalAddress value)
		        {
		            if(this.GeneralCorrespondence!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralCorrespondence = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public InternalOrganisationBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public InternalOrganisationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class InternalOrganisations : global::Allors.ObjectsBase<InternalOrganisation>
	{
		public InternalOrganisations(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaInternalOrganisation Meta
		{
			get
			{
				return Allors.Meta.MetaInternalOrganisation.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}