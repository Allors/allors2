// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PartSpecification : Allors.IObject , UniquelyIdentifiable, Commentable, Transitional, Versioned
	{
		private readonly IStrategy strategy;

		public PartSpecification(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPartSpecification Meta
		{
			get
			{
				return Allors.Meta.MetaPartSpecification.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PartSpecification Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PartSpecification) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public PartSpecificationState PreviousPartSpecificationState
		{ 
			get
			{
				return (PartSpecificationState) Strategy.GetCompositeRole(Meta.PreviousPartSpecificationState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPartSpecificationState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPartSpecificationState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPartSpecificationState.RelationType);
			}
		}

		virtual public void RemovePreviousPartSpecificationState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPartSpecificationState.RelationType);
		}


		virtual public PartSpecificationState LastPartSpecificationState
		{ 
			get
			{
				return (PartSpecificationState) Strategy.GetCompositeRole(Meta.LastPartSpecificationState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPartSpecificationState.RelationType, value);
			}
		}

		virtual public bool ExistLastPartSpecificationState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPartSpecificationState.RelationType);
			}
		}

		virtual public void RemoveLastPartSpecificationState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPartSpecificationState.RelationType);
		}


		virtual public PartSpecificationState PartSpecificationState
		{ 
			get
			{
				return (PartSpecificationState) Strategy.GetCompositeRole(Meta.PartSpecificationState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PartSpecificationState.RelationType, value);
			}
		}

		virtual public bool ExistPartSpecificationState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PartSpecificationState.RelationType);
			}
		}

		virtual public void RemovePartSpecificationState()
		{
			Strategy.RemoveCompositeRole(Meta.PartSpecificationState.RelationType);
		}


		virtual public PartSpecificationVersion CurrentVersion
		{ 
			get
			{
				return (PartSpecificationVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PartSpecificationVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PartSpecificationVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PartSpecificationVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public global::System.DateTime? DocumentationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DocumentationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DocumentationDate.RelationType, value);
			}
		}

		virtual public bool ExistDocumentationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.DocumentationDate.RelationType);
			}
		}

		virtual public void RemoveDocumentationDate()
		{
			Strategy.RemoveUnitRole(Meta.DocumentationDate.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<EngineeringChange> EngineeringChangesWherePartSpecification
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngineeringChangesWherePartSpecification.RelationType);
			}
		}

		virtual public bool ExistEngineeringChangesWherePartSpecification
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngineeringChangesWherePartSpecification.RelationType);
			}
		}


		virtual public Part PartWherePartSpecification
		{ 
			get
			{
				return (Part) Strategy.GetCompositeAssociation(Meta.PartWherePartSpecification.RelationType);
			}
		} 

		virtual public bool ExistPartWherePartSpecification
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartWherePartSpecification.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public PartSpecificationApprove Approve()
		{ 
			var method = new PartSpecificationApprove(this);
            method.Execute();
            return method;
		}

		public PartSpecificationApprove Approve(System.Action<PartSpecificationApprove> action)
		{ 
			var method = new PartSpecificationApprove(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PartSpecificationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PartSpecificationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PartSpecificationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PartSpecificationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PartSpecificationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PartSpecificationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PartSpecificationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PartSpecificationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PartSpecificationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PartSpecificationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PartSpecificationBuilder : Allors.ObjectBuilder<PartSpecification> , UniquelyIdentifiableBuilder, CommentableBuilder, TransitionalBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PartSpecificationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PartSpecification instance)
		{
			

			if(this.DocumentationDate.HasValue)
			{
				instance.DocumentationDate = this.DocumentationDate.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Comment = this.Comment;
		
		
				

			instance.PartSpecificationState = this.PartSpecificationState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public PartSpecificationState PartSpecificationState {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithPartSpecificationState(PartSpecificationState value)
		        {
		            if(this.PartSpecificationState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartSpecificationState = value;
		            return this;
		        }		

				
				public PartSpecificationVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithCurrentVersion(PartSpecificationVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartSpecificationVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PartSpecificationBuilder WithAllVersion(PartSpecificationVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PartSpecificationVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? DocumentationDate {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithDocumentationDate(global::System.DateTime? value)
		        {
				    if(this.DocumentationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DocumentationDate = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PartSpecificationBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PartSpecificationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PartSpecificationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PartSpecifications : global::Allors.ObjectsBase<PartSpecification>
	{
		public PartSpecifications(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPartSpecification Meta
		{
			get
			{
				return Allors.Meta.MetaPartSpecification.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}