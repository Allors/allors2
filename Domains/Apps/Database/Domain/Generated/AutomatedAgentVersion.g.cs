// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class AutomatedAgentVersion : Allors.IObject , PartyVersion
	{
		private readonly IStrategy strategy;

		public AutomatedAgentVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaAutomatedAgentVersion Meta
		{
			get
			{
				return Allors.Meta.MetaAutomatedAgentVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static AutomatedAgentVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AutomatedAgentVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment.RelationType, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment.RelationType);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment.RelationType);
		}


		virtual public User CreatedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.CreatedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CreatedBy.RelationType, value);
			}
		}

		virtual public bool ExistCreatedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CreatedBy.RelationType);
			}
		}

		virtual public void RemoveCreatedBy()
		{
			Strategy.RemoveCompositeRole(Meta.CreatedBy.RelationType);
		}


		virtual public User LastModifiedBy
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.LastModifiedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastModifiedBy.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastModifiedBy.RelationType);
			}
		}

		virtual public void RemoveLastModifiedBy()
		{
			Strategy.RemoveCompositeRole(Meta.LastModifiedBy.RelationType);
		}


		virtual public global::System.DateTime? CreationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::System.DateTime? LastModifiedDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastModifiedDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastModifiedDate.RelationType, value);
			}
		}

		virtual public bool ExistLastModifiedDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastModifiedDate.RelationType);
			}
		}

		virtual public void RemoveLastModifiedDate()
		{
			Strategy.RemoveUnitRole(Meta.LastModifiedDate.RelationType);
		}


		virtual public global::System.String PartyName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PartyName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PartyName.RelationType, value);
			}
		}

		virtual public bool ExistPartyName{
			get
			{
				return Strategy.ExistUnitRole(Meta.PartyName.RelationType);
			}
		}

		virtual public void RemovePartyName()
		{
			Strategy.RemoveUnitRole(Meta.PartyName.RelationType);
		}


		virtual public PostalAddress GeneralCorrespondence
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralCorrespondence.RelationType, value);
			}
		}

		virtual public bool ExistGeneralCorrespondence
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralCorrespondence.RelationType);
			}
		}

		virtual public void RemoveGeneralCorrespondence()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralCorrespondence.RelationType);
		}


		virtual public global::System.Decimal YTDRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.YTDRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.YTDRevenue.RelationType, value);
			}
		}

		virtual public bool ExistYTDRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.YTDRevenue.RelationType);
			}
		}

		virtual public void RemoveYTDRevenue()
		{
			Strategy.RemoveUnitRole(Meta.YTDRevenue.RelationType);
		}


		virtual public global::System.Decimal LastYearsRevenue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.LastYearsRevenue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastYearsRevenue.RelationType, value);
			}
		}

		virtual public bool ExistLastYearsRevenue{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastYearsRevenue.RelationType);
			}
		}

		virtual public void RemoveLastYearsRevenue()
		{
			Strategy.RemoveUnitRole(Meta.LastYearsRevenue.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Qualification> Qualifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Qualifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Qualifications.RelationType, value);
			}
		}

		virtual public void AddQualification (Qualification value)
		{
			Strategy.AddCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public void RemoveQualification (Qualification value)
		{
			Strategy.RemoveCompositeRole(Meta.Qualifications.RelationType, value);
		}

		virtual public bool ExistQualifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Qualifications.RelationType);
			}
		}

		virtual public void RemoveQualifications()
		{
			Strategy.RemoveCompositeRoles(Meta.Qualifications.RelationType);
		}


		virtual public ContactMechanism HomeAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HomeAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HomeAddress.RelationType, value);
			}
		}

		virtual public bool ExistHomeAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HomeAddress.RelationType);
			}
		}

		virtual public void RemoveHomeAddress()
		{
			Strategy.RemoveCompositeRole(Meta.HomeAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> InactiveOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveInactiveOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistInactiveOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveInactiveOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveOrganisationContactRelationships.RelationType);
		}


		virtual public ContactMechanism SalesOffice
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.SalesOffice.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOffice.RelationType, value);
			}
		}

		virtual public bool ExistSalesOffice
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOffice.RelationType);
			}
		}

		virtual public void RemoveSalesOffice()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOffice.RelationType);
		}


		virtual public global::Allors.Extent<Person> InactiveContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactiveContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactiveContacts.RelationType, value);
			}
		}

		virtual public void AddInactiveContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public void RemoveInactiveContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.InactiveContacts.RelationType, value);
		}

		virtual public bool ExistInactiveContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactiveContacts.RelationType);
			}
		}

		virtual public void RemoveInactiveContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.InactiveContacts.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> InactivePartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveInactivePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.InactivePartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistInactivePartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveInactivePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.InactivePartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesFax.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentSalesReps
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentSalesReps.RelationType, value);
			}
		}

		virtual public void AddCurrentSalesRep (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public void RemoveCurrentSalesRep (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentSalesReps.RelationType, value);
		}

		virtual public bool ExistCurrentSalesReps
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentSalesReps.RelationType);
			}
		}

		virtual public void RemoveCurrentSalesReps()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentSalesReps.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> PartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public void RemovePartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemovePartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesFax
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesFax.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesFax
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesFax.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesFax()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesFax.RelationType);
		}


		virtual public TelecommunicationsNumber ShippingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistShippingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveShippingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<BillingAccount> BillingAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BillingAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BillingAccounts.RelationType, value);
			}
		}

		virtual public void AddBillingAccount (BillingAccount value)
		{
			Strategy.AddCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public void RemoveBillingAccount (BillingAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BillingAccounts.RelationType, value);
		}

		virtual public bool ExistBillingAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BillingAccounts.RelationType);
			}
		}

		virtual public void RemoveBillingAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BillingAccounts.RelationType);
		}


		virtual public TelecommunicationsNumber OrderInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistOrderInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveOrderInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.OrderInquiriesPhone.RelationType);
		}


		virtual public global::Allors.Extent<PartySkill> PartySkills
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartySkills.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartySkills.RelationType, value);
			}
		}

		virtual public void AddPartySkill (PartySkill value)
		{
			Strategy.AddCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public void RemovePartySkill (PartySkill value)
		{
			Strategy.RemoveCompositeRole(Meta.PartySkills.RelationType, value);
		}

		virtual public bool ExistPartySkills
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartySkills.RelationType);
			}
		}

		virtual public void RemovePartySkills()
		{
			Strategy.RemoveCompositeRoles(Meta.PartySkills.RelationType);
		}


		virtual public global::Allors.Extent<PartyClassification> PartyClassifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartyClassifications.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartyClassifications.RelationType, value);
			}
		}

		virtual public void AddPartyClassification (PartyClassification value)
		{
			Strategy.AddCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public void RemovePartyClassification (PartyClassification value)
		{
			Strategy.RemoveCompositeRole(Meta.PartyClassifications.RelationType, value);
		}

		virtual public bool ExistPartyClassifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartyClassifications.RelationType);
			}
		}

		virtual public void RemovePartyClassifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PartyClassifications.RelationType);
		}


		virtual public global::System.Boolean? ExcludeFromDunning 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ExcludeFromDunning.RelationType, value);
			}
		}

		virtual public bool ExistExcludeFromDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.ExcludeFromDunning.RelationType);
			}
		}

		virtual public void RemoveExcludeFromDunning()
		{
			Strategy.RemoveUnitRole(Meta.ExcludeFromDunning.RelationType);
		}


		virtual public global::Allors.Extent<BankAccount> BankAccounts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BankAccounts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BankAccounts.RelationType, value);
			}
		}

		virtual public void AddBankAccount (BankAccount value)
		{
			Strategy.AddCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public void RemoveBankAccount (BankAccount value)
		{
			Strategy.RemoveCompositeRole(Meta.BankAccounts.RelationType, value);
		}

		virtual public bool ExistBankAccounts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BankAccounts.RelationType);
			}
		}

		virtual public void RemoveBankAccounts()
		{
			Strategy.RemoveCompositeRoles(Meta.BankAccounts.RelationType);
		}


		virtual public global::Allors.Extent<Person> CurrentContacts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentContacts.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentContacts.RelationType, value);
			}
		}

		virtual public void AddCurrentContact (Person value)
		{
			Strategy.AddCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public void RemoveCurrentContact (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentContacts.RelationType, value);
		}

		virtual public bool ExistCurrentContacts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentContacts.RelationType);
			}
		}

		virtual public void RemoveCurrentContacts()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentContacts.RelationType);
		}


		virtual public ContactMechanism BillingAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingAddress.RelationType, value);
			}
		}

		virtual public bool ExistBillingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingAddress.RelationType);
			}
		}

		virtual public void RemoveBillingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.BillingAddress.RelationType);
		}


		virtual public ElectronicAddress GeneralEmail
		{ 
			get
			{
				return (ElectronicAddress) Strategy.GetCompositeRole(Meta.GeneralEmail.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralEmail.RelationType, value);
			}
		}

		virtual public bool ExistGeneralEmail
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralEmail.RelationType);
			}
		}

		virtual public void RemoveGeneralEmail()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralEmail.RelationType);
		}


		virtual public ShipmentMethod DefaultShipmentMethod
		{ 
			get
			{
				return (ShipmentMethod) Strategy.GetCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultShipmentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultShipmentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultShipmentMethod.RelationType);
		}


		virtual public global::Allors.Extent<Resume> Resumes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Resumes.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Resumes.RelationType, value);
			}
		}

		virtual public void AddResume (Resume value)
		{
			Strategy.AddCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public void RemoveResume (Resume value)
		{
			Strategy.RemoveCompositeRole(Meta.Resumes.RelationType, value);
		}

		virtual public bool ExistResumes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Resumes.RelationType);
			}
		}

		virtual public void RemoveResumes()
		{
			Strategy.RemoveCompositeRoles(Meta.Resumes.RelationType);
		}


		virtual public ContactMechanism HeadQuarter
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.HeadQuarter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.HeadQuarter.RelationType, value);
			}
		}

		virtual public bool ExistHeadQuarter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.HeadQuarter.RelationType);
			}
		}

		virtual public void RemoveHeadQuarter()
		{
			Strategy.RemoveCompositeRole(Meta.HeadQuarter.RelationType);
		}


		virtual public ElectronicAddress PersonalEmailAddress
		{ 
			get
			{
				return (ElectronicAddress) Strategy.GetCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonalEmailAddress.RelationType, value);
			}
		}

		virtual public bool ExistPersonalEmailAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonalEmailAddress.RelationType);
			}
		}

		virtual public void RemovePersonalEmailAddress()
		{
			Strategy.RemoveCompositeRole(Meta.PersonalEmailAddress.RelationType);
		}


		virtual public TelecommunicationsNumber CellPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CellPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistCellPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CellPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveCellPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.CellPhoneNumber.RelationType);
		}


		virtual public TelecommunicationsNumber BillingInquiriesPhone
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillingInquiriesPhone.RelationType, value);
			}
		}

		virtual public bool ExistBillingInquiriesPhone
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillingInquiriesPhone.RelationType);
			}
		}

		virtual public void RemoveBillingInquiriesPhone()
		{
			Strategy.RemoveCompositeRole(Meta.BillingInquiriesPhone.RelationType);
		}


		virtual public ContactMechanism OrderAddress
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.OrderAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OrderAddress.RelationType, value);
			}
		}

		virtual public bool ExistOrderAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OrderAddress.RelationType);
			}
		}

		virtual public void RemoveOrderAddress()
		{
			Strategy.RemoveCompositeRole(Meta.OrderAddress.RelationType);
		}


		virtual public ElectronicAddress InternetAddress
		{ 
			get
			{
				return (ElectronicAddress) Strategy.GetCompositeRole(Meta.InternetAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternetAddress.RelationType, value);
			}
		}

		virtual public bool ExistInternetAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternetAddress.RelationType);
			}
		}

		virtual public void RemoveInternetAddress()
		{
			Strategy.RemoveCompositeRole(Meta.InternetAddress.RelationType);
		}


		virtual public global::Allors.Extent<Media> Contents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Contents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Contents.RelationType, value);
			}
		}

		virtual public void AddContent (Media value)
		{
			Strategy.AddCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public void RemoveContent (Media value)
		{
			Strategy.RemoveCompositeRole(Meta.Contents.RelationType, value);
		}

		virtual public bool ExistContents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Contents.RelationType);
			}
		}

		virtual public void RemoveContents()
		{
			Strategy.RemoveCompositeRoles(Meta.Contents.RelationType);
		}


		virtual public global::Allors.Extent<CreditCard> CreditCards
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CreditCards.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CreditCards.RelationType, value);
			}
		}

		virtual public void AddCreditCard (CreditCard value)
		{
			Strategy.AddCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public void RemoveCreditCard (CreditCard value)
		{
			Strategy.RemoveCompositeRole(Meta.CreditCards.RelationType, value);
		}

		virtual public bool ExistCreditCards
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CreditCards.RelationType);
			}
		}

		virtual public void RemoveCreditCards()
		{
			Strategy.RemoveCompositeRoles(Meta.CreditCards.RelationType);
		}


		virtual public PostalAddress ShippingAddress
		{ 
			get
			{
				return (PostalAddress) Strategy.GetCompositeRole(Meta.ShippingAddress.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShippingAddress.RelationType, value);
			}
		}

		virtual public bool ExistShippingAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShippingAddress.RelationType);
			}
		}

		virtual public void RemoveShippingAddress()
		{
			Strategy.RemoveCompositeRole(Meta.ShippingAddress.RelationType);
		}


		virtual public global::Allors.Extent<OrganisationContactRelationship> CurrentOrganisationContactRelationships
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType, value);
			}
		}

		virtual public void AddCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.AddCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public void RemoveCurrentOrganisationContactRelationship (OrganisationContactRelationship value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentOrganisationContactRelationships.RelationType, value);
		}

		virtual public bool ExistCurrentOrganisationContactRelationships
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
			}
		}

		virtual public void RemoveCurrentOrganisationContactRelationships()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentOrganisationContactRelationships.RelationType);
		}


		virtual public global::System.Decimal OpenOrderAmount 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.OpenOrderAmount.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OpenOrderAmount.RelationType, value);
			}
		}

		virtual public bool ExistOpenOrderAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.OpenOrderAmount.RelationType);
			}
		}

		virtual public void RemoveOpenOrderAmount()
		{
			Strategy.RemoveUnitRole(Meta.OpenOrderAmount.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralFaxNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralFaxNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralFaxNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralFaxNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralFaxNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralFaxNumber.RelationType);
		}


		virtual public PaymentMethod DefaultPaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultPaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPaymentMethod.RelationType);
		}


		virtual public global::Allors.Extent<PartyContactMechanism> CurrentPartyContactMechanisms
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType, value);
			}
		}

		virtual public void AddCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.AddCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public void RemoveCurrentPartyContactMechanism (PartyContactMechanism value)
		{
			Strategy.RemoveCompositeRole(Meta.CurrentPartyContactMechanisms.RelationType, value);
		}

		virtual public bool ExistCurrentPartyContactMechanisms
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
			}
		}

		virtual public void RemoveCurrentPartyContactMechanisms()
		{
			Strategy.RemoveCompositeRoles(Meta.CurrentPartyContactMechanisms.RelationType);
		}


		virtual public TelecommunicationsNumber GeneralPhoneNumber
		{ 
			get
			{
				return (TelecommunicationsNumber) Strategy.GetCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GeneralPhoneNumber.RelationType, value);
			}
		}

		virtual public bool ExistGeneralPhoneNumber
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GeneralPhoneNumber.RelationType);
			}
		}

		virtual public void RemoveGeneralPhoneNumber()
		{
			Strategy.RemoveCompositeRole(Meta.GeneralPhoneNumber.RelationType);
		}


		virtual public Currency PreferredCurrency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.PreferredCurrency.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreferredCurrency.RelationType, value);
			}
		}

		virtual public bool ExistPreferredCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreferredCurrency.RelationType);
			}
		}

		virtual public void RemovePreferredCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.PreferredCurrency.RelationType);
		}


		virtual public VatRegime VatRegime
		{ 
			get
			{
				return (VatRegime) Strategy.GetCompositeRole(Meta.VatRegime.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRegime.RelationType, value);
			}
		}

		virtual public bool ExistVatRegime
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRegime.RelationType);
			}
		}

		virtual public void RemoveVatRegime()
		{
			Strategy.RemoveCompositeRole(Meta.VatRegime.RelationType);
		}


		virtual public global::System.Decimal? SimpleMovingAverage 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SimpleMovingAverage.RelationType, value);
			}
		}

		virtual public bool ExistSimpleMovingAverage{
			get
			{
				return Strategy.ExistUnitRole(Meta.SimpleMovingAverage.RelationType);
			}
		}

		virtual public void RemoveSimpleMovingAverage()
		{
			Strategy.RemoveUnitRole(Meta.SimpleMovingAverage.RelationType);
		}


		virtual public global::System.Decimal AmountOverDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountOverDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountOverDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountOverDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountOverDue.RelationType);
			}
		}

		virtual public void RemoveAmountOverDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountOverDue.RelationType);
		}


		virtual public DunningType DunningType
		{ 
			get
			{
				return (DunningType) Strategy.GetCompositeRole(Meta.DunningType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DunningType.RelationType, value);
			}
		}

		virtual public bool ExistDunningType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DunningType.RelationType);
			}
		}

		virtual public void RemoveDunningType()
		{
			Strategy.RemoveCompositeRole(Meta.DunningType.RelationType);
		}


		virtual public global::System.Decimal AmountDue 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.AmountDue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AmountDue.RelationType, value);
			}
		}

		virtual public bool ExistAmountDue{
			get
			{
				return Strategy.ExistUnitRole(Meta.AmountDue.RelationType);
			}
		}

		virtual public void RemoveAmountDue()
		{
			Strategy.RemoveUnitRole(Meta.AmountDue.RelationType);
		}


		virtual public global::System.DateTime? LastReminderDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.LastReminderDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastReminderDate.RelationType, value);
			}
		}

		virtual public bool ExistLastReminderDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastReminderDate.RelationType);
			}
		}

		virtual public void RemoveLastReminderDate()
		{
			Strategy.RemoveUnitRole(Meta.LastReminderDate.RelationType);
		}


		virtual public global::System.Decimal? CreditLimit 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.CreditLimit.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreditLimit.RelationType, value);
			}
		}

		virtual public bool ExistCreditLimit{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreditLimit.RelationType);
			}
		}

		virtual public void RemoveCreditLimit()
		{
			Strategy.RemoveUnitRole(Meta.CreditLimit.RelationType);
		}


		virtual public global::System.Int32 SubAccountNumber 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.SubAccountNumber.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SubAccountNumber.RelationType, value);
			}
		}

		virtual public bool ExistSubAccountNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.SubAccountNumber.RelationType);
			}
		}

		virtual public void RemoveSubAccountNumber()
		{
			Strategy.RemoveUnitRole(Meta.SubAccountNumber.RelationType);
		}


		virtual public global::System.DateTime? BlockedForDunning 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BlockedForDunning.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockedForDunning.RelationType, value);
			}
		}

		virtual public bool ExistBlockedForDunning{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockedForDunning.RelationType);
			}
		}

		virtual public void RemoveBlockedForDunning()
		{
			Strategy.RemoveUnitRole(Meta.BlockedForDunning.RelationType);
		}


		virtual public global::Allors.Extent<Agreement> Agreements
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Agreements.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Agreements.RelationType, value);
			}
		}

		virtual public void AddAgreement (Agreement value)
		{
			Strategy.AddCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public void RemoveAgreement (Agreement value)
		{
			Strategy.RemoveCompositeRole(Meta.Agreements.RelationType, value);
		}

		virtual public bool ExistAgreements
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Agreements.RelationType);
			}
		}

		virtual public void RemoveAgreements()
		{
			Strategy.RemoveCompositeRoles(Meta.Agreements.RelationType);
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEvents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CommunicationEvents.RelationType, value);
			}
		}

		virtual public void AddCommunicationEvent (CommunicationEvent value)
		{
			Strategy.AddCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public void RemoveCommunicationEvent (CommunicationEvent value)
		{
			Strategy.RemoveCompositeRole(Meta.CommunicationEvents.RelationType, value);
		}

		virtual public bool ExistCommunicationEvents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CommunicationEvents.RelationType);
			}
		}

		virtual public void RemoveCommunicationEvents()
		{
			Strategy.RemoveCompositeRoles(Meta.CommunicationEvents.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public AutomatedAgent AutomatedAgentWhereCurrentVersion
		{ 
			get
			{
				return (AutomatedAgent) Strategy.GetCompositeAssociation(Meta.AutomatedAgentWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistAutomatedAgentWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.AutomatedAgentWhereCurrentVersion.RelationType);
			}
		}


		virtual public AutomatedAgent AutomatedAgentWhereAllVersion
		{ 
			get
			{
				return (AutomatedAgent) Strategy.GetCompositeAssociation(Meta.AutomatedAgentWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistAutomatedAgentWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.AutomatedAgentWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new AutomatedAgentVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new AutomatedAgentVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new AutomatedAgentVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new AutomatedAgentVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new AutomatedAgentVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new AutomatedAgentVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new AutomatedAgentVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new AutomatedAgentVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new AutomatedAgentVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new AutomatedAgentVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class AutomatedAgentVersionBuilder : Allors.ObjectBuilder<AutomatedAgentVersion> , PartyVersionBuilder, global::System.IDisposable
	{		
		public AutomatedAgentVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(AutomatedAgentVersion instance)
		{

			instance.Comment = this.Comment;
		
		
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		
			

			if(this.LastModifiedDate.HasValue)
			{
				instance.LastModifiedDate = this.LastModifiedDate.Value;
			}			
		
		

			instance.PartyName = this.PartyName;
		
						
			

			if(this.ExcludeFromDunning.HasValue)
			{
				instance.ExcludeFromDunning = this.ExcludeFromDunning.Value;
			}			
		
				
			

			if(this.SimpleMovingAverage.HasValue)
			{
				instance.SimpleMovingAverage = this.SimpleMovingAverage.Value;
			}			
		
		
			

			if(this.AmountOverDue.HasValue)
			{
				instance.AmountOverDue = this.AmountOverDue.Value;
			}			
		
				
			

			if(this.LastReminderDate.HasValue)
			{
				instance.LastReminderDate = this.LastReminderDate.Value;
			}			
		
		
			

			if(this.CreditLimit.HasValue)
			{
				instance.CreditLimit = this.CreditLimit.Value;
			}			
		
		
			

			if(this.SubAccountNumber.HasValue)
			{
				instance.SubAccountNumber = this.SubAccountNumber.Value;
			}			
		
		
			

			if(this.BlockedForDunning.HasValue)
			{
				instance.BlockedForDunning = this.BlockedForDunning.Value;
			}			
		
		
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.CreatedBy = this.CreatedBy;

		

			instance.LastModifiedBy = this.LastModifiedBy;

						
			if(this.Qualifications!=null)
			{
				instance.Qualifications = this.Qualifications.ToArray();
			}
																
			if(this.PartyContactMechanisms!=null)
			{
				instance.PartyContactMechanisms = this.PartyContactMechanisms.ToArray();
			}
						
			if(this.BillingAccounts!=null)
			{
				instance.BillingAccounts = this.BillingAccounts.ToArray();
			}
				
			if(this.PartySkills!=null)
			{
				instance.PartySkills = this.PartySkills.ToArray();
			}
				
			if(this.BankAccounts!=null)
			{
				instance.BankAccounts = this.BankAccounts.ToArray();
			}
								

			instance.DefaultShipmentMethod = this.DefaultShipmentMethod;

		
			if(this.Resumes!=null)
			{
				instance.Resumes = this.Resumes.ToArray();
			}
														
			if(this.Contents!=null)
			{
				instance.Contents = this.Contents.ToArray();
			}
		
			if(this.CreditCards!=null)
			{
				instance.CreditCards = this.CreditCards.ToArray();
			}
								

			instance.DefaultPaymentMethod = this.DefaultPaymentMethod;

						

			instance.PreferredCurrency = this.PreferredCurrency;

		

			instance.VatRegime = this.VatRegime;

		

			instance.DunningType = this.DunningType;

		
			if(this.Agreements!=null)
			{
				instance.Agreements = this.Agreements.ToArray();
			}
		
			if(this.CommunicationEvents!=null)
			{
				instance.CommunicationEvents = this.CommunicationEvents.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Comment {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public User CreatedBy {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithCreatedBy(User value)
		        {
		            if(this.CreatedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreatedBy = value;
		            return this;
		        }		

				
				public User LastModifiedBy {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithLastModifiedBy(User value)
		        {
		            if(this.LastModifiedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LastModifiedBy = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.DateTime? LastModifiedDate {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithLastModifiedDate(global::System.DateTime? value)
		        {
				    if(this.LastModifiedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastModifiedDate = value;
		            return this;
		        }	

				public global::System.String PartyName {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithPartyName(global::System.String value)
		        {
				    if(this.PartyName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PartyName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Qualification> Qualifications {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithQualification(Qualification value)
		        {
					if(this.Qualifications == null)
					{
						this.Qualifications = new global::System.Collections.Generic.List<Qualification>(); 
					}
		            this.Qualifications.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartyContactMechanism> PartyContactMechanisms {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithPartyContactMechanism(PartyContactMechanism value)
		        {
					if(this.PartyContactMechanisms == null)
					{
						this.PartyContactMechanisms = new global::System.Collections.Generic.List<PartyContactMechanism>(); 
					}
		            this.PartyContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BillingAccount> BillingAccounts {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithBillingAccount(BillingAccount value)
		        {
					if(this.BillingAccounts == null)
					{
						this.BillingAccounts = new global::System.Collections.Generic.List<BillingAccount>(); 
					}
		            this.BillingAccounts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartySkill> PartySkills {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithPartySkill(PartySkill value)
		        {
					if(this.PartySkills == null)
					{
						this.PartySkills = new global::System.Collections.Generic.List<PartySkill>(); 
					}
		            this.PartySkills.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? ExcludeFromDunning {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithExcludeFromDunning(global::System.Boolean? value)
		        {
				    if(this.ExcludeFromDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExcludeFromDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BankAccount> BankAccounts {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithBankAccount(BankAccount value)
		        {
					if(this.BankAccounts == null)
					{
						this.BankAccounts = new global::System.Collections.Generic.List<BankAccount>(); 
					}
		            this.BankAccounts.Add(value);
		            return this;
		        }		

				
				public ShipmentMethod DefaultShipmentMethod {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDefaultShipmentMethod(ShipmentMethod value)
		        {
		            if(this.DefaultShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Resume> Resumes {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithResume(Resume value)
		        {
					if(this.Resumes == null)
					{
						this.Resumes = new global::System.Collections.Generic.List<Resume>(); 
					}
		            this.Resumes.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Media> Contents {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithContent(Media value)
		        {
					if(this.Contents == null)
					{
						this.Contents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Contents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CreditCard> CreditCards {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithCreditCard(CreditCard value)
		        {
					if(this.CreditCards == null)
					{
						this.CreditCards = new global::System.Collections.Generic.List<CreditCard>(); 
					}
		            this.CreditCards.Add(value);
		            return this;
		        }		

				
				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public Currency PreferredCurrency {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithPreferredCurrency(Currency value)
		        {
		            if(this.PreferredCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreferredCurrency = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? SimpleMovingAverage {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithSimpleMovingAverage(global::System.Decimal? value)
		        {
				    if(this.SimpleMovingAverage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SimpleMovingAverage = value;
		            return this;
		        }	

				public global::System.Decimal? AmountOverDue {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithAmountOverDue(global::System.Decimal? value)
		        {
				    if(this.AmountOverDue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountOverDue = value;
		            return this;
		        }	

				public DunningType DunningType {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDunningType(DunningType value)
		        {
		            if(this.DunningType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DunningType = value;
		            return this;
		        }		

				
				public global::System.DateTime? LastReminderDate {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithLastReminderDate(global::System.DateTime? value)
		        {
				    if(this.LastReminderDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastReminderDate = value;
		            return this;
		        }	

				public global::System.Decimal? CreditLimit {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithCreditLimit(global::System.Decimal? value)
		        {
				    if(this.CreditLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreditLimit = value;
		            return this;
		        }	

				public global::System.Int32? SubAccountNumber {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithSubAccountNumber(global::System.Int32? value)
		        {
				    if(this.SubAccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SubAccountNumber = value;
		            return this;
		        }	

				public global::System.DateTime? BlockedForDunning {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithBlockedForDunning(global::System.DateTime? value)
		        {
				    if(this.BlockedForDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Agreement> Agreements {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithAgreement(Agreement value)
		        {
					if(this.Agreements == null)
					{
						this.Agreements = new global::System.Collections.Generic.List<Agreement>(); 
					}
		            this.Agreements.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CommunicationEvent> CommunicationEvents {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithCommunicationEvent(CommunicationEvent value)
		        {
					if(this.CommunicationEvents == null)
					{
						this.CommunicationEvents = new global::System.Collections.Generic.List<CommunicationEvent>(); 
					}
		            this.CommunicationEvents.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AutomatedAgentVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class AutomatedAgentVersions : global::Allors.ObjectsBase<AutomatedAgentVersion>
	{
		public AutomatedAgentVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaAutomatedAgentVersion Meta
		{
			get
			{
				return Allors.Meta.MetaAutomatedAgentVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}