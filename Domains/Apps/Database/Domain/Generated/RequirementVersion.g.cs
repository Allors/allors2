// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class RequirementVersion : Allors.IObject , Version
	{
		private readonly IStrategy strategy;

		public RequirementVersion(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaRequirementVersion Meta
		{
			get
			{
				return Allors.Meta.MetaRequirementVersion.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static RequirementVersion Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (RequirementVersion) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public RequirementState RequirementState
		{ 
			get
			{
				return (RequirementState) Strategy.GetCompositeRole(Meta.RequirementState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequirementState.RelationType, value);
			}
		}

		virtual public bool ExistRequirementState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequirementState.RelationType);
			}
		}

		virtual public void RemoveRequirementState()
		{
			Strategy.RemoveCompositeRole(Meta.RequirementState.RelationType);
		}


		virtual public global::System.DateTime? RequiredByDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.RequiredByDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequiredByDate.RelationType, value);
			}
		}

		virtual public bool ExistRequiredByDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequiredByDate.RelationType);
			}
		}

		virtual public void RemoveRequiredByDate()
		{
			Strategy.RemoveUnitRole(Meta.RequiredByDate.RelationType);
		}


		virtual public RequirementType RequirementType
		{ 
			get
			{
				return (RequirementType) Strategy.GetCompositeRole(Meta.RequirementType.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.RequirementType.RelationType, value);
			}
		}

		virtual public bool ExistRequirementType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.RequirementType.RelationType);
			}
		}

		virtual public void RemoveRequirementType()
		{
			Strategy.RemoveCompositeRole(Meta.RequirementType.RelationType);
		}


		virtual public Party Authorizer
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Authorizer.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer.RelationType, value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer.RelationType);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer.RelationType);
		}


		virtual public global::System.String Reason 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Reason.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Reason.RelationType, value);
			}
		}

		virtual public bool ExistReason{
			get
			{
				return Strategy.ExistUnitRole(Meta.Reason.RelationType);
			}
		}

		virtual public void RemoveReason()
		{
			Strategy.RemoveUnitRole(Meta.Reason.RelationType);
		}


		virtual public global::Allors.Extent<Requirement> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Children.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Children.RelationType, value);
			}
		}

		virtual public void AddChild (Requirement value)
		{
			Strategy.AddCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public void RemoveChild (Requirement value)
		{
			Strategy.RemoveCompositeRole(Meta.Children.RelationType, value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Children.RelationType);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(Meta.Children.RelationType);
		}


		virtual public Party NeededFor
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.NeededFor.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NeededFor.RelationType, value);
			}
		}

		virtual public bool ExistNeededFor
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NeededFor.RelationType);
			}
		}

		virtual public void RemoveNeededFor()
		{
			Strategy.RemoveCompositeRole(Meta.NeededFor.RelationType);
		}


		virtual public Party Originator
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Originator.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Originator.RelationType, value);
			}
		}

		virtual public bool ExistOriginator
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Originator.RelationType);
			}
		}

		virtual public void RemoveOriginator()
		{
			Strategy.RemoveCompositeRole(Meta.Originator.RelationType);
		}


		virtual public Facility Facility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.Facility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Facility.RelationType, value);
			}
		}

		virtual public bool ExistFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Facility.RelationType);
			}
		}

		virtual public void RemoveFacility()
		{
			Strategy.RemoveCompositeRole(Meta.Facility.RelationType);
		}


		virtual public Party ServicedBy
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ServicedBy.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ServicedBy.RelationType, value);
			}
		}

		virtual public bool ExistServicedBy
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ServicedBy.RelationType);
			}
		}

		virtual public void RemoveServicedBy()
		{
			Strategy.RemoveCompositeRole(Meta.ServicedBy.RelationType);
		}


		virtual public global::System.Decimal? EstimatedBudget 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedBudget.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedBudget.RelationType, value);
			}
		}

		virtual public bool ExistEstimatedBudget{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedBudget.RelationType);
			}
		}

		virtual public void RemoveEstimatedBudget()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedBudget.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.Int32? Quantity 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Quantity.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity.RelationType, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity.RelationType);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity.RelationType);
		}


		virtual public global::System.Guid? DerivationId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.DerivationId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationId.RelationType, value);
			}
		}

		virtual public bool ExistDerivationId{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationId.RelationType);
			}
		}

		virtual public void RemoveDerivationId()
		{
			Strategy.RemoveUnitRole(Meta.DerivationId.RelationType);
		}


		virtual public global::System.DateTime? DerivationTimeStamp 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DerivationTimeStamp.RelationType, value);
			}
		}

		virtual public bool ExistDerivationTimeStamp{
			get
			{
				return Strategy.ExistUnitRole(Meta.DerivationTimeStamp.RelationType);
			}
		}

		virtual public void RemoveDerivationTimeStamp()
		{
			Strategy.RemoveUnitRole(Meta.DerivationTimeStamp.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public Requirement RequirementWhereCurrentVersion
		{ 
			get
			{
				return (Requirement) Strategy.GetCompositeAssociation(Meta.RequirementWhereCurrentVersion.RelationType);
			}
		} 

		virtual public bool ExistRequirementWhereCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.RequirementWhereCurrentVersion.RelationType);
			}
		}


		virtual public Requirement RequirementWhereAllVersion
		{ 
			get
			{
				return (Requirement) Strategy.GetCompositeAssociation(Meta.RequirementWhereAllVersion.RelationType);
			}
		} 

		virtual public bool ExistRequirementWhereAllVersion
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.RequirementWhereAllVersion.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new RequirementVersionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new RequirementVersionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new RequirementVersionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new RequirementVersionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new RequirementVersionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new RequirementVersionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new RequirementVersionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new RequirementVersionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new RequirementVersionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new RequirementVersionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class RequirementVersionBuilder : Allors.ObjectBuilder<RequirementVersion> , VersionBuilder, global::System.IDisposable
	{		
		public RequirementVersionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(RequirementVersion instance)
		{
			

			if(this.RequiredByDate.HasValue)
			{
				instance.RequiredByDate = this.RequiredByDate.Value;
			}			
		
		

			instance.Reason = this.Reason;
		
		
			

			if(this.EstimatedBudget.HasValue)
			{
				instance.EstimatedBudget = this.EstimatedBudget.Value;
			}			
		
		

			instance.Description = this.Description;
		
		
			

			if(this.Quantity.HasValue)
			{
				instance.Quantity = this.Quantity.Value;
			}			
		
		
			

			if(this.DerivationId.HasValue)
			{
				instance.DerivationId = this.DerivationId.Value;
			}			
		
		
			

			if(this.DerivationTimeStamp.HasValue)
			{
				instance.DerivationTimeStamp = this.DerivationTimeStamp.Value;
			}			
		
		

			instance.RequirementState = this.RequirementState;

		

			instance.RequirementType = this.RequirementType;

		

			instance.Authorizer = this.Authorizer;

		
			if(this.Children!=null)
			{
				instance.Children = this.Children.ToArray();
			}
		

			instance.NeededFor = this.NeededFor;

		

			instance.Originator = this.Originator;

		

			instance.Facility = this.Facility;

		

			instance.ServicedBy = this.ServicedBy;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public RequirementState RequirementState {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithRequirementState(RequirementState value)
		        {
		            if(this.RequirementState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequirementState = value;
		            return this;
		        }		

				
				public global::System.DateTime? RequiredByDate {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithRequiredByDate(global::System.DateTime? value)
		        {
				    if(this.RequiredByDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredByDate = value;
		            return this;
		        }	

				public RequirementType RequirementType {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithRequirementType(RequirementType value)
		        {
		            if(this.RequirementType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RequirementType = value;
		            return this;
		        }		

				
				public Party Authorizer {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithAuthorizer(Party value)
		        {
		            if(this.Authorizer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Authorizer = value;
		            return this;
		        }		

				
				public global::System.String Reason {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithReason(global::System.String value)
		        {
				    if(this.Reason!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Reason = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Requirement> Children {get; set;}	

				/// <exclude/>
				public RequirementVersionBuilder WithChild(Requirement value)
		        {
					if(this.Children == null)
					{
						this.Children = new global::System.Collections.Generic.List<Requirement>(); 
					}
		            this.Children.Add(value);
		            return this;
		        }		

				
				public Party NeededFor {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithNeededFor(Party value)
		        {
		            if(this.NeededFor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NeededFor = value;
		            return this;
		        }		

				
				public Party Originator {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithOriginator(Party value)
		        {
		            if(this.Originator!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Originator = value;
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public Party ServicedBy {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithServicedBy(Party value)
		        {
		            if(this.ServicedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ServicedBy = value;
		            return this;
		        }		

				
				public global::System.Decimal? EstimatedBudget {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithEstimatedBudget(global::System.Decimal? value)
		        {
				    if(this.EstimatedBudget!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedBudget = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Int32? Quantity {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithQuantity(global::System.Int32? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public global::System.Guid? DerivationId {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithDerivationId(global::System.Guid? value)
		        {
				    if(this.DerivationId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationId = value;
		            return this;
		        }	

				public global::System.DateTime? DerivationTimeStamp {get; set;}

				/// <exclude/>
				public RequirementVersionBuilder WithDerivationTimeStamp(global::System.DateTime? value)
		        {
				    if(this.DerivationTimeStamp!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DerivationTimeStamp = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public RequirementVersionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public RequirementVersionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class RequirementVersions : global::Allors.ObjectsBase<RequirementVersion>
	{
		public RequirementVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaRequirementVersion Meta
		{
			get
			{
				return Allors.Meta.MetaRequirementVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}