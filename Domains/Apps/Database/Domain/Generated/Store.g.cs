// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Store : Allors.IObject , UniquelyIdentifiable, AccessControlledObject
	{
		private readonly IStrategy strategy;

		public Store(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaStore Meta
		{
			get
			{
				return Allors.Meta.MetaStore.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Store Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Store) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Catalogue> Catalogues
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Catalogues.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Catalogues.RelationType, value);
			}
		}

		virtual public void AddCatalogue (Catalogue value)
		{
			Strategy.AddCompositeRole(Meta.Catalogues.RelationType, value);
		}

		virtual public void RemoveCatalogue (Catalogue value)
		{
			Strategy.RemoveCompositeRole(Meta.Catalogues.RelationType, value);
		}

		virtual public bool ExistCatalogues
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Catalogues.RelationType);
			}
		}

		virtual public void RemoveCatalogues()
		{
			Strategy.RemoveCompositeRoles(Meta.Catalogues.RelationType);
		}


		virtual public global::System.Decimal ShipmentThreshold 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.ShipmentThreshold.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShipmentThreshold.RelationType, value);
			}
		}

		virtual public bool ExistShipmentThreshold{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShipmentThreshold.RelationType);
			}
		}

		virtual public void RemoveShipmentThreshold()
		{
			Strategy.RemoveUnitRole(Meta.ShipmentThreshold.RelationType);
		}


		virtual public Counter SalesOrderCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.SalesOrderCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrderCounter.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrderCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrderCounter.RelationType);
			}
		}

		virtual public void RemoveSalesOrderCounter()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrderCounter.RelationType);
		}


		virtual public global::System.String OutgoingShipmentNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.OutgoingShipmentNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OutgoingShipmentNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistOutgoingShipmentNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.OutgoingShipmentNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveOutgoingShipmentNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.OutgoingShipmentNumberPrefix.RelationType);
		}


		virtual public global::System.String SalesInvoiceNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SalesInvoiceNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SalesInvoiceNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistSalesInvoiceNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.SalesInvoiceNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveSalesInvoiceNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.SalesInvoiceNumberPrefix.RelationType);
		}


		virtual public global::System.Int32 PaymentGracePeriod 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.PaymentGracePeriod.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PaymentGracePeriod.RelationType, value);
			}
		}

		virtual public bool ExistPaymentGracePeriod{
			get
			{
				return Strategy.ExistUnitRole(Meta.PaymentGracePeriod.RelationType);
			}
		}

		virtual public void RemovePaymentGracePeriod()
		{
			Strategy.RemoveUnitRole(Meta.PaymentGracePeriod.RelationType);
		}


		virtual public Media LogoImage
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.LogoImage.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LogoImage.RelationType, value);
			}
		}

		virtual public bool ExistLogoImage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LogoImage.RelationType);
			}
		}

		virtual public void RemoveLogoImage()
		{
			Strategy.RemoveCompositeRole(Meta.LogoImage.RelationType);
		}


		virtual public global::System.Int32 PaymentNetDays 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.PaymentNetDays.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PaymentNetDays.RelationType, value);
			}
		}

		virtual public bool ExistPaymentNetDays{
			get
			{
				return Strategy.ExistUnitRole(Meta.PaymentNetDays.RelationType);
			}
		}

		virtual public void RemovePaymentNetDays()
		{
			Strategy.RemoveUnitRole(Meta.PaymentNetDays.RelationType);
		}


		virtual public Facility DefaultFacility
		{ 
			get
			{
				return (Facility) Strategy.GetCompositeRole(Meta.DefaultFacility.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultFacility.RelationType, value);
			}
		}

		virtual public bool ExistDefaultFacility
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultFacility.RelationType);
			}
		}

		virtual public void RemoveDefaultFacility()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultFacility.RelationType);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.Decimal CreditLimit 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.CreditLimit.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreditLimit.RelationType, value);
			}
		}

		virtual public bool ExistCreditLimit{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreditLimit.RelationType);
			}
		}

		virtual public void RemoveCreditLimit()
		{
			Strategy.RemoveUnitRole(Meta.CreditLimit.RelationType);
		}


		virtual public ShipmentMethod DefaultShipmentMethod
		{ 
			get
			{
				return (ShipmentMethod) Strategy.GetCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultShipmentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultShipmentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultShipmentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultShipmentMethod.RelationType);
		}


		virtual public Carrier DefaultCarrier
		{ 
			get
			{
				return (Carrier) Strategy.GetCompositeRole(Meta.DefaultCarrier.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultCarrier.RelationType, value);
			}
		}

		virtual public bool ExistDefaultCarrier
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultCarrier.RelationType);
			}
		}

		virtual public void RemoveDefaultCarrier()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultCarrier.RelationType);
		}


		virtual public Counter SalesInvoiceCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.SalesInvoiceCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesInvoiceCounter.RelationType, value);
			}
		}

		virtual public bool ExistSalesInvoiceCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesInvoiceCounter.RelationType);
			}
		}

		virtual public void RemoveSalesInvoiceCounter()
		{
			Strategy.RemoveCompositeRole(Meta.SalesInvoiceCounter.RelationType);
		}


		virtual public global::System.Decimal OrderThreshold 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.OrderThreshold.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OrderThreshold.RelationType, value);
			}
		}

		virtual public bool ExistOrderThreshold{
			get
			{
				return Strategy.ExistUnitRole(Meta.OrderThreshold.RelationType);
			}
		}

		virtual public void RemoveOrderThreshold()
		{
			Strategy.RemoveUnitRole(Meta.OrderThreshold.RelationType);
		}


		virtual public PaymentMethod DefaultPaymentMethod
		{ 
			get
			{
				return (PaymentMethod) Strategy.GetCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPaymentMethod.RelationType, value);
			}
		}

		virtual public bool ExistDefaultPaymentMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPaymentMethod.RelationType);
			}
		}

		virtual public void RemoveDefaultPaymentMethod()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPaymentMethod.RelationType);
		}


		virtual public global::Allors.Extent<FiscalYearInvoiceNumber> FiscalYearInvoiceNumbers
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FiscalYearInvoiceNumbers.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FiscalYearInvoiceNumbers.RelationType, value);
			}
		}

		virtual public void AddFiscalYearInvoiceNumber (FiscalYearInvoiceNumber value)
		{
			Strategy.AddCompositeRole(Meta.FiscalYearInvoiceNumbers.RelationType, value);
		}

		virtual public void RemoveFiscalYearInvoiceNumber (FiscalYearInvoiceNumber value)
		{
			Strategy.RemoveCompositeRole(Meta.FiscalYearInvoiceNumbers.RelationType, value);
		}

		virtual public bool ExistFiscalYearInvoiceNumbers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FiscalYearInvoiceNumbers.RelationType);
			}
		}

		virtual public void RemoveFiscalYearInvoiceNumbers()
		{
			Strategy.RemoveCompositeRoles(Meta.FiscalYearInvoiceNumbers.RelationType);
		}


		virtual public global::Allors.Extent<PaymentMethod> PaymentMethods
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PaymentMethods.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PaymentMethods.RelationType, value);
			}
		}

		virtual public void AddPaymentMethod (PaymentMethod value)
		{
			Strategy.AddCompositeRole(Meta.PaymentMethods.RelationType, value);
		}

		virtual public void RemovePaymentMethod (PaymentMethod value)
		{
			Strategy.RemoveCompositeRole(Meta.PaymentMethods.RelationType, value);
		}

		virtual public bool ExistPaymentMethods
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PaymentMethods.RelationType);
			}
		}

		virtual public void RemovePaymentMethods()
		{
			Strategy.RemoveCompositeRoles(Meta.PaymentMethods.RelationType);
		}


		virtual public Counter OutgoingShipmentCounter
		{ 
			get
			{
				return (Counter) Strategy.GetCompositeRole(Meta.OutgoingShipmentCounter.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OutgoingShipmentCounter.RelationType, value);
			}
		}

		virtual public bool ExistOutgoingShipmentCounter
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OutgoingShipmentCounter.RelationType);
			}
		}

		virtual public void RemoveOutgoingShipmentCounter()
		{
			Strategy.RemoveCompositeRole(Meta.OutgoingShipmentCounter.RelationType);
		}


		virtual public global::System.String SalesOrderNumberPrefix 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.SalesOrderNumberPrefix.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SalesOrderNumberPrefix.RelationType, value);
			}
		}

		virtual public bool ExistSalesOrderNumberPrefix{
			get
			{
				return Strategy.ExistUnitRole(Meta.SalesOrderNumberPrefix.RelationType);
			}
		}

		virtual public void RemoveSalesOrderNumberPrefix()
		{
			Strategy.RemoveUnitRole(Meta.SalesOrderNumberPrefix.RelationType);
		}


		virtual public ProcessFlow ProcessFlow
		{ 
			get
			{
				return (ProcessFlow) Strategy.GetCompositeRole(Meta.ProcessFlow.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ProcessFlow.RelationType, value);
			}
		}

		virtual public bool ExistProcessFlow
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ProcessFlow.RelationType);
			}
		}

		virtual public void RemoveProcessFlow()
		{
			Strategy.RemoveCompositeRole(Meta.ProcessFlow.RelationType);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId.RelationType, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId.RelationType);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public global::Allors.Extent<PickListVersion> PickListVersionsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListVersionsWhereStore.RelationType);
			}
		}

		virtual public bool ExistPickListVersionsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListVersionsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceVersion> SalesInvoiceVersionsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceVersionsWhereStore.RelationType);
			}
		}

		virtual public bool ExistSalesInvoiceVersionsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceVersionsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrderVersion> SalesOrderVersionsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderVersionsWhereStore.RelationType);
			}
		}

		virtual public bool ExistSalesOrderVersionsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderVersionsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<PickList> PickListsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PickListsWhereStore.RelationType);
			}
		}

		virtual public bool ExistPickListsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PickListsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesInvoice> SalesInvoicesWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoicesWhereStore.RelationType);
			}
		}

		virtual public bool ExistSalesInvoicesWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoicesWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereStore.RelationType);
			}
		}

		virtual public bool ExistSalesOrdersWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<StoreRevenue> StoreRevenuesWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoreRevenuesWhereStore.RelationType);
			}
		}

		virtual public bool ExistStoreRevenuesWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoreRevenuesWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<ShipmentVersion> ShipmentVersionsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentVersionsWhereStore.RelationType);
			}
		}

		virtual public bool ExistShipmentVersionsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentVersionsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereStore
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereStore.RelationType);
			}
		}

		virtual public bool ExistShipmentsWhereStore
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereStore.RelationType);
			}
		}


		virtual public global::Allors.Extent<Notification> NotificationsWhereTarget
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}

		virtual public bool ExistNotificationsWhereTarget
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.NotificationsWhereTarget.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new StoreOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new StoreOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new StoreOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new StoreOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new StoreOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new StoreOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new StoreOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new StoreOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new StoreOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new StoreOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class StoreBuilder : Allors.ObjectBuilder<Store> , UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public StoreBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Store instance)
		{
			

			if(this.ShipmentThreshold.HasValue)
			{
				instance.ShipmentThreshold = this.ShipmentThreshold.Value;
			}			
		
		

			instance.OutgoingShipmentNumberPrefix = this.OutgoingShipmentNumberPrefix;
		
		

			instance.SalesInvoiceNumberPrefix = this.SalesInvoiceNumberPrefix;
		
		
			

			if(this.PaymentGracePeriod.HasValue)
			{
				instance.PaymentGracePeriod = this.PaymentGracePeriod.Value;
			}			
		
		
			

			if(this.PaymentNetDays.HasValue)
			{
				instance.PaymentNetDays = this.PaymentNetDays.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.CreditLimit.HasValue)
			{
				instance.CreditLimit = this.CreditLimit.Value;
			}			
		
		
			

			if(this.OrderThreshold.HasValue)
			{
				instance.OrderThreshold = this.OrderThreshold.Value;
			}			
		
		

			instance.SalesOrderNumberPrefix = this.SalesOrderNumberPrefix;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.Catalogues!=null)
			{
				instance.Catalogues = this.Catalogues.ToArray();
			}
		

			instance.SalesOrderCounter = this.SalesOrderCounter;

		

			instance.LogoImage = this.LogoImage;

		

			instance.DefaultFacility = this.DefaultFacility;

		

			instance.DefaultShipmentMethod = this.DefaultShipmentMethod;

		

			instance.DefaultCarrier = this.DefaultCarrier;

		

			instance.SalesInvoiceCounter = this.SalesInvoiceCounter;

		

			instance.DefaultPaymentMethod = this.DefaultPaymentMethod;

		
			if(this.FiscalYearInvoiceNumbers!=null)
			{
				instance.FiscalYearInvoiceNumbers = this.FiscalYearInvoiceNumbers.ToArray();
			}
		
			if(this.PaymentMethods!=null)
			{
				instance.PaymentMethods = this.PaymentMethods.ToArray();
			}
		

			instance.OutgoingShipmentCounter = this.OutgoingShipmentCounter;

		

			instance.ProcessFlow = this.ProcessFlow;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<Catalogue> Catalogues {get; set;}	

				/// <exclude/>
				public StoreBuilder WithCatalogue(Catalogue value)
		        {
					if(this.Catalogues == null)
					{
						this.Catalogues = new global::System.Collections.Generic.List<Catalogue>(); 
					}
		            this.Catalogues.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? ShipmentThreshold {get; set;}

				/// <exclude/>
				public StoreBuilder WithShipmentThreshold(global::System.Decimal? value)
		        {
				    if(this.ShipmentThreshold!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShipmentThreshold = value;
		            return this;
		        }	

				public Counter SalesOrderCounter {get; set;}

				/// <exclude/>
				public StoreBuilder WithSalesOrderCounter(Counter value)
		        {
		            if(this.SalesOrderCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrderCounter = value;
		            return this;
		        }		

				
				public global::System.String OutgoingShipmentNumberPrefix {get; set;}

				/// <exclude/>
				public StoreBuilder WithOutgoingShipmentNumberPrefix(global::System.String value)
		        {
				    if(this.OutgoingShipmentNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OutgoingShipmentNumberPrefix = value;
		            return this;
		        }	

				public global::System.String SalesInvoiceNumberPrefix {get; set;}

				/// <exclude/>
				public StoreBuilder WithSalesInvoiceNumberPrefix(global::System.String value)
		        {
				    if(this.SalesInvoiceNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesInvoiceNumberPrefix = value;
		            return this;
		        }	

				public global::System.Int32? PaymentGracePeriod {get; set;}

				/// <exclude/>
				public StoreBuilder WithPaymentGracePeriod(global::System.Int32? value)
		        {
				    if(this.PaymentGracePeriod!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PaymentGracePeriod = value;
		            return this;
		        }	

				public Media LogoImage {get; set;}

				/// <exclude/>
				public StoreBuilder WithLogoImage(Media value)
		        {
		            if(this.LogoImage!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.LogoImage = value;
		            return this;
		        }		

				
				public global::System.Int32? PaymentNetDays {get; set;}

				/// <exclude/>
				public StoreBuilder WithPaymentNetDays(global::System.Int32? value)
		        {
				    if(this.PaymentNetDays!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PaymentNetDays = value;
		            return this;
		        }	

				public Facility DefaultFacility {get; set;}

				/// <exclude/>
				public StoreBuilder WithDefaultFacility(Facility value)
		        {
		            if(this.DefaultFacility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultFacility = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public StoreBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Decimal? CreditLimit {get; set;}

				/// <exclude/>
				public StoreBuilder WithCreditLimit(global::System.Decimal? value)
		        {
				    if(this.CreditLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreditLimit = value;
		            return this;
		        }	

				public ShipmentMethod DefaultShipmentMethod {get; set;}

				/// <exclude/>
				public StoreBuilder WithDefaultShipmentMethod(ShipmentMethod value)
		        {
		            if(this.DefaultShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultShipmentMethod = value;
		            return this;
		        }		

				
				public Carrier DefaultCarrier {get; set;}

				/// <exclude/>
				public StoreBuilder WithDefaultCarrier(Carrier value)
		        {
		            if(this.DefaultCarrier!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultCarrier = value;
		            return this;
		        }		

				
				public Counter SalesInvoiceCounter {get; set;}

				/// <exclude/>
				public StoreBuilder WithSalesInvoiceCounter(Counter value)
		        {
		            if(this.SalesInvoiceCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesInvoiceCounter = value;
		            return this;
		        }		

				
				public global::System.Decimal? OrderThreshold {get; set;}

				/// <exclude/>
				public StoreBuilder WithOrderThreshold(global::System.Decimal? value)
		        {
				    if(this.OrderThreshold!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OrderThreshold = value;
		            return this;
		        }	

				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public StoreBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<FiscalYearInvoiceNumber> FiscalYearInvoiceNumbers {get; set;}	

				/// <exclude/>
				public StoreBuilder WithFiscalYearInvoiceNumber(FiscalYearInvoiceNumber value)
		        {
					if(this.FiscalYearInvoiceNumbers == null)
					{
						this.FiscalYearInvoiceNumbers = new global::System.Collections.Generic.List<FiscalYearInvoiceNumber>(); 
					}
		            this.FiscalYearInvoiceNumbers.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PaymentMethod> PaymentMethods {get; set;}	

				/// <exclude/>
				public StoreBuilder WithPaymentMethod(PaymentMethod value)
		        {
					if(this.PaymentMethods == null)
					{
						this.PaymentMethods = new global::System.Collections.Generic.List<PaymentMethod>(); 
					}
		            this.PaymentMethods.Add(value);
		            return this;
		        }		

				
				public Counter OutgoingShipmentCounter {get; set;}

				/// <exclude/>
				public StoreBuilder WithOutgoingShipmentCounter(Counter value)
		        {
		            if(this.OutgoingShipmentCounter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OutgoingShipmentCounter = value;
		            return this;
		        }		

				
				public global::System.String SalesOrderNumberPrefix {get; set;}

				/// <exclude/>
				public StoreBuilder WithSalesOrderNumberPrefix(global::System.String value)
		        {
				    if(this.SalesOrderNumberPrefix!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesOrderNumberPrefix = value;
		            return this;
		        }	

				public ProcessFlow ProcessFlow {get; set;}

				/// <exclude/>
				public StoreBuilder WithProcessFlow(ProcessFlow value)
		        {
		            if(this.ProcessFlow!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProcessFlow = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public StoreBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public StoreBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public StoreBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Stores : global::Allors.ObjectsBase<Store>
	{
		public Stores(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaStore Meta
		{
			get
			{
				return Allors.Meta.MetaStore.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}