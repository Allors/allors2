// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface CommunicationEventVersion :  Version, Allors.IObject
	{


		CommunicationEventState CommunicationEventState
		{ 
			get;
			set;
		}

		bool ExistCommunicationEventState
		{
			get;
		}

		void RemoveCommunicationEventState();


		global::System.String Comment 
		{
			get;
			set;
		}

		bool ExistComment{get;}

		void RemoveComment();


		User CreatedBy
		{ 
			get;
			set;
		}

		bool ExistCreatedBy
		{
			get;
		}

		void RemoveCreatedBy();


		User LastModifiedBy
		{ 
			get;
			set;
		}

		bool ExistLastModifiedBy
		{
			get;
		}

		void RemoveLastModifiedBy();


		global::System.DateTime? CreationDate 
		{
			get;
			set;
		}

		bool ExistCreationDate{get;}

		void RemoveCreationDate();


		global::System.DateTime? LastModifiedDate 
		{
			get;
			set;
		}

		bool ExistLastModifiedDate{get;}

		void RemoveLastModifiedDate();


		SecurityToken OwnerSecurityToken
		{ 
			get;
			set;
		}

		bool ExistOwnerSecurityToken
		{
			get;
		}

		void RemoveOwnerSecurityToken();


		AccessControl OwnerAccessControl
		{ 
			get;
			set;
		}

		bool ExistOwnerAccessControl
		{
			get;
		}

		void RemoveOwnerAccessControl();


		global::System.DateTime? ScheduledStart 
		{
			get;
			set;
		}

		bool ExistScheduledStart{get;}

		void RemoveScheduledStart();


		global::Allors.Extent<Party> ToParties
		{ 
			get;
			set;
		}

		void AddToParty (Party value);

		void RemoveToParty (Party value);

		bool ExistToParties
		{
			get;
		}

		void RemoveToParties();


		global::Allors.Extent<ContactMechanism> ContactMechanisms
		{ 
			get;
			set;
		}

		void AddContactMechanism (ContactMechanism value);

		void RemoveContactMechanism (ContactMechanism value);

		bool ExistContactMechanisms
		{
			get;
		}

		void RemoveContactMechanisms();


		global::Allors.Extent<Party> InvolvedParties
		{ 
			get;
			set;
		}

		void AddInvolvedParty (Party value);

		void RemoveInvolvedParty (Party value);

		bool ExistInvolvedParties
		{
			get;
		}

		void RemoveInvolvedParties();


		global::System.DateTime? InitialScheduledStart 
		{
			get;
			set;
		}

		bool ExistInitialScheduledStart{get;}

		void RemoveInitialScheduledStart();


		global::Allors.Extent<CommunicationEventPurpose> EventPurposes
		{ 
			get;
			set;
		}

		void AddEventPurpose (CommunicationEventPurpose value);

		void RemoveEventPurpose (CommunicationEventPurpose value);

		bool ExistEventPurposes
		{
			get;
		}

		void RemoveEventPurposes();


		global::System.DateTime? ScheduledEnd 
		{
			get;
			set;
		}

		bool ExistScheduledEnd{get;}

		void RemoveScheduledEnd();


		global::System.DateTime? ActualEnd 
		{
			get;
			set;
		}

		bool ExistActualEnd{get;}

		void RemoveActualEnd();


		global::Allors.Extent<WorkEffort> WorkEfforts
		{ 
			get;
			set;
		}

		void AddWorkEffort (WorkEffort value);

		void RemoveWorkEffort (WorkEffort value);

		bool ExistWorkEfforts
		{
			get;
		}

		void RemoveWorkEfforts();


		global::System.String Description 
		{
			get;
			set;
		}

		bool ExistDescription{get;}

		void RemoveDescription();


		global::System.DateTime? InitialScheduledEnd 
		{
			get;
			set;
		}

		bool ExistInitialScheduledEnd{get;}

		void RemoveInitialScheduledEnd();


		global::Allors.Extent<Party> FromParties
		{ 
			get;
			set;
		}

		void AddFromParty (Party value);

		void RemoveFromParty (Party value);

		bool ExistFromParties
		{
			get;
		}

		void RemoveFromParties();


		global::System.String Subject 
		{
			get;
			set;
		}

		bool ExistSubject{get;}

		void RemoveSubject();


		global::Allors.Extent<Media> Documents
		{ 
			get;
			set;
		}

		void AddDocument (Media value);

		void RemoveDocument (Media value);

		bool ExistDocuments
		{
			get;
		}

		void RemoveDocuments();


		Case Case
		{ 
			get;
			set;
		}

		bool ExistCase
		{
			get;
		}

		void RemoveCase();


		Priority Priority
		{ 
			get;
			set;
		}

		bool ExistPriority
		{
			get;
		}

		void RemovePriority();


		Person Owner
		{ 
			get;
			set;
		}

		bool ExistOwner
		{
			get;
		}

		void RemoveOwner();


		global::System.String Note 
		{
			get;
			set;
		}

		bool ExistNote{get;}

		void RemoveNote();


		global::System.DateTime? ActualStart 
		{
			get;
			set;
		}

		bool ExistActualStart{get;}

		void RemoveActualStart();


		global::System.Boolean? SendNotification 
		{
			get;
			set;
		}

		bool ExistSendNotification{get;}

		void RemoveSendNotification();


		global::System.Boolean? SendReminder 
		{
			get;
			set;
		}

		bool ExistSendReminder{get;}

		void RemoveSendReminder();


		global::System.DateTime? RemindAt 
		{
			get;
			set;
		}

		bool ExistRemindAt{get;}

		void RemoveRemindAt();

	}

	public partial interface CommunicationEventVersionBuilder : VersionBuilder , global::System.IDisposable
	{	
		global::System.String Comment {get;}
		

		User CreatedBy {get;}

		

		User LastModifiedBy {get;}

		

		global::System.DateTime? CreationDate {get;}
		

		global::System.DateTime? LastModifiedDate {get;}
		

		global::System.DateTime? ScheduledStart {get;}
		


		global::System.Collections.Generic.List<ContactMechanism> ContactMechanisms {get;}		

		

		global::System.DateTime? InitialScheduledStart {get;}
		


		global::System.Collections.Generic.List<CommunicationEventPurpose> EventPurposes {get;}		

		

		global::System.DateTime? ScheduledEnd {get;}
		

		global::System.DateTime? ActualEnd {get;}
		


		global::System.Collections.Generic.List<WorkEffort> WorkEfforts {get;}		

		

		global::System.String Description {get;}
		

		global::System.DateTime? InitialScheduledEnd {get;}
		

		global::System.String Subject {get;}
		


		global::System.Collections.Generic.List<Media> Documents {get;}		

		

		Case Case {get;}

		

		Priority Priority {get;}

		

		Person Owner {get;}

		

		global::System.String Note {get;}
		

		global::System.DateTime? ActualStart {get;}
		

		global::System.Boolean? SendNotification {get;}
		

		global::System.Boolean? SendReminder {get;}
		

		global::System.DateTime? RemindAt {get;}
		

	}

	public partial class CommunicationEventVersions : global::Allors.ObjectsBase<CommunicationEventVersion>
	{
		public CommunicationEventVersions(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaCommunicationEventVersion Meta
		{
			get
			{
				return Allors.Meta.MetaCommunicationEventVersion.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}