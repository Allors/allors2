// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PickList : Allors.IObject , Printable, Transitional, Versioned
	{
		private readonly IStrategy strategy;

		public PickList(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaPickList Meta
		{
			get
			{
				return Allors.Meta.MetaPickList.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PickList Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PickList) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public PickListState PreviousPickListState
		{ 
			get
			{
				return (PickListState) Strategy.GetCompositeRole(Meta.PreviousPickListState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousPickListState.RelationType, value);
			}
		}

		virtual public bool ExistPreviousPickListState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousPickListState.RelationType);
			}
		}

		virtual public void RemovePreviousPickListState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousPickListState.RelationType);
		}


		virtual public PickListState LastPickListState
		{ 
			get
			{
				return (PickListState) Strategy.GetCompositeRole(Meta.LastPickListState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.LastPickListState.RelationType, value);
			}
		}

		virtual public bool ExistLastPickListState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.LastPickListState.RelationType);
			}
		}

		virtual public void RemoveLastPickListState()
		{
			Strategy.RemoveCompositeRole(Meta.LastPickListState.RelationType);
		}


		virtual public PickListState PickListState
		{ 
			get
			{
				return (PickListState) Strategy.GetCompositeRole(Meta.PickListState.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PickListState.RelationType, value);
			}
		}

		virtual public bool ExistPickListState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PickListState.RelationType);
			}
		}

		virtual public void RemovePickListState()
		{
			Strategy.RemoveCompositeRole(Meta.PickListState.RelationType);
		}


		virtual public PickListVersion CurrentVersion
		{ 
			get
			{
				return (PickListVersion) Strategy.GetCompositeRole(Meta.CurrentVersion.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentVersion.RelationType, value);
			}
		}

		virtual public bool ExistCurrentVersion
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentVersion.RelationType);
			}
		}

		virtual public void RemoveCurrentVersion()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentVersion.RelationType);
		}


		virtual public global::Allors.Extent<PickListVersion> AllVersions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.AllVersions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.AllVersions.RelationType, value);
			}
		}

		virtual public void AddAllVersion (PickListVersion value)
		{
			Strategy.AddCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public void RemoveAllVersion (PickListVersion value)
		{
			Strategy.RemoveCompositeRole(Meta.AllVersions.RelationType, value);
		}

		virtual public bool ExistAllVersions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.AllVersions.RelationType);
			}
		}

		virtual public void RemoveAllVersions()
		{
			Strategy.RemoveCompositeRoles(Meta.AllVersions.RelationType);
		}


		virtual public CustomerShipment CustomerShipmentCorrection
		{ 
			get
			{
				return (CustomerShipment) Strategy.GetCompositeRole(Meta.CustomerShipmentCorrection.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CustomerShipmentCorrection.RelationType, value);
			}
		}

		virtual public bool ExistCustomerShipmentCorrection
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CustomerShipmentCorrection.RelationType);
			}
		}

		virtual public void RemoveCustomerShipmentCorrection()
		{
			Strategy.RemoveCompositeRole(Meta.CustomerShipmentCorrection.RelationType);
		}


		virtual public global::System.DateTime CreationDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.CreationDate.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreationDate.RelationType, value);
			}
		}

		virtual public bool ExistCreationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreationDate.RelationType);
			}
		}

		virtual public void RemoveCreationDate()
		{
			Strategy.RemoveUnitRole(Meta.CreationDate.RelationType);
		}


		virtual public global::Allors.Extent<PickListItem> PickListItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PickListItems.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PickListItems.RelationType, value);
			}
		}

		virtual public void AddPickListItem (PickListItem value)
		{
			Strategy.AddCompositeRole(Meta.PickListItems.RelationType, value);
		}

		virtual public void RemovePickListItem (PickListItem value)
		{
			Strategy.RemoveCompositeRole(Meta.PickListItems.RelationType, value);
		}

		virtual public bool ExistPickListItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PickListItems.RelationType);
			}
		}

		virtual public void RemovePickListItems()
		{
			Strategy.RemoveCompositeRoles(Meta.PickListItems.RelationType);
		}


		virtual public Person Picker
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Picker.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Picker.RelationType, value);
			}
		}

		virtual public bool ExistPicker
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Picker.RelationType);
			}
		}

		virtual public void RemovePicker()
		{
			Strategy.RemoveCompositeRole(Meta.Picker.RelationType);
		}


		virtual public Party ShipToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.ShipToParty.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipToParty.RelationType, value);
			}
		}

		virtual public bool ExistShipToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipToParty.RelationType);
			}
		}

		virtual public void RemoveShipToParty()
		{
			Strategy.RemoveCompositeRole(Meta.ShipToParty.RelationType);
		}


		virtual public Store Store
		{ 
			get
			{
				return (Store) Strategy.GetCompositeRole(Meta.Store.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Store.RelationType, value);
			}
		}

		virtual public bool ExistStore
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Store.RelationType);
			}
		}

		virtual public void RemoveStore()
		{
			Strategy.RemoveCompositeRole(Meta.Store.RelationType);
		}


		virtual public global::System.String PrintContent 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PrintContent.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PrintContent.RelationType, value);
			}
		}

		virtual public bool ExistPrintContent{
			get
			{
				return Strategy.ExistUnitRole(Meta.PrintContent.RelationType);
			}
		}

		virtual public void RemovePrintContent()
		{
			Strategy.RemoveUnitRole(Meta.PrintContent.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PreviousObjectStates.RelationType, value);
			}
		}

		virtual public void AddPreviousObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public void RemovePreviousObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectStates.RelationType, value);
		}

		virtual public bool ExistPreviousObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PreviousObjectStates.RelationType);
			}
		}

		virtual public void RemovePreviousObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.PreviousObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LastObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LastObjectStates.RelationType, value);
			}
		}

		virtual public void AddLastObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public void RemoveLastObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.LastObjectStates.RelationType, value);
		}

		virtual public bool ExistLastObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LastObjectStates.RelationType);
			}
		}

		virtual public void RemoveLastObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.LastObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.ObjectStates.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.ObjectStates.RelationType, value);
			}
		}

		virtual public void AddObjectState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public void RemoveObjectState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.ObjectStates.RelationType, value);
		}

		virtual public bool ExistObjectStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.ObjectStates.RelationType);
			}
		}

		virtual public void RemoveObjectStates()
		{
			Strategy.RemoveCompositeRoles(Meta.ObjectStates.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		public PickListHold Hold()
		{ 
			var method = new PickListHold(this);
            method.Execute();
            return method;
		}

		public PickListHold Hold(System.Action<PickListHold> action)
		{ 
			var method = new PickListHold(this);
            action(method);
            method.Execute();
            return method;
		}

		public PickListContinue Continue()
		{ 
			var method = new PickListContinue(this);
            method.Execute();
            return method;
		}

		public PickListContinue Continue(System.Action<PickListContinue> action)
		{ 
			var method = new PickListContinue(this);
            action(method);
            method.Execute();
            return method;
		}

		public PickListCancel Cancel()
		{ 
			var method = new PickListCancel(this);
            method.Execute();
            return method;
		}

		public PickListCancel Cancel(System.Action<PickListCancel> action)
		{ 
			var method = new PickListCancel(this);
            action(method);
            method.Execute();
            return method;
		}

		public PickListSetPicked SetPicked()
		{ 
			var method = new PickListSetPicked(this);
            method.Execute();
            return method;
		}

		public PickListSetPicked SetPicked(System.Action<PickListSetPicked> action)
		{ 
			var method = new PickListSetPicked(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new PickListOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PickListOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PickListOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PickListOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PickListOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PickListOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PickListOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PickListOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PickListOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PickListOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class PickListBuilder : Allors.ObjectBuilder<PickList> , PrintableBuilder, TransitionalBuilder, VersionedBuilder, global::System.IDisposable
	{		
		public PickListBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PickList instance)
		{
			

			if(this.CreationDate.HasValue)
			{
				instance.CreationDate = this.CreationDate.Value;
			}			
		
		

			instance.PrintContent = this.PrintContent;
		
		
				

			instance.PickListState = this.PickListState;

		

			instance.CurrentVersion = this.CurrentVersion;

		
			if(this.AllVersions!=null)
			{
				instance.AllVersions = this.AllVersions.ToArray();
			}
		

			instance.CustomerShipmentCorrection = this.CustomerShipmentCorrection;

		
			if(this.PickListItems!=null)
			{
				instance.PickListItems = this.PickListItems.ToArray();
			}
		

			instance.Picker = this.Picker;

		

			instance.ShipToParty = this.ShipToParty;

		

			instance.Store = this.Store;

								
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public PickListState PickListState {get; set;}

				/// <exclude/>
				public PickListBuilder WithPickListState(PickListState value)
		        {
		            if(this.PickListState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PickListState = value;
		            return this;
		        }		

				
				public PickListVersion CurrentVersion {get; set;}

				/// <exclude/>
				public PickListBuilder WithCurrentVersion(PickListVersion value)
		        {
		            if(this.CurrentVersion!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentVersion = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PickListVersion> AllVersions {get; set;}	

				/// <exclude/>
				public PickListBuilder WithAllVersion(PickListVersion value)
		        {
					if(this.AllVersions == null)
					{
						this.AllVersions = new global::System.Collections.Generic.List<PickListVersion>(); 
					}
		            this.AllVersions.Add(value);
		            return this;
		        }		

				
				public CustomerShipment CustomerShipmentCorrection {get; set;}

				/// <exclude/>
				public PickListBuilder WithCustomerShipmentCorrection(CustomerShipment value)
		        {
		            if(this.CustomerShipmentCorrection!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CustomerShipmentCorrection = value;
		            return this;
		        }		

				
				public global::System.DateTime? CreationDate {get; set;}

				/// <exclude/>
				public PickListBuilder WithCreationDate(global::System.DateTime? value)
		        {
				    if(this.CreationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreationDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PickListItem> PickListItems {get; set;}	

				/// <exclude/>
				public PickListBuilder WithPickListItem(PickListItem value)
		        {
					if(this.PickListItems == null)
					{
						this.PickListItems = new global::System.Collections.Generic.List<PickListItem>(); 
					}
		            this.PickListItems.Add(value);
		            return this;
		        }		

				
				public Person Picker {get; set;}

				/// <exclude/>
				public PickListBuilder WithPicker(Person value)
		        {
		            if(this.Picker!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Picker = value;
		            return this;
		        }		

				
				public Party ShipToParty {get; set;}

				/// <exclude/>
				public PickListBuilder WithShipToParty(Party value)
		        {
		            if(this.ShipToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToParty = value;
		            return this;
		        }		

				
				public Store Store {get; set;}

				/// <exclude/>
				public PickListBuilder WithStore(Store value)
		        {
		            if(this.Store!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Store = value;
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public PickListBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PickListBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PickListBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PickLists : global::Allors.ObjectsBase<PickList>
	{
		public PickLists(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaPickList Meta
		{
			get
			{
				return Allors.Meta.MetaPickList.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}