// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
import { SessionObject, Method } from "../../framework";

import { WorkEffort } from './WorkEffort.g';
import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { Deletable } from './Deletable.g';
import { Auditable } from './Auditable.g';
import { WorkTaskVersion } from './WorkTaskVersion.g';
import { WorkEffortState } from './WorkEffortState.g';
import { Person } from './Person.g';
import { Priority } from './Priority.g';
import { WorkEffortPurpose } from './WorkEffortPurpose.g';
import { Facility } from './Facility.g';
import { Deliverable } from './Deliverable.g';
import { WorkEffortInventoryAssignment } from './WorkEffortInventoryAssignment.g';
import { WorkEffortType } from './WorkEffortType.g';
import { InventoryItem } from './InventoryItem.g';
import { Requirement } from './Requirement.g';
import { User } from './User.g';
import { QuoteItemVersion } from './QuoteItemVersion.g';
import { QuoteItem } from './QuoteItem.g';
import { WorkEffortAssignment } from './WorkEffortAssignment.g';
import { CommunicationEventVersion } from './CommunicationEventVersion.g';
import { CommunicationEvent } from './CommunicationEvent.g';
import { WorkEffortVersion } from './WorkEffortVersion.g';

export class WorkTask extends SessionObject implements WorkEffort {
    get CanReadSendNotification(): boolean {
        return this.canRead('SendNotification');
    }

    get CanWriteSendNotification(): boolean {
        return this.canWrite('SendNotification');
    }

    get SendNotification(): boolean {
        return this.get('SendNotification');
    }

    set SendNotification(value: boolean) {
        this.set('SendNotification', value);
    }

    get CanReadSendReminder(): boolean {
        return this.canRead('SendReminder');
    }

    get CanWriteSendReminder(): boolean {
        return this.canWrite('SendReminder');
    }

    get SendReminder(): boolean {
        return this.get('SendReminder');
    }

    set SendReminder(value: boolean) {
        this.set('SendReminder', value);
    }

    get CanReadRemindAt(): boolean {
        return this.canRead('RemindAt');
    }

    get CanWriteRemindAt(): boolean {
        return this.canWrite('RemindAt');
    }

    get RemindAt(): Date {
        return this.get('RemindAt');
    }

    set RemindAt(value: Date) {
        this.set('RemindAt', value);
    }

    get CanReadCurrentVersion(): boolean {
        return this.canRead('CurrentVersion');
    }

    get CanWriteCurrentVersion(): boolean {
        return this.canWrite('CurrentVersion');
    }

    get CurrentVersion(): WorkTaskVersion {
        return this.get('CurrentVersion');
    }

    set CurrentVersion(value: WorkTaskVersion) {
        this.set('CurrentVersion', value);
    }

    get CanReadAllVersions(): boolean {
        return this.canRead('AllVersions');
    }

    get CanWriteAllVersions(): boolean {
        return this.canWrite('AllVersions');
    }

    get AllVersions(): WorkTaskVersion[] {
        return this.get('AllVersions');
    }

    AddAllVersion(value: WorkTaskVersion) {
        return this.add('AllVersions', value);
    }

    RemoveAllVersion(value: WorkTaskVersion) {
        return this.remove('AllVersions', value);
    }

    set AllVersions(value: WorkTaskVersion[]) {
        this.set('AllVersions', value);
    }

    get CanReadWorkEffortState(): boolean {
        return this.canRead('WorkEffortState');
    }

    get CanWriteWorkEffortState(): boolean {
        return this.canWrite('WorkEffortState');
    }

    get WorkEffortState(): WorkEffortState {
        return this.get('WorkEffortState');
    }

    set WorkEffortState(value: WorkEffortState) {
        this.set('WorkEffortState', value);
    }

    get CanReadOwner(): boolean {
        return this.canRead('Owner');
    }

    get CanWriteOwner(): boolean {
        return this.canWrite('Owner');
    }

    get Owner(): Person {
        return this.get('Owner');
    }

    set Owner(value: Person) {
        this.set('Owner', value);
    }

    get CanReadName(): boolean {
        return this.canRead('Name');
    }

    get CanWriteName(): boolean {
        return this.canWrite('Name');
    }

    get Name(): string {
        return this.get('Name');
    }

    set Name(value: string) {
        this.set('Name', value);
    }

    get CanReadDescription(): boolean {
        return this.canRead('Description');
    }

    get CanWriteDescription(): boolean {
        return this.canWrite('Description');
    }

    get Description(): string {
        return this.get('Description');
    }

    set Description(value: string) {
        this.set('Description', value);
    }

    get CanReadPriority(): boolean {
        return this.canRead('Priority');
    }

    get CanWritePriority(): boolean {
        return this.canWrite('Priority');
    }

    get Priority(): Priority {
        return this.get('Priority');
    }

    set Priority(value: Priority) {
        this.set('Priority', value);
    }

    get CanReadWorkEffortPurposes(): boolean {
        return this.canRead('WorkEffortPurposes');
    }

    get CanWriteWorkEffortPurposes(): boolean {
        return this.canWrite('WorkEffortPurposes');
    }

    get WorkEffortPurposes(): WorkEffortPurpose[] {
        return this.get('WorkEffortPurposes');
    }

    AddWorkEffortPurpose(value: WorkEffortPurpose) {
        return this.add('WorkEffortPurposes', value);
    }

    RemoveWorkEffortPurpose(value: WorkEffortPurpose) {
        return this.remove('WorkEffortPurposes', value);
    }

    set WorkEffortPurposes(value: WorkEffortPurpose[]) {
        this.set('WorkEffortPurposes', value);
    }

    get CanReadActualCompletion(): boolean {
        return this.canRead('ActualCompletion');
    }

    get CanWriteActualCompletion(): boolean {
        return this.canWrite('ActualCompletion');
    }

    get ActualCompletion(): Date {
        return this.get('ActualCompletion');
    }

    set ActualCompletion(value: Date) {
        this.set('ActualCompletion', value);
    }

    get CanReadScheduledStart(): boolean {
        return this.canRead('ScheduledStart');
    }

    get CanWriteScheduledStart(): boolean {
        return this.canWrite('ScheduledStart');
    }

    get ScheduledStart(): Date {
        return this.get('ScheduledStart');
    }

    set ScheduledStart(value: Date) {
        this.set('ScheduledStart', value);
    }

    get CanReadScheduledCompletion(): boolean {
        return this.canRead('ScheduledCompletion');
    }

    get CanWriteScheduledCompletion(): boolean {
        return this.canWrite('ScheduledCompletion');
    }

    get ScheduledCompletion(): Date {
        return this.get('ScheduledCompletion');
    }

    set ScheduledCompletion(value: Date) {
        this.set('ScheduledCompletion', value);
    }

    get CanReadActualHours(): boolean {
        return this.canRead('ActualHours');
    }

    get CanWriteActualHours(): boolean {
        return this.canWrite('ActualHours');
    }

    get ActualHours(): number {
        return this.get('ActualHours');
    }

    set ActualHours(value: number) {
        this.set('ActualHours', value);
    }

    get CanReadEstimatedHours(): boolean {
        return this.canRead('EstimatedHours');
    }

    get CanWriteEstimatedHours(): boolean {
        return this.canWrite('EstimatedHours');
    }

    get EstimatedHours(): number {
        return this.get('EstimatedHours');
    }

    set EstimatedHours(value: number) {
        this.set('EstimatedHours', value);
    }

    get CanReadPrecendencies(): boolean {
        return this.canRead('Precendencies');
    }

    get CanWritePrecendencies(): boolean {
        return this.canWrite('Precendencies');
    }

    get Precendencies(): WorkEffort[] {
        return this.get('Precendencies');
    }

    AddPrecendency(value: WorkEffort) {
        return this.add('Precendencies', value);
    }

    RemovePrecendency(value: WorkEffort) {
        return this.remove('Precendencies', value);
    }

    set Precendencies(value: WorkEffort[]) {
        this.set('Precendencies', value);
    }

    get CanReadFacility(): boolean {
        return this.canRead('Facility');
    }

    get CanWriteFacility(): boolean {
        return this.canWrite('Facility');
    }

    get Facility(): Facility {
        return this.get('Facility');
    }

    set Facility(value: Facility) {
        this.set('Facility', value);
    }

    get CanReadDeliverablesProduced(): boolean {
        return this.canRead('DeliverablesProduced');
    }

    get CanWriteDeliverablesProduced(): boolean {
        return this.canWrite('DeliverablesProduced');
    }

    get DeliverablesProduced(): Deliverable[] {
        return this.get('DeliverablesProduced');
    }

    AddDeliverablesProduced(value: Deliverable) {
        return this.add('DeliverablesProduced', value);
    }

    RemoveDeliverablesProduced(value: Deliverable) {
        return this.remove('DeliverablesProduced', value);
    }

    set DeliverablesProduced(value: Deliverable[]) {
        this.set('DeliverablesProduced', value);
    }

    get CanReadActualStart(): boolean {
        return this.canRead('ActualStart');
    }

    get CanWriteActualStart(): boolean {
        return this.canWrite('ActualStart');
    }

    get ActualStart(): Date {
        return this.get('ActualStart');
    }

    set ActualStart(value: Date) {
        this.set('ActualStart', value);
    }

    get CanReadInventoryItemsNeeded(): boolean {
        return this.canRead('InventoryItemsNeeded');
    }

    get CanWriteInventoryItemsNeeded(): boolean {
        return this.canWrite('InventoryItemsNeeded');
    }

    get InventoryItemsNeeded(): WorkEffortInventoryAssignment[] {
        return this.get('InventoryItemsNeeded');
    }

    AddInventoryItemsNeeded(value: WorkEffortInventoryAssignment) {
        return this.add('InventoryItemsNeeded', value);
    }

    RemoveInventoryItemsNeeded(value: WorkEffortInventoryAssignment) {
        return this.remove('InventoryItemsNeeded', value);
    }

    set InventoryItemsNeeded(value: WorkEffortInventoryAssignment[]) {
        this.set('InventoryItemsNeeded', value);
    }

    get CanReadChildren(): boolean {
        return this.canRead('Children');
    }

    get CanWriteChildren(): boolean {
        return this.canWrite('Children');
    }

    get Children(): WorkEffort[] {
        return this.get('Children');
    }

    AddChild(value: WorkEffort) {
        return this.add('Children', value);
    }

    RemoveChild(value: WorkEffort) {
        return this.remove('Children', value);
    }

    set Children(value: WorkEffort[]) {
        this.set('Children', value);
    }

    get CanReadWorkEffortType(): boolean {
        return this.canRead('WorkEffortType');
    }

    get CanWriteWorkEffortType(): boolean {
        return this.canWrite('WorkEffortType');
    }

    get WorkEffortType(): WorkEffortType {
        return this.get('WorkEffortType');
    }

    set WorkEffortType(value: WorkEffortType) {
        this.set('WorkEffortType', value);
    }

    get CanReadInventoryItemsProduced(): boolean {
        return this.canRead('InventoryItemsProduced');
    }

    get CanWriteInventoryItemsProduced(): boolean {
        return this.canWrite('InventoryItemsProduced');
    }

    get InventoryItemsProduced(): InventoryItem[] {
        return this.get('InventoryItemsProduced');
    }

    AddInventoryItemsProduced(value: InventoryItem) {
        return this.add('InventoryItemsProduced', value);
    }

    RemoveInventoryItemsProduced(value: InventoryItem) {
        return this.remove('InventoryItemsProduced', value);
    }

    set InventoryItemsProduced(value: InventoryItem[]) {
        this.set('InventoryItemsProduced', value);
    }

    get CanReadRequirementFulfillments(): boolean {
        return this.canRead('RequirementFulfillments');
    }

    get CanWriteRequirementFulfillments(): boolean {
        return this.canWrite('RequirementFulfillments');
    }

    get RequirementFulfillments(): Requirement[] {
        return this.get('RequirementFulfillments');
    }

    AddRequirementFulfillment(value: Requirement) {
        return this.add('RequirementFulfillments', value);
    }

    RemoveRequirementFulfillment(value: Requirement) {
        return this.remove('RequirementFulfillments', value);
    }

    set RequirementFulfillments(value: Requirement[]) {
        this.set('RequirementFulfillments', value);
    }

    get CanReadSpecialTerms(): boolean {
        return this.canRead('SpecialTerms');
    }

    get CanWriteSpecialTerms(): boolean {
        return this.canWrite('SpecialTerms');
    }

    get SpecialTerms(): string {
        return this.get('SpecialTerms');
    }

    set SpecialTerms(value: string) {
        this.set('SpecialTerms', value);
    }

    get CanReadConcurrencies(): boolean {
        return this.canRead('Concurrencies');
    }

    get CanWriteConcurrencies(): boolean {
        return this.canWrite('Concurrencies');
    }

    get Concurrencies(): WorkEffort[] {
        return this.get('Concurrencies');
    }

    AddConcurrency(value: WorkEffort) {
        return this.add('Concurrencies', value);
    }

    RemoveConcurrency(value: WorkEffort) {
        return this.remove('Concurrencies', value);
    }

    set Concurrencies(value: WorkEffort[]) {
        this.set('Concurrencies', value);
    }

    get CanReadUniqueId(): boolean {
        return this.canRead('UniqueId');
    }

    get CanWriteUniqueId(): boolean {
        return this.canWrite('UniqueId');
    }

    get UniqueId(): string {
        return this.get('UniqueId');
    }

    set UniqueId(value: string) {
        this.set('UniqueId', value);
    }

    get CanReadCreatedBy(): boolean {
        return this.canRead('CreatedBy');
    }

    get CanWriteCreatedBy(): boolean {
        return this.canWrite('CreatedBy');
    }

    get CreatedBy(): User {
        return this.get('CreatedBy');
    }

    set CreatedBy(value: User) {
        this.set('CreatedBy', value);
    }

    get CanReadLastModifiedBy(): boolean {
        return this.canRead('LastModifiedBy');
    }

    get CanWriteLastModifiedBy(): boolean {
        return this.canWrite('LastModifiedBy');
    }

    get LastModifiedBy(): User {
        return this.get('LastModifiedBy');
    }

    set LastModifiedBy(value: User) {
        this.set('LastModifiedBy', value);
    }

    get CanReadCreationDate(): boolean {
        return this.canRead('CreationDate');
    }

    get CanWriteCreationDate(): boolean {
        return this.canWrite('CreationDate');
    }

    get CreationDate(): Date {
        return this.get('CreationDate');
    }

    set CreationDate(value: Date) {
        this.set('CreationDate', value);
    }

    get CanReadLastModifiedDate(): boolean {
        return this.canRead('LastModifiedDate');
    }

    get CanWriteLastModifiedDate(): boolean {
        return this.canWrite('LastModifiedDate');
    }

    get LastModifiedDate(): Date {
        return this.get('LastModifiedDate');
    }

    set LastModifiedDate(value: Date) {
        this.set('LastModifiedDate', value);
    }


    get CanExecuteConfirm(): boolean {
        return this.canExecute('Confirm');
    }

    get Confirm(): Method {
        return new Method(this, 'Confirm');
    }
    get CanExecuteFinish(): boolean {
        return this.canExecute('Finish');
    }

    get Finish(): Method {
        return new Method(this, 'Finish');
    }
    get CanExecuteCancel(): boolean {
        return this.canExecute('Cancel');
    }

    get Cancel(): Method {
        return new Method(this, 'Cancel');
    }
    get CanExecuteReopen(): boolean {
        return this.canExecute('Reopen');
    }

    get Reopen(): Method {
        return new Method(this, 'Reopen');
    }
    get CanExecuteDelete(): boolean {
        return this.canExecute('Delete');
    }

    get Delete(): Method {
        return new Method(this, 'Delete');
    }
}
