// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
import { SessionObject, Method } from "../../framework";

import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { Commentable } from './Commentable.g';
import { PartSpecificationState } from './PartSpecificationState.g';
import { PartSpecificationVersion } from './PartSpecificationVersion.g';

export class PartSpecification extends SessionObject implements UniquelyIdentifiable, Commentable {
    get CanReadPartSpecificationState(): boolean {
        return this.canRead('PartSpecificationState');
    }

    get CanWritePartSpecificationState(): boolean {
        return this.canWrite('PartSpecificationState');
    }

    get PartSpecificationState(): PartSpecificationState {
        return this.get('PartSpecificationState');
    }

    set PartSpecificationState(value: PartSpecificationState) {
        this.set('PartSpecificationState', value);
    }

    get CanReadCurrentVersion(): boolean {
        return this.canRead('CurrentVersion');
    }

    get CanWriteCurrentVersion(): boolean {
        return this.canWrite('CurrentVersion');
    }

    get CurrentVersion(): PartSpecificationVersion {
        return this.get('CurrentVersion');
    }

    set CurrentVersion(value: PartSpecificationVersion) {
        this.set('CurrentVersion', value);
    }

    get CanReadAllVersions(): boolean {
        return this.canRead('AllVersions');
    }

    get CanWriteAllVersions(): boolean {
        return this.canWrite('AllVersions');
    }

    get AllVersions(): PartSpecificationVersion[] {
        return this.get('AllVersions');
    }

    AddAllVersion(value: PartSpecificationVersion) {
        return this.add('AllVersions', value);
    }

    RemoveAllVersion(value: PartSpecificationVersion) {
        return this.remove('AllVersions', value);
    }

    set AllVersions(value: PartSpecificationVersion[]) {
        this.set('AllVersions', value);
    }

    get CanReadUniqueId(): boolean {
        return this.canRead('UniqueId');
    }

    get CanWriteUniqueId(): boolean {
        return this.canWrite('UniqueId');
    }

    get UniqueId(): string {
        return this.get('UniqueId');
    }

    set UniqueId(value: string) {
        this.set('UniqueId', value);
    }

    get CanReadComment(): boolean {
        return this.canRead('Comment');
    }

    get CanWriteComment(): boolean {
        return this.canWrite('Comment');
    }

    get Comment(): string {
        return this.get('Comment');
    }

    set Comment(value: string) {
        this.set('Comment', value);
    }


}
