// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
import { SessionObject, Method } from "@allors/base-domain";

import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { CaseState } from './CaseState.g';
import { CaseVersion } from './CaseVersion.g';
import { CommunicationEventVersion } from './CommunicationEventVersion.g';
import { CommunicationEvent } from './CommunicationEvent.g';

export class Case extends SessionObject implements UniquelyIdentifiable {
    get CanReadCaseState(): boolean {
        return this.canRead('CaseState');
    }

    get CanWriteCaseState(): boolean {
        return this.canWrite('CaseState');
    }

    get CaseState(): CaseState {
        return this.get('CaseState');
    }

    set CaseState(value: CaseState) {
        this.set('CaseState', value);
    }

    get CanReadCurrentVersion(): boolean {
        return this.canRead('CurrentVersion');
    }

    get CanWriteCurrentVersion(): boolean {
        return this.canWrite('CurrentVersion');
    }

    get CurrentVersion(): CaseVersion {
        return this.get('CurrentVersion');
    }

    set CurrentVersion(value: CaseVersion) {
        this.set('CurrentVersion', value);
    }

    get CanReadAllVersions(): boolean {
        return this.canRead('AllVersions');
    }

    get CanWriteAllVersions(): boolean {
        return this.canWrite('AllVersions');
    }

    get AllVersions(): CaseVersion[] {
        return this.get('AllVersions');
    }

    AddAllVersion(value: CaseVersion) {
        return this.add('AllVersions', value);
    }

    RemoveAllVersion(value: CaseVersion) {
        return this.remove('AllVersions', value);
    }

    set AllVersions(value: CaseVersion[]) {
        this.set('AllVersions', value);
    }

    get CanReadUniqueId(): boolean {
        return this.canRead('UniqueId');
    }

    get CanWriteUniqueId(): boolean {
        return this.canWrite('UniqueId');
    }

    get UniqueId(): string {
        return this.get('UniqueId');
    }

    set UniqueId(value: string) {
        this.set('UniqueId', value);
    }


}
