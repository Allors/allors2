import { SessionObject } from "@allors/framework";
import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { RequirementState } from './RequirementState.g';
import { RequirementVersion } from './RequirementVersion.g';
import { RequirementType } from './RequirementType.g';
import { Party } from './Party.g';
import { Facility } from './Facility.g';
export declare class Requirement extends SessionObject implements UniquelyIdentifiable {
    readonly CanReadRequirementState: boolean;
    readonly CanWriteRequirementState: boolean;
    RequirementState: RequirementState;
    readonly CanReadCurrentVersion: boolean;
    readonly CanWriteCurrentVersion: boolean;
    CurrentVersion: RequirementVersion;
    readonly CanReadAllVersions: boolean;
    readonly CanWriteAllVersions: boolean;
    AllVersions: RequirementVersion[];
    AddAllVersion(value: RequirementVersion): void;
    RemoveAllVersion(value: RequirementVersion): void;
    readonly CanReadRequiredByDate: boolean;
    readonly CanWriteRequiredByDate: boolean;
    RequiredByDate: Date;
    readonly CanReadRequirementType: boolean;
    readonly CanWriteRequirementType: boolean;
    RequirementType: RequirementType;
    readonly CanReadAuthorizer: boolean;
    readonly CanWriteAuthorizer: boolean;
    Authorizer: Party;
    readonly CanReadReason: boolean;
    readonly CanWriteReason: boolean;
    Reason: string;
    readonly CanReadChildren: boolean;
    readonly CanWriteChildren: boolean;
    Children: Requirement[];
    AddChild(value: Requirement): void;
    RemoveChild(value: Requirement): void;
    readonly CanReadNeededFor: boolean;
    readonly CanWriteNeededFor: boolean;
    NeededFor: Party;
    readonly CanReadOriginator: boolean;
    readonly CanWriteOriginator: boolean;
    Originator: Party;
    readonly CanReadFacility: boolean;
    readonly CanWriteFacility: boolean;
    Facility: Facility;
    readonly CanReadServicedBy: boolean;
    readonly CanWriteServicedBy: boolean;
    ServicedBy: Party;
    readonly CanReadEstimatedBudget: boolean;
    readonly CanWriteEstimatedBudget: boolean;
    EstimatedBudget: number;
    readonly CanReadDescription: boolean;
    readonly CanWriteDescription: boolean;
    Description: string;
    readonly CanReadQuantity: boolean;
    readonly CanWriteQuantity: boolean;
    Quantity: number;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
}
