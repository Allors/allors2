import { SessionObject } from "@allors/framework";
import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { Product } from './Product.g';
import { CostCenter } from './CostCenter.g';
import { GeneralLedgerAccountType } from './GeneralLedgerAccountType.g';
import { DebitCreditConstant } from './DebitCreditConstant.g';
export declare class GeneralLedgerAccount extends SessionObject implements UniquelyIdentifiable {
    readonly CanReadDefaultCostUnit: boolean;
    readonly CanWriteDefaultCostUnit: boolean;
    DefaultCostUnit: Product;
    readonly CanReadDefaultCostCenter: boolean;
    readonly CanWriteDefaultCostCenter: boolean;
    DefaultCostCenter: CostCenter;
    readonly CanReadDescription: boolean;
    readonly CanWriteDescription: boolean;
    Description: string;
    readonly CanReadGeneralLedgerAccountType: boolean;
    readonly CanWriteGeneralLedgerAccountType: boolean;
    GeneralLedgerAccountType: GeneralLedgerAccountType;
    readonly CanReadCashAccount: boolean;
    readonly CanWriteCashAccount: boolean;
    CashAccount: boolean;
    readonly CanReadCostCenterAccount: boolean;
    readonly CanWriteCostCenterAccount: boolean;
    CostCenterAccount: boolean;
    readonly CanReadSide: boolean;
    readonly CanWriteSide: boolean;
    Side: DebitCreditConstant;
    readonly CanReadBalanceSheetAccount: boolean;
    readonly CanWriteBalanceSheetAccount: boolean;
    BalanceSheetAccount: boolean;
    readonly CanReadReconciliationAccount: boolean;
    readonly CanWriteReconciliationAccount: boolean;
    ReconciliationAccount: boolean;
    readonly CanReadName: boolean;
    readonly CanWriteName: boolean;
    Name: string;
    readonly CanReadCostCenterRequired: boolean;
    readonly CanWriteCostCenterRequired: boolean;
    CostCenterRequired: boolean;
    readonly CanReadCostUnitRequired: boolean;
    readonly CanWriteCostUnitRequired: boolean;
    CostUnitRequired: boolean;
    readonly CanReadCostCentersAllowed: boolean;
    readonly CanWriteCostCentersAllowed: boolean;
    CostCentersAllowed: CostCenter[];
    AddCostCentersAllowed(value: CostCenter): void;
    RemoveCostCentersAllowed(value: CostCenter): void;
    readonly CanReadCostUnitAccount: boolean;
    readonly CanWriteCostUnitAccount: boolean;
    CostUnitAccount: boolean;
    readonly CanReadAccountNumber: boolean;
    readonly CanWriteAccountNumber: boolean;
    AccountNumber: string;
    readonly CanReadCostUnitsAllowed: boolean;
    readonly CanWriteCostUnitsAllowed: boolean;
    CostUnitsAllowed: Product[];
    AddCostUnitsAllowed(value: Product): void;
    RemoveCostUnitsAllowed(value: Product): void;
    readonly CanReadProtected: boolean;
    readonly CanWriteProtected: boolean;
    Protected: boolean;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
}
