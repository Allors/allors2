import { SessionObject } from "@allors/framework";
import { ProductFeature } from './ProductFeature.g';
import { ProductCategory } from './ProductCategory.g';
import { Model } from './Model.g';
import { EstimatedProductCost } from './EstimatedProductCost.g';
import { PriceComponent } from './PriceComponent.g';
import { VatRate } from './VatRate.g';
export declare class Brand extends SessionObject implements ProductFeature {
    readonly CanReadName: boolean;
    readonly CanWriteName: boolean;
    Name: string;
    readonly CanReadProductCategories: boolean;
    readonly CanWriteProductCategories: boolean;
    ProductCategories: ProductCategory[];
    AddProductCategory(value: ProductCategory): void;
    RemoveProductCategory(value: ProductCategory): void;
    readonly CanReadModels: boolean;
    readonly CanWriteModels: boolean;
    Models: Model[];
    AddModel(value: Model): void;
    RemoveModel(value: Model): void;
    readonly CanReadEstimatedProductCosts: boolean;
    readonly CanWriteEstimatedProductCosts: boolean;
    EstimatedProductCosts: EstimatedProductCost[];
    AddEstimatedProductCost(value: EstimatedProductCost): void;
    RemoveEstimatedProductCost(value: EstimatedProductCost): void;
    readonly CanReadBasePrices: boolean;
    readonly BasePrices: PriceComponent[];
    readonly CanReadDescription: boolean;
    readonly CanWriteDescription: boolean;
    Description: string;
    readonly CanReadDependentFeatures: boolean;
    readonly CanWriteDependentFeatures: boolean;
    DependentFeatures: ProductFeature[];
    AddDependentFeature(value: ProductFeature): void;
    RemoveDependentFeature(value: ProductFeature): void;
    readonly CanReadIncompatibleFeatures: boolean;
    readonly CanWriteIncompatibleFeatures: boolean;
    IncompatibleFeatures: ProductFeature[];
    AddIncompatibleFeature(value: ProductFeature): void;
    RemoveIncompatibleFeature(value: ProductFeature): void;
    readonly CanReadVatRate: boolean;
    readonly CanWriteVatRate: boolean;
    VatRate: VatRate;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
}
