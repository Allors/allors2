import { SessionObject } from "@allors/framework";
import { InventoryItem } from './InventoryItem.g';
import { SerialisedInventoryItemState } from './SerialisedInventoryItemState.g';
import { SerialisedInventoryItemVersion } from './SerialisedInventoryItemVersion.g';
import { Ownership } from './Ownership.g';
import { ProductCharacteristicValue } from './ProductCharacteristicValue.g';
import { InventoryItemVariance } from './InventoryItemVariance.g';
import { Part } from './Part.g';
import { Lot } from './Lot.g';
import { UnitOfMeasure } from './UnitOfMeasure.g';
import { Good } from './Good.g';
import { ProductType } from './ProductType.g';
import { Facility } from './Facility.g';
export declare class SerialisedInventoryItem extends SessionObject implements InventoryItem {
    readonly CanReadSerialisedInventoryItemState: boolean;
    readonly CanWriteSerialisedInventoryItemState: boolean;
    SerialisedInventoryItemState: SerialisedInventoryItemState;
    readonly CanReadCurrentVersion: boolean;
    readonly CanWriteCurrentVersion: boolean;
    CurrentVersion: SerialisedInventoryItemVersion;
    readonly CanReadAllVersions: boolean;
    readonly CanWriteAllVersions: boolean;
    AllVersions: SerialisedInventoryItemVersion[];
    AddAllVersion(value: SerialisedInventoryItemVersion): void;
    RemoveAllVersion(value: SerialisedInventoryItemVersion): void;
    readonly CanReadSerialNumber: boolean;
    readonly CanWriteSerialNumber: boolean;
    SerialNumber: string;
    readonly CanReadOwnership: boolean;
    readonly CanWriteOwnership: boolean;
    Ownership: Ownership;
    readonly CanReadOwner: boolean;
    readonly CanWriteOwner: boolean;
    Owner: string;
    readonly CanReadAcquisitionYear: boolean;
    readonly CanWriteAcquisitionYear: boolean;
    AcquisitionYear: number;
    readonly CanReadManufacturingYear: boolean;
    readonly CanWriteManufacturingYear: boolean;
    ManufacturingYear: number;
    readonly CanReadReplacementValue: boolean;
    readonly CanWriteReplacementValue: boolean;
    ReplacementValue: number;
    readonly CanReadLifeTime: boolean;
    readonly CanWriteLifeTime: boolean;
    LifeTime: number;
    readonly CanReadDepreciationYears: boolean;
    readonly CanWriteDepreciationYears: boolean;
    DepreciationYears: number;
    readonly CanReadPurchasePrice: boolean;
    readonly CanWritePurchasePrice: boolean;
    PurchasePrice: number;
    readonly CanReadExpectedSalesPrice: boolean;
    readonly CanWriteExpectedSalesPrice: boolean;
    ExpectedSalesPrice: number;
    readonly CanReadRefurbishCost: boolean;
    readonly CanWriteRefurbishCost: boolean;
    RefurbishCost: number;
    readonly CanReadTransportCost: boolean;
    readonly CanWriteTransportCost: boolean;
    TransportCost: number;
    readonly CanReadProductCharacteristicValues: boolean;
    readonly CanWriteProductCharacteristicValues: boolean;
    ProductCharacteristicValues: ProductCharacteristicValue[];
    AddProductCharacteristicValue(value: ProductCharacteristicValue): void;
    RemoveProductCharacteristicValue(value: ProductCharacteristicValue): void;
    readonly CanReadInventoryItemVariances: boolean;
    readonly CanWriteInventoryItemVariances: boolean;
    InventoryItemVariances: InventoryItemVariance[];
    AddInventoryItemVariance(value: InventoryItemVariance): void;
    RemoveInventoryItemVariance(value: InventoryItemVariance): void;
    readonly CanReadPart: boolean;
    readonly CanWritePart: boolean;
    Part: Part;
    readonly CanReadName: boolean;
    readonly Name: string;
    readonly CanReadLot: boolean;
    readonly CanWriteLot: boolean;
    Lot: Lot;
    readonly CanReadSku: boolean;
    readonly Sku: string;
    readonly CanReadUnitOfMeasure: boolean;
    readonly UnitOfMeasure: UnitOfMeasure;
    readonly CanReadGood: boolean;
    readonly CanWriteGood: boolean;
    Good: Good;
    readonly CanReadProductType: boolean;
    readonly CanWriteProductType: boolean;
    ProductType: ProductType;
    readonly CanReadFacility: boolean;
    readonly CanWriteFacility: boolean;
    Facility: Facility;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
}
