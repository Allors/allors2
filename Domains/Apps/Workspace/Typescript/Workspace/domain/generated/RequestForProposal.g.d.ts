import { SessionObject, Method } from "@allors/framework";
import { Request } from './Request.g';
import { RequestForProposalVersion } from './RequestForProposalVersion.g';
import { RequestState } from './RequestState.g';
import { RequestItem } from './RequestItem.g';
import { RespondingParty } from './RespondingParty.g';
import { Party } from './Party.g';
import { Currency } from './Currency.g';
import { ContactMechanism } from './ContactMechanism.g';
import { Person } from './Person.g';
import { User } from './User.g';
export declare class RequestForProposal extends SessionObject implements Request {
    readonly CanReadCurrentVersion: boolean;
    readonly CanWriteCurrentVersion: boolean;
    CurrentVersion: RequestForProposalVersion;
    readonly CanReadAllVersions: boolean;
    readonly CanWriteAllVersions: boolean;
    AllVersions: RequestForProposalVersion[];
    AddAllVersion(value: RequestForProposalVersion): void;
    RemoveAllVersion(value: RequestForProposalVersion): void;
    readonly CanReadRequestState: boolean;
    readonly CanWriteRequestState: boolean;
    RequestState: RequestState;
    readonly CanReadInternalComment: boolean;
    readonly CanWriteInternalComment: boolean;
    InternalComment: string;
    readonly CanReadDescription: boolean;
    readonly CanWriteDescription: boolean;
    Description: string;
    readonly CanReadRequestDate: boolean;
    readonly CanWriteRequestDate: boolean;
    RequestDate: Date;
    readonly CanReadRequiredResponseDate: boolean;
    readonly CanWriteRequiredResponseDate: boolean;
    RequiredResponseDate: Date;
    readonly CanReadRequestItems: boolean;
    readonly CanWriteRequestItems: boolean;
    RequestItems: RequestItem[];
    AddRequestItem(value: RequestItem): void;
    RemoveRequestItem(value: RequestItem): void;
    readonly CanReadRequestNumber: boolean;
    readonly CanWriteRequestNumber: boolean;
    RequestNumber: string;
    readonly CanReadRespondingParties: boolean;
    readonly CanWriteRespondingParties: boolean;
    RespondingParties: RespondingParty[];
    AddRespondingParty(value: RespondingParty): void;
    RemoveRespondingParty(value: RespondingParty): void;
    readonly CanReadOriginator: boolean;
    readonly CanWriteOriginator: boolean;
    Originator: Party;
    readonly CanReadCurrency: boolean;
    readonly CanWriteCurrency: boolean;
    Currency: Currency;
    readonly CanReadFullfillContactMechanism: boolean;
    readonly CanWriteFullfillContactMechanism: boolean;
    FullfillContactMechanism: ContactMechanism;
    readonly CanReadEmailAddress: boolean;
    readonly CanWriteEmailAddress: boolean;
    EmailAddress: string;
    readonly CanReadTelephoneNumber: boolean;
    readonly CanWriteTelephoneNumber: boolean;
    TelephoneNumber: string;
    readonly CanReadTelephoneCountryCode: boolean;
    readonly CanWriteTelephoneCountryCode: boolean;
    TelephoneCountryCode: string;
    readonly CanReadContactPerson: boolean;
    readonly CanWriteContactPerson: boolean;
    ContactPerson: Person;
    readonly CanReadComment: boolean;
    readonly CanWriteComment: boolean;
    Comment: string;
    readonly CanReadCreatedBy: boolean;
    readonly CanWriteCreatedBy: boolean;
    CreatedBy: User;
    readonly CanReadLastModifiedBy: boolean;
    readonly CanWriteLastModifiedBy: boolean;
    LastModifiedBy: User;
    readonly CanReadCreationDate: boolean;
    readonly CanWriteCreationDate: boolean;
    CreationDate: Date;
    readonly CanReadLastModifiedDate: boolean;
    readonly CanWriteLastModifiedDate: boolean;
    LastModifiedDate: Date;
    readonly CanReadPrintContent: boolean;
    readonly CanWritePrintContent: boolean;
    PrintContent: string;
    readonly CanExecuteCancel: boolean;
    readonly Cancel: Method;
    readonly CanExecuteReject: boolean;
    readonly Reject: Method;
    readonly CanExecuteSubmit: boolean;
    readonly Submit: Method;
    readonly CanExecuteHold: boolean;
    readonly Hold: Method;
}
