import { SessionObject } from "@allors/framework";
import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { Catalogue } from './Catalogue.g';
import { Media } from './Media.g';
import { Facility } from './Facility.g';
import { ShipmentMethod } from './ShipmentMethod.g';
import { Carrier } from './Carrier.g';
import { PaymentMethod } from './PaymentMethod.g';
import { ProcessFlow } from './ProcessFlow.g';
export declare class Store extends SessionObject implements UniquelyIdentifiable {
    readonly CanReadCatalogues: boolean;
    readonly CanWriteCatalogues: boolean;
    Catalogues: Catalogue[];
    AddCatalogue(value: Catalogue): void;
    RemoveCatalogue(value: Catalogue): void;
    readonly CanReadOutgoingShipmentNumberPrefix: boolean;
    readonly CanWriteOutgoingShipmentNumberPrefix: boolean;
    OutgoingShipmentNumberPrefix: string;
    readonly CanReadSalesInvoiceNumberPrefix: boolean;
    readonly CanWriteSalesInvoiceNumberPrefix: boolean;
    SalesInvoiceNumberPrefix: string;
    readonly CanReadPaymentGracePeriod: boolean;
    readonly CanWritePaymentGracePeriod: boolean;
    PaymentGracePeriod: number;
    readonly CanReadLogoImage: boolean;
    readonly CanWriteLogoImage: boolean;
    LogoImage: Media;
    readonly CanReadPaymentNetDays: boolean;
    readonly CanWritePaymentNetDays: boolean;
    PaymentNetDays: number;
    readonly CanReadDefaultFacility: boolean;
    readonly CanWriteDefaultFacility: boolean;
    DefaultFacility: Facility;
    readonly CanReadName: boolean;
    readonly CanWriteName: boolean;
    Name: string;
    readonly CanReadCreditLimit: boolean;
    readonly CanWriteCreditLimit: boolean;
    CreditLimit: number;
    readonly CanReadDefaultShipmentMethod: boolean;
    readonly CanWriteDefaultShipmentMethod: boolean;
    DefaultShipmentMethod: ShipmentMethod;
    readonly CanReadDefaultCarrier: boolean;
    readonly CanWriteDefaultCarrier: boolean;
    DefaultCarrier: Carrier;
    readonly CanReadDefaultPaymentMethod: boolean;
    readonly CanWriteDefaultPaymentMethod: boolean;
    DefaultPaymentMethod: PaymentMethod;
    readonly CanReadPaymentMethods: boolean;
    readonly CanWritePaymentMethods: boolean;
    PaymentMethods: PaymentMethod[];
    AddPaymentMethod(value: PaymentMethod): void;
    RemovePaymentMethod(value: PaymentMethod): void;
    readonly CanReadSalesOrderNumberPrefix: boolean;
    readonly CanWriteSalesOrderNumberPrefix: boolean;
    SalesOrderNumberPrefix: string;
    readonly CanReadProcessFlow: boolean;
    readonly CanWriteProcessFlow: boolean;
    ProcessFlow: ProcessFlow;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
}
