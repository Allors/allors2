import { SessionObject } from "@allors/framework";
import { UniquelyIdentifiable } from './UniquelyIdentifiable.g';
import { Auditable } from './Auditable.g';
import { JournalEntryNumber } from './JournalEntryNumber.g';
import { Country } from './Country.g';
import { Counter } from './Counter.g';
import { AccountingPeriod } from './AccountingPeriod.g';
import { InvoiceSequence } from './InvoiceSequence.g';
import { PaymentMethod } from './PaymentMethod.g';
import { Media } from './Media.g';
import { CostCenterSplitMethod } from './CostCenterSplitMethod.g';
import { LegalForm } from './LegalForm.g';
import { GeneralLedgerAccount } from './GeneralLedgerAccount.g';
import { CostOfGoodsSoldMethod } from './CostOfGoodsSoldMethod.g';
import { AccountingTransactionNumber } from './AccountingTransactionNumber.g';
import { Facility } from './Facility.g';
import { Person } from './Person.g';
import { Party } from './Party.g';
import { Organisation } from './Organisation.g';
import { BankAccount } from './BankAccount.g';
import { VatRegime } from './VatRegime.g';
import { ContactMechanism } from './ContactMechanism.g';
import { PostalAddress } from './PostalAddress.g';
import { User } from './User.g';
export declare class InternalOrganisation extends SessionObject implements UniquelyIdentifiable, Auditable {
    readonly CanReadPurchaseOrderNumberPrefix: boolean;
    readonly CanWritePurchaseOrderNumberPrefix: boolean;
    PurchaseOrderNumberPrefix: string;
    readonly CanReadTransactionReferenceNumber: boolean;
    readonly CanWriteTransactionReferenceNumber: boolean;
    TransactionReferenceNumber: string;
    readonly CanReadJournalEntryNumbers: boolean;
    readonly CanWriteJournalEntryNumbers: boolean;
    JournalEntryNumbers: JournalEntryNumber[];
    AddJournalEntryNumber(value: JournalEntryNumber): void;
    RemoveJournalEntryNumber(value: JournalEntryNumber): void;
    readonly CanReadEuListingState: boolean;
    readonly CanWriteEuListingState: boolean;
    EuListingState: Country;
    readonly CanReadPurchaseInvoiceCounter: boolean;
    readonly CanWritePurchaseInvoiceCounter: boolean;
    PurchaseInvoiceCounter: Counter;
    readonly CanReadActualAccountingPeriod: boolean;
    readonly CanWriteActualAccountingPeriod: boolean;
    ActualAccountingPeriod: AccountingPeriod;
    readonly CanReadInvoiceSequence: boolean;
    readonly CanWriteInvoiceSequence: boolean;
    InvoiceSequence: InvoiceSequence;
    readonly CanReadActivePaymentMethods: boolean;
    readonly ActivePaymentMethods: PaymentMethod[];
    readonly CanReadMaximumAllowedPaymentDifference: boolean;
    readonly CanWriteMaximumAllowedPaymentDifference: boolean;
    MaximumAllowedPaymentDifference: number;
    readonly CanReadLogoImage: boolean;
    readonly CanWriteLogoImage: boolean;
    LogoImage: Media;
    readonly CanReadCostCenterSplitMethod: boolean;
    readonly CanWriteCostCenterSplitMethod: boolean;
    CostCenterSplitMethod: CostCenterSplitMethod;
    readonly CanReadPurchaseOrderCounter: boolean;
    readonly CanWritePurchaseOrderCounter: boolean;
    PurchaseOrderCounter: Counter;
    readonly CanReadLegalForm: boolean;
    readonly CanWriteLegalForm: boolean;
    LegalForm: LegalForm;
    readonly CanReadSalesPaymentDifferencesAccount: boolean;
    readonly CanWriteSalesPaymentDifferencesAccount: boolean;
    SalesPaymentDifferencesAccount: GeneralLedgerAccount;
    readonly CanReadName: boolean;
    readonly CanWriteName: boolean;
    Name: string;
    readonly CanReadPurchaseTransactionReferenceNumber: boolean;
    readonly CanWritePurchaseTransactionReferenceNumber: boolean;
    PurchaseTransactionReferenceNumber: string;
    readonly CanReadFiscalYearStartMonth: boolean;
    readonly CanWriteFiscalYearStartMonth: boolean;
    FiscalYearStartMonth: number;
    readonly CanReadCostOfGoodsSoldMethod: boolean;
    readonly CanWriteCostOfGoodsSoldMethod: boolean;
    CostOfGoodsSoldMethod: CostOfGoodsSoldMethod;
    readonly CanReadVatDeactivated: boolean;
    readonly CanWriteVatDeactivated: boolean;
    VatDeactivated: boolean;
    readonly CanReadFiscalYearStartDay: boolean;
    readonly CanWriteFiscalYearStartDay: boolean;
    FiscalYearStartDay: number;
    readonly CanReadGeneralLedgerAccounts: boolean;
    readonly GeneralLedgerAccounts: GeneralLedgerAccount[];
    readonly CanReadAccountingTransactionCounter: boolean;
    readonly CanWriteAccountingTransactionCounter: boolean;
    AccountingTransactionCounter: Counter;
    readonly CanReadIncomingShipmentCounter: boolean;
    readonly CanWriteIncomingShipmentCounter: boolean;
    IncomingShipmentCounter: Counter;
    readonly CanReadRetainedEarningsAccount: boolean;
    readonly CanWriteRetainedEarningsAccount: boolean;
    RetainedEarningsAccount: GeneralLedgerAccount;
    readonly CanReadPurchaseInvoiceNumberPrefix: boolean;
    readonly CanWritePurchaseInvoiceNumberPrefix: boolean;
    PurchaseInvoiceNumberPrefix: string;
    readonly CanReadSalesPaymentDiscountDifferencesAccount: boolean;
    readonly CanWriteSalesPaymentDiscountDifferencesAccount: boolean;
    SalesPaymentDiscountDifferencesAccount: GeneralLedgerAccount;
    readonly CanReadSubAccountCounter: boolean;
    readonly CanWriteSubAccountCounter: boolean;
    SubAccountCounter: Counter;
    readonly CanReadAccountingTransactionNumbers: boolean;
    readonly CanWriteAccountingTransactionNumbers: boolean;
    AccountingTransactionNumbers: AccountingTransactionNumber[];
    AddAccountingTransactionNumber(value: AccountingTransactionNumber): void;
    RemoveAccountingTransactionNumber(value: AccountingTransactionNumber): void;
    readonly CanReadTransactionReferenceNumberPrefix: boolean;
    readonly CanWriteTransactionReferenceNumberPrefix: boolean;
    TransactionReferenceNumberPrefix: string;
    readonly CanReadQuoteCounter: boolean;
    readonly CanWriteQuoteCounter: boolean;
    QuoteCounter: Counter;
    readonly CanReadRequestCounter: boolean;
    readonly CanWriteRequestCounter: boolean;
    RequestCounter: Counter;
    readonly CanReadPurchasePaymentDifferencesAccount: boolean;
    readonly CanWritePurchasePaymentDifferencesAccount: boolean;
    PurchasePaymentDifferencesAccount: GeneralLedgerAccount;
    readonly CanReadSuspenceAccount: boolean;
    readonly CanWriteSuspenceAccount: boolean;
    SuspenceAccount: GeneralLedgerAccount;
    readonly CanReadNetIncomeAccount: boolean;
    readonly CanWriteNetIncomeAccount: boolean;
    NetIncomeAccount: GeneralLedgerAccount;
    readonly CanReadDoAccounting: boolean;
    readonly CanWriteDoAccounting: boolean;
    DoAccounting: boolean;
    readonly CanReadDefaultFacility: boolean;
    readonly CanWriteDefaultFacility: boolean;
    DefaultFacility: Facility;
    readonly CanReadPurchasePaymentDiscountDifferencesAccount: boolean;
    readonly CanWritePurchasePaymentDiscountDifferencesAccount: boolean;
    PurchasePaymentDiscountDifferencesAccount: GeneralLedgerAccount;
    readonly CanReadQuoteNumberPrefix: boolean;
    readonly CanWriteQuoteNumberPrefix: boolean;
    QuoteNumberPrefix: string;
    readonly CanReadPurchaseTransactionReferenceNumberPrefix: boolean;
    readonly CanWritePurchaseTransactionReferenceNumberPrefix: boolean;
    PurchaseTransactionReferenceNumberPrefix: string;
    readonly CanReadTaxNumber: boolean;
    readonly CanWriteTaxNumber: boolean;
    TaxNumber: string;
    readonly CanReadCalculationDifferencesAccount: boolean;
    readonly CanWriteCalculationDifferencesAccount: boolean;
    CalculationDifferencesAccount: GeneralLedgerAccount;
    readonly CanReadIncomingShipmentNumberPrefix: boolean;
    readonly CanWriteIncomingShipmentNumberPrefix: boolean;
    IncomingShipmentNumberPrefix: string;
    readonly CanReadRequestNumberPrefix: boolean;
    readonly CanWriteRequestNumberPrefix: boolean;
    RequestNumberPrefix: string;
    readonly CanReadCurrentSalesReps: boolean;
    readonly CanWriteCurrentSalesReps: boolean;
    CurrentSalesReps: Person[];
    AddCurrentSalesRep(value: Person): void;
    RemoveCurrentSalesRep(value: Person): void;
    readonly CanReadCurrentCustomers: boolean;
    readonly CanWriteCurrentCustomers: boolean;
    CurrentCustomers: Party[];
    AddCurrentCustomer(value: Party): void;
    RemoveCurrentCustomer(value: Party): void;
    readonly CanReadCurrentSuppliers: boolean;
    readonly CanWriteCurrentSuppliers: boolean;
    CurrentSuppliers: Organisation[];
    AddCurrentSupplier(value: Organisation): void;
    RemoveCurrentSupplier(value: Organisation): void;
    readonly CanReadBankAccounts: boolean;
    readonly CanWriteBankAccounts: boolean;
    BankAccounts: BankAccount[];
    AddBankAccount(value: BankAccount): void;
    RemoveBankAccount(value: BankAccount): void;
    readonly CanReadDefaultPaymentMethod: boolean;
    readonly CanWriteDefaultPaymentMethod: boolean;
    DefaultPaymentMethod: PaymentMethod;
    readonly CanReadVatRegime: boolean;
    readonly CanWriteVatRegime: boolean;
    VatRegime: VatRegime;
    readonly CanReadSalesReps: boolean;
    readonly CanWriteSalesReps: boolean;
    SalesReps: Person[];
    AddSalesRep(value: Person): void;
    RemoveSalesRep(value: Person): void;
    readonly CanReadBillingAddress: boolean;
    readonly CanWriteBillingAddress: boolean;
    BillingAddress: ContactMechanism;
    readonly CanReadOrderAddress: boolean;
    readonly CanWriteOrderAddress: boolean;
    OrderAddress: ContactMechanism;
    readonly CanReadShippingAddress: boolean;
    readonly CanWriteShippingAddress: boolean;
    ShippingAddress: PostalAddress;
    readonly CanReadActiveCustomers: boolean;
    readonly ActiveCustomers: Party[];
    readonly CanReadActiveEmployees: boolean;
    readonly ActiveEmployees: Person[];
    readonly CanReadActiveSuppliers: boolean;
    readonly ActiveSuppliers: Party[];
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
    readonly CanReadCreatedBy: boolean;
    readonly CanWriteCreatedBy: boolean;
    CreatedBy: User;
    readonly CanReadLastModifiedBy: boolean;
    readonly CanWriteLastModifiedBy: boolean;
    LastModifiedBy: User;
    readonly CanReadCreationDate: boolean;
    readonly CanWriteCreationDate: boolean;
    CreationDate: Date;
    readonly CanReadLastModifiedDate: boolean;
    readonly CanWriteLastModifiedDate: boolean;
    LastModifiedDate: Date;
}
