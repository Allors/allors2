import { SessionObject, Method } from "@allors/framework";
import { WorkEffort } from './WorkEffort.g';
import { WorkTaskVersion } from './WorkTaskVersion.g';
import { WorkEffortState } from './WorkEffortState.g';
import { Person } from './Person.g';
import { Priority } from './Priority.g';
import { WorkEffortPurpose } from './WorkEffortPurpose.g';
import { Facility } from './Facility.g';
import { Deliverable } from './Deliverable.g';
import { WorkEffortInventoryAssignment } from './WorkEffortInventoryAssignment.g';
import { WorkEffortType } from './WorkEffortType.g';
import { InventoryItem } from './InventoryItem.g';
import { Requirement } from './Requirement.g';
import { User } from './User.g';
export declare class WorkTask extends SessionObject implements WorkEffort {
    readonly CanReadSendNotification: boolean;
    readonly CanWriteSendNotification: boolean;
    SendNotification: boolean;
    readonly CanReadSendReminder: boolean;
    readonly CanWriteSendReminder: boolean;
    SendReminder: boolean;
    readonly CanReadRemindAt: boolean;
    readonly CanWriteRemindAt: boolean;
    RemindAt: Date;
    readonly CanReadCurrentVersion: boolean;
    readonly CanWriteCurrentVersion: boolean;
    CurrentVersion: WorkTaskVersion;
    readonly CanReadAllVersions: boolean;
    readonly CanWriteAllVersions: boolean;
    AllVersions: WorkTaskVersion[];
    AddAllVersion(value: WorkTaskVersion): void;
    RemoveAllVersion(value: WorkTaskVersion): void;
    readonly CanReadWorkEffortState: boolean;
    readonly CanWriteWorkEffortState: boolean;
    WorkEffortState: WorkEffortState;
    readonly CanReadOwner: boolean;
    readonly CanWriteOwner: boolean;
    Owner: Person;
    readonly CanReadName: boolean;
    readonly CanWriteName: boolean;
    Name: string;
    readonly CanReadDescription: boolean;
    readonly CanWriteDescription: boolean;
    Description: string;
    readonly CanReadPriority: boolean;
    readonly CanWritePriority: boolean;
    Priority: Priority;
    readonly CanReadWorkEffortPurposes: boolean;
    readonly CanWriteWorkEffortPurposes: boolean;
    WorkEffortPurposes: WorkEffortPurpose[];
    AddWorkEffortPurpose(value: WorkEffortPurpose): void;
    RemoveWorkEffortPurpose(value: WorkEffortPurpose): void;
    readonly CanReadActualCompletion: boolean;
    readonly CanWriteActualCompletion: boolean;
    ActualCompletion: Date;
    readonly CanReadScheduledStart: boolean;
    readonly CanWriteScheduledStart: boolean;
    ScheduledStart: Date;
    readonly CanReadScheduledCompletion: boolean;
    readonly CanWriteScheduledCompletion: boolean;
    ScheduledCompletion: Date;
    readonly CanReadActualHours: boolean;
    readonly CanWriteActualHours: boolean;
    ActualHours: number;
    readonly CanReadEstimatedHours: boolean;
    readonly CanWriteEstimatedHours: boolean;
    EstimatedHours: number;
    readonly CanReadPrecendencies: boolean;
    readonly CanWritePrecendencies: boolean;
    Precendencies: WorkEffort[];
    AddPrecendency(value: WorkEffort): void;
    RemovePrecendency(value: WorkEffort): void;
    readonly CanReadFacility: boolean;
    readonly CanWriteFacility: boolean;
    Facility: Facility;
    readonly CanReadDeliverablesProduced: boolean;
    readonly CanWriteDeliverablesProduced: boolean;
    DeliverablesProduced: Deliverable[];
    AddDeliverablesProduced(value: Deliverable): void;
    RemoveDeliverablesProduced(value: Deliverable): void;
    readonly CanReadActualStart: boolean;
    readonly CanWriteActualStart: boolean;
    ActualStart: Date;
    readonly CanReadInventoryItemsNeeded: boolean;
    readonly CanWriteInventoryItemsNeeded: boolean;
    InventoryItemsNeeded: WorkEffortInventoryAssignment[];
    AddInventoryItemsNeeded(value: WorkEffortInventoryAssignment): void;
    RemoveInventoryItemsNeeded(value: WorkEffortInventoryAssignment): void;
    readonly CanReadChildren: boolean;
    readonly CanWriteChildren: boolean;
    Children: WorkEffort[];
    AddChild(value: WorkEffort): void;
    RemoveChild(value: WorkEffort): void;
    readonly CanReadWorkEffortType: boolean;
    readonly CanWriteWorkEffortType: boolean;
    WorkEffortType: WorkEffortType;
    readonly CanReadInventoryItemsProduced: boolean;
    readonly CanWriteInventoryItemsProduced: boolean;
    InventoryItemsProduced: InventoryItem[];
    AddInventoryItemsProduced(value: InventoryItem): void;
    RemoveInventoryItemsProduced(value: InventoryItem): void;
    readonly CanReadRequirementFulfillments: boolean;
    readonly CanWriteRequirementFulfillments: boolean;
    RequirementFulfillments: Requirement[];
    AddRequirementFulfillment(value: Requirement): void;
    RemoveRequirementFulfillment(value: Requirement): void;
    readonly CanReadSpecialTerms: boolean;
    readonly CanWriteSpecialTerms: boolean;
    SpecialTerms: string;
    readonly CanReadConcurrencies: boolean;
    readonly CanWriteConcurrencies: boolean;
    Concurrencies: WorkEffort[];
    AddConcurrency(value: WorkEffort): void;
    RemoveConcurrency(value: WorkEffort): void;
    readonly CanReadUniqueId: boolean;
    readonly CanWriteUniqueId: boolean;
    UniqueId: string;
    readonly CanReadCreatedBy: boolean;
    readonly CanWriteCreatedBy: boolean;
    CreatedBy: User;
    readonly CanReadLastModifiedBy: boolean;
    readonly CanWriteLastModifiedBy: boolean;
    LastModifiedBy: User;
    readonly CanReadCreationDate: boolean;
    readonly CanWriteCreationDate: boolean;
    CreationDate: Date;
    readonly CanReadLastModifiedDate: boolean;
    readonly CanWriteLastModifiedDate: boolean;
    LastModifiedDate: Date;
    readonly CanExecuteConfirm: boolean;
    readonly Confirm: Method;
    readonly CanExecuteFinish: boolean;
    readonly Finish: Method;
    readonly CanExecuteCancel: boolean;
    readonly Cancel: Method;
    readonly CanExecuteReopen: boolean;
    readonly Reopen: Method;
    readonly CanExecuteDelete: boolean;
    readonly Delete: Method;
}
