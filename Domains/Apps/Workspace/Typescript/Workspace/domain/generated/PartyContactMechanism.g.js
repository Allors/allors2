"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
const framework_1 = require("@allors/framework");
class PartyContactMechanism extends framework_1.SessionObject {
    get CanReadContactPurposes() {
        return this.canRead('ContactPurposes');
    }
    get CanWriteContactPurposes() {
        return this.canWrite('ContactPurposes');
    }
    get ContactPurposes() {
        return this.get('ContactPurposes');
    }
    AddContactPurpose(value) {
        return this.add('ContactPurposes', value);
    }
    RemoveContactPurpose(value) {
        return this.remove('ContactPurposes', value);
    }
    set ContactPurposes(value) {
        this.set('ContactPurposes', value);
    }
    get CanReadContactMechanism() {
        return this.canRead('ContactMechanism');
    }
    get CanWriteContactMechanism() {
        return this.canWrite('ContactMechanism');
    }
    get ContactMechanism() {
        return this.get('ContactMechanism');
    }
    set ContactMechanism(value) {
        this.set('ContactMechanism', value);
    }
    get CanReadUseAsDefault() {
        return this.canRead('UseAsDefault');
    }
    get CanWriteUseAsDefault() {
        return this.canWrite('UseAsDefault');
    }
    get UseAsDefault() {
        return this.get('UseAsDefault');
    }
    set UseAsDefault(value) {
        this.set('UseAsDefault', value);
    }
    get CanReadNonSolicitationIndicator() {
        return this.canRead('NonSolicitationIndicator');
    }
    get CanWriteNonSolicitationIndicator() {
        return this.canWrite('NonSolicitationIndicator');
    }
    get NonSolicitationIndicator() {
        return this.get('NonSolicitationIndicator');
    }
    set NonSolicitationIndicator(value) {
        this.set('NonSolicitationIndicator', value);
    }
    get CanReadComment() {
        return this.canRead('Comment');
    }
    get CanWriteComment() {
        return this.canWrite('Comment');
    }
    get Comment() {
        return this.get('Comment');
    }
    set Comment(value) {
        this.set('Comment', value);
    }
    get CanReadCreatedBy() {
        return this.canRead('CreatedBy');
    }
    get CanWriteCreatedBy() {
        return this.canWrite('CreatedBy');
    }
    get CreatedBy() {
        return this.get('CreatedBy');
    }
    set CreatedBy(value) {
        this.set('CreatedBy', value);
    }
    get CanReadLastModifiedBy() {
        return this.canRead('LastModifiedBy');
    }
    get CanWriteLastModifiedBy() {
        return this.canWrite('LastModifiedBy');
    }
    get LastModifiedBy() {
        return this.get('LastModifiedBy');
    }
    set LastModifiedBy(value) {
        this.set('LastModifiedBy', value);
    }
    get CanReadCreationDate() {
        return this.canRead('CreationDate');
    }
    get CanWriteCreationDate() {
        return this.canWrite('CreationDate');
    }
    get CreationDate() {
        return this.get('CreationDate');
    }
    set CreationDate(value) {
        this.set('CreationDate', value);
    }
    get CanReadLastModifiedDate() {
        return this.canRead('LastModifiedDate');
    }
    get CanWriteLastModifiedDate() {
        return this.canWrite('LastModifiedDate');
    }
    get LastModifiedDate() {
        return this.get('LastModifiedDate');
    }
    set LastModifiedDate(value) {
        this.set('LastModifiedDate', value);
    }
    get CanReadFromDate() {
        return this.canRead('FromDate');
    }
    get CanWriteFromDate() {
        return this.canWrite('FromDate');
    }
    get FromDate() {
        return this.get('FromDate');
    }
    set FromDate(value) {
        this.set('FromDate', value);
    }
    get CanReadThroughDate() {
        return this.canRead('ThroughDate');
    }
    get CanWriteThroughDate() {
        return this.canWrite('ThroughDate');
    }
    get ThroughDate() {
        return this.get('ThroughDate');
    }
    set ThroughDate(value) {
        this.set('ThroughDate', value);
    }
    get CanExecuteDelete() {
        return this.canExecute('Delete');
    }
    get Delete() {
        return new framework_1.Method(this, 'Delete');
    }
}
exports.PartyContactMechanism = PartyContactMechanism;
