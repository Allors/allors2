// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
import { SessionObject, Method } from "@allors/framework";

import { PartyRelationship } from './PartyRelationship.g';
import { Period } from './Period.g';
import { Deletable } from './Deletable.g';
import { Organisation } from './Organisation.g';
import { OrganisationUnit } from './OrganisationUnit.g';
import { Party } from './Party.g';

export class OrganisationRollUp extends SessionObject implements PartyRelationship {
    get CanReadParent(): boolean {
        return this.canRead('Parent');
    }

    get CanWriteParent(): boolean {
        return this.canWrite('Parent');
    }

    get Parent(): Organisation {
        return this.get('Parent');
    }

    set Parent(value: Organisation) {
        this.set('Parent', value);
    }

    get CanReadRollupKind(): boolean {
        return this.canRead('RollupKind');
    }

    get CanWriteRollupKind(): boolean {
        return this.canWrite('RollupKind');
    }

    get RollupKind(): OrganisationUnit {
        return this.get('RollupKind');
    }

    set RollupKind(value: OrganisationUnit) {
        this.set('RollupKind', value);
    }

    get CanReadChild(): boolean {
        return this.canRead('Child');
    }

    get CanWriteChild(): boolean {
        return this.canWrite('Child');
    }

    get Child(): Organisation {
        return this.get('Child');
    }

    set Child(value: Organisation) {
        this.set('Child', value);
    }

    get CanReadParties(): boolean {
        return this.canRead('Parties');
    }

    get Parties(): Party[] {
        return this.get('Parties');
    }


    get CanReadFromDate(): boolean {
        return this.canRead('FromDate');
    }

    get CanWriteFromDate(): boolean {
        return this.canWrite('FromDate');
    }

    get FromDate(): Date {
        return this.get('FromDate');
    }

    set FromDate(value: Date) {
        this.set('FromDate', value);
    }

    get CanReadThroughDate(): boolean {
        return this.canRead('ThroughDate');
    }

    get CanWriteThroughDate(): boolean {
        return this.canWrite('ThroughDate');
    }

    get ThroughDate(): Date {
        return this.get('ThroughDate');
    }

    set ThroughDate(value: Date) {
        this.set('ThroughDate', value);
    }


    get CanExecuteDelete(): boolean {
        return this.canExecute('Delete');
    }

    get Delete(): Method {
        return new Method(this, 'Delete');
    }
}
